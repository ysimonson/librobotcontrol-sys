/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const RC_BTN_STATE_PRESSED: u32 = 1;
pub const RC_BTN_STATE_RELEASED: u32 = 0;
pub const RC_BTN_POLARITY_NORM_HIGH: u32 = 1;
pub const RC_BTN_POLARITY_NORM_LOW: u32 = 0;
pub const RC_BTN_DEBOUNCE_DEFAULT_US: u32 = 2000;
pub const _REDIR_TIME64: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __LONG_MAX: u32 = 2147483647;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST64_MAX: i32 = -1;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const RC_MAX_DSM_CHANNELS: u32 = 9;
pub const GPIOHANDLE_REQUEST_INPUT: u32 = 1;
pub const GPIOHANDLE_REQUEST_OUTPUT: u32 = 2;
pub const GPIOHANDLE_REQUEST_ACTIVE_LOW: u32 = 4;
pub const GPIOHANDLE_REQUEST_OPEN_DRAIN: u32 = 8;
pub const GPIOHANDLE_REQUEST_OPEN_SOURCE: u32 = 16;
pub const GPIOEVENT_REQUEST_RISING_EDGE: u32 = 1;
pub const GPIOEVENT_REQUEST_FALLING_EDGE: u32 = 2;
pub const GPIOEVENT_REQUEST_BOTH_EDGES: u32 = 3;
pub const RC_GPIOEVENT_ERROR: i32 = -1;
pub const RC_GPIOEVENT_TIMEOUT: u32 = 0;
pub const RC_GPIOEVENT_RISING_EDGE: u32 = 1;
pub const RC_GPIOEVENT_FALLING_EDGE: u32 = 2;
pub const I2C_MAX_BUS: u32 = 5;
pub const I2C_BUFFER_SIZE: u32 = 128;
pub const MAVLINK_PRIMARY_XML_IDX: u32 = 0;
pub const MAVLINK_STX: u32 = 253;
pub const MAVLINK_ALIGNED_FIELDS: u32 = 1;
pub const MAVLINK_CRC_EXTRA: u32 = 1;
pub const MAVLINK_COMMAND_24BIT: u32 = 1;
pub const MAVLINK_BUILD_DATE: &[u8; 16usize] = b"Tue Jan 23 2018\0";
pub const MAVLINK_WIRE_PROTOCOL_VERSION: &[u8; 4usize] = b"2.0\0";
pub const MAVLINK_MAX_DIALECT_PAYLOAD_SIZE: u32 = 255;
pub const MAVLINK_THIS_XML_IDX: u32 = 0;
pub const _BSD_SOURCE: u32 = 1;
pub const _XOPEN_SOURCE: u32 = 700;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const MAVLINK_MAX_PAYLOAD_LEN: u32 = 255;
pub const MAVLINK_CORE_HEADER_LEN: u32 = 9;
pub const MAVLINK_CORE_HEADER_MAVLINK1_LEN: u32 = 5;
pub const MAVLINK_NUM_HEADER_BYTES: u32 = 10;
pub const MAVLINK_NUM_CHECKSUM_BYTES: u32 = 2;
pub const MAVLINK_NUM_NON_PAYLOAD_BYTES: u32 = 12;
pub const MAVLINK_SIGNATURE_BLOCK_LEN: u32 = 13;
pub const MAVLINK_MAX_PACKET_LEN: u32 = 280;
pub const MAVLINK_MAX_FIELDS: u32 = 64;
pub const MAVLINK_COMM_NUM_BUFFERS: u32 = 16;
pub const MAVLINK_STATUS_FLAG_IN_MAVLINK1: u32 = 1;
pub const MAVLINK_STATUS_FLAG_OUT_MAVLINK1: u32 = 2;
pub const MAVLINK_STATUS_FLAG_IN_SIGNED: u32 = 4;
pub const MAVLINK_STATUS_FLAG_IN_BADSIG: u32 = 8;
pub const MAVLINK_STX_MAVLINK1: u32 = 254;
pub const MAVLINK_SIGNING_FLAG_SIGN_OUTGOING: u32 = 1;
pub const MAVLINK_SIGNING_FLAG_NO_TIMESTAMPS: u32 = 2;
pub const MAVLINK_MAX_SIGNING_STREAMS: u32 = 16;
pub const MAVLINK_BIG_ENDIAN: u32 = 0;
pub const MAVLINK_LITTLE_ENDIAN: u32 = 1;
pub const MAV_MSG_ENTRY_FLAG_HAVE_TARGET_SYSTEM: u32 = 1;
pub const MAV_MSG_ENTRY_FLAG_HAVE_TARGET_COMPONENT: u32 = 2;
pub const MAVLINK_IFLAG_SIGNED: u32 = 1;
pub const MAVLINK_IFLAG_MASK: u32 = 1;
pub const MAVLINK_STACK_BUFFER: u32 = 0;
pub const X25_INIT_CRC: u32 = 65535;
pub const X25_VALIDATE_CRC: u32 = 61624;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 2;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const FILENAME_MAX: u32 = 4096;
pub const FOPEN_MAX: u32 = 1000;
pub const TMP_MAX: u32 = 10000;
pub const L_tmpnam: u32 = 20;
pub const L_ctermid: u32 = 20;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const L_cuserid: u32 = 20;
pub const MAVLINK_VERSION: u32 = 3;
pub const MAVLINK_MSG_ID_HEARTBEAT: u32 = 0;
pub const MAVLINK_MSG_ID_HEARTBEAT_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_0_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_0_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_HEARTBEAT_CRC: u32 = 50;
pub const MAVLINK_MSG_ID_0_CRC: u32 = 50;
pub const MAVLINK_MSG_ID_SYS_STATUS: u32 = 1;
pub const MAVLINK_MSG_ID_SYS_STATUS_LEN: u32 = 31;
pub const MAVLINK_MSG_ID_SYS_STATUS_MIN_LEN: u32 = 31;
pub const MAVLINK_MSG_ID_1_LEN: u32 = 31;
pub const MAVLINK_MSG_ID_1_MIN_LEN: u32 = 31;
pub const MAVLINK_MSG_ID_SYS_STATUS_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_1_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_SYSTEM_TIME: u32 = 2;
pub const MAVLINK_MSG_ID_SYSTEM_TIME_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_SYSTEM_TIME_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_2_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_2_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_SYSTEM_TIME_CRC: u32 = 137;
pub const MAVLINK_MSG_ID_2_CRC: u32 = 137;
pub const MAVLINK_MSG_ID_PING: u32 = 4;
pub const MAVLINK_MSG_ID_PING_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_PING_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_4_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_4_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_PING_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_4_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL: u32 = 5;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_5_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_5_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_CRC: u32 = 217;
pub const MAVLINK_MSG_ID_5_CRC: u32 = 217;
pub const MAVLINK_MSG_CHANGE_OPERATOR_CONTROL_FIELD_PASSKEY_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK: u32 = 6;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_6_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_6_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK_CRC: u32 = 104;
pub const MAVLINK_MSG_ID_6_CRC: u32 = 104;
pub const MAVLINK_MSG_ID_AUTH_KEY: u32 = 7;
pub const MAVLINK_MSG_ID_AUTH_KEY_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_AUTH_KEY_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_7_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_7_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_AUTH_KEY_CRC: u32 = 119;
pub const MAVLINK_MSG_ID_7_CRC: u32 = 119;
pub const MAVLINK_MSG_AUTH_KEY_FIELD_KEY_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_SET_MODE: u32 = 11;
pub const MAVLINK_MSG_ID_SET_MODE_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_SET_MODE_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_11_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_11_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_SET_MODE_CRC: u32 = 89;
pub const MAVLINK_MSG_ID_11_CRC: u32 = 89;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_READ: u32 = 20;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_READ_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_20_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_20_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_READ_CRC: u32 = 214;
pub const MAVLINK_MSG_ID_20_CRC: u32 = 214;
pub const MAVLINK_MSG_PARAM_REQUEST_READ_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_LIST: u32 = 21;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_LIST_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_21_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_21_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_PARAM_REQUEST_LIST_CRC: u32 = 159;
pub const MAVLINK_MSG_ID_21_CRC: u32 = 159;
pub const MAVLINK_MSG_ID_PARAM_VALUE: u32 = 22;
pub const MAVLINK_MSG_ID_PARAM_VALUE_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_PARAM_VALUE_MIN_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_22_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_22_MIN_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_PARAM_VALUE_CRC: u32 = 220;
pub const MAVLINK_MSG_ID_22_CRC: u32 = 220;
pub const MAVLINK_MSG_PARAM_VALUE_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_PARAM_SET: u32 = 23;
pub const MAVLINK_MSG_ID_PARAM_SET_LEN: u32 = 23;
pub const MAVLINK_MSG_ID_PARAM_SET_MIN_LEN: u32 = 23;
pub const MAVLINK_MSG_ID_23_LEN: u32 = 23;
pub const MAVLINK_MSG_ID_23_MIN_LEN: u32 = 23;
pub const MAVLINK_MSG_ID_PARAM_SET_CRC: u32 = 168;
pub const MAVLINK_MSG_ID_23_CRC: u32 = 168;
pub const MAVLINK_MSG_PARAM_SET_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_GPS_RAW_INT: u32 = 24;
pub const MAVLINK_MSG_ID_GPS_RAW_INT_LEN: u32 = 50;
pub const MAVLINK_MSG_ID_GPS_RAW_INT_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_24_LEN: u32 = 50;
pub const MAVLINK_MSG_ID_24_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_GPS_RAW_INT_CRC: u32 = 24;
pub const MAVLINK_MSG_ID_24_CRC: u32 = 24;
pub const MAVLINK_MSG_ID_GPS_STATUS: u32 = 25;
pub const MAVLINK_MSG_ID_GPS_STATUS_LEN: u32 = 101;
pub const MAVLINK_MSG_ID_GPS_STATUS_MIN_LEN: u32 = 101;
pub const MAVLINK_MSG_ID_25_LEN: u32 = 101;
pub const MAVLINK_MSG_ID_25_MIN_LEN: u32 = 101;
pub const MAVLINK_MSG_ID_GPS_STATUS_CRC: u32 = 23;
pub const MAVLINK_MSG_ID_25_CRC: u32 = 23;
pub const MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_PRN_LEN: u32 = 20;
pub const MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_USED_LEN: u32 = 20;
pub const MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_ELEVATION_LEN: u32 = 20;
pub const MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_AZIMUTH_LEN: u32 = 20;
pub const MAVLINK_MSG_GPS_STATUS_FIELD_SATELLITE_SNR_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_SCALED_IMU: u32 = 26;
pub const MAVLINK_MSG_ID_SCALED_IMU_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_26_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_26_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU_CRC: u32 = 170;
pub const MAVLINK_MSG_ID_26_CRC: u32 = 170;
pub const MAVLINK_MSG_ID_RAW_IMU: u32 = 27;
pub const MAVLINK_MSG_ID_RAW_IMU_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_RAW_IMU_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_27_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_27_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_RAW_IMU_CRC: u32 = 144;
pub const MAVLINK_MSG_ID_27_CRC: u32 = 144;
pub const MAVLINK_MSG_ID_RAW_PRESSURE: u32 = 28;
pub const MAVLINK_MSG_ID_RAW_PRESSURE_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_RAW_PRESSURE_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_28_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_28_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_RAW_PRESSURE_CRC: u32 = 67;
pub const MAVLINK_MSG_ID_28_CRC: u32 = 67;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE: u32 = 29;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_29_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_29_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE_CRC: u32 = 115;
pub const MAVLINK_MSG_ID_29_CRC: u32 = 115;
pub const MAVLINK_MSG_ID_ATTITUDE: u32 = 30;
pub const MAVLINK_MSG_ID_ATTITUDE_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_ATTITUDE_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_30_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_30_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_ATTITUDE_CRC: u32 = 39;
pub const MAVLINK_MSG_ID_30_CRC: u32 = 39;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION: u32 = 31;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_31_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_31_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC: u32 = 246;
pub const MAVLINK_MSG_ID_31_CRC: u32 = 246;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED: u32 = 32;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_32_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_32_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC: u32 = 185;
pub const MAVLINK_MSG_ID_32_CRC: u32 = 185;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT: u32 = 33;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_33_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_33_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC: u32 = 104;
pub const MAVLINK_MSG_ID_33_CRC: u32 = 104;
pub const MAVLINK_MSG_ID_RC_CHANNELS_SCALED: u32 = 34;
pub const MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_RC_CHANNELS_SCALED_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_34_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_34_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_34_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_RC_CHANNELS_RAW: u32 = 35;
pub const MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_RC_CHANNELS_RAW_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_35_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_35_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC: u32 = 244;
pub const MAVLINK_MSG_ID_35_CRC: u32 = 244;
pub const MAVLINK_MSG_ID_SERVO_OUTPUT_RAW: u32 = 36;
pub const MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_MIN_LEN: u32 = 21;
pub const MAVLINK_MSG_ID_36_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_36_MIN_LEN: u32 = 21;
pub const MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC: u32 = 222;
pub const MAVLINK_MSG_ID_36_CRC: u32 = 222;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST: u32 = 37;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_LEN: u32 = 7;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_37_LEN: u32 = 7;
pub const MAVLINK_MSG_ID_37_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_PARTIAL_LIST_CRC: u32 = 212;
pub const MAVLINK_MSG_ID_37_CRC: u32 = 212;
pub const MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST: u32 = 38;
pub const MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_LEN: u32 = 7;
pub const MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_38_LEN: u32 = 7;
pub const MAVLINK_MSG_ID_38_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_MISSION_WRITE_PARTIAL_LIST_CRC: u32 = 9;
pub const MAVLINK_MSG_ID_38_CRC: u32 = 9;
pub const MAVLINK_MSG_ID_MISSION_ITEM: u32 = 39;
pub const MAVLINK_MSG_ID_MISSION_ITEM_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_MISSION_ITEM_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_39_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_39_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_MISSION_ITEM_CRC: u32 = 254;
pub const MAVLINK_MSG_ID_39_CRC: u32 = 254;
pub const MAVLINK_MSG_ID_MISSION_REQUEST: u32 = 40;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_40_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_40_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_CRC: u32 = 230;
pub const MAVLINK_MSG_ID_40_CRC: u32 = 230;
pub const MAVLINK_MSG_ID_MISSION_SET_CURRENT: u32 = 41;
pub const MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_SET_CURRENT_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_41_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_41_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_SET_CURRENT_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_41_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_MISSION_CURRENT: u32 = 42;
pub const MAVLINK_MSG_ID_MISSION_CURRENT_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_CURRENT_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_42_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_42_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_CURRENT_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_42_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_LIST: u32 = 43;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_LIST_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_43_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_43_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_LIST_CRC: u32 = 132;
pub const MAVLINK_MSG_ID_43_CRC: u32 = 132;
pub const MAVLINK_MSG_ID_MISSION_COUNT: u32 = 44;
pub const MAVLINK_MSG_ID_MISSION_COUNT_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_MISSION_COUNT_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_44_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_44_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_COUNT_CRC: u32 = 221;
pub const MAVLINK_MSG_ID_44_CRC: u32 = 221;
pub const MAVLINK_MSG_ID_MISSION_CLEAR_ALL: u32 = 45;
pub const MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_MISSION_CLEAR_ALL_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_45_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_45_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_CLEAR_ALL_CRC: u32 = 232;
pub const MAVLINK_MSG_ID_45_CRC: u32 = 232;
pub const MAVLINK_MSG_ID_MISSION_ITEM_REACHED: u32 = 46;
pub const MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_ITEM_REACHED_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_46_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_46_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC: u32 = 11;
pub const MAVLINK_MSG_ID_46_CRC: u32 = 11;
pub const MAVLINK_MSG_ID_MISSION_ACK: u32 = 47;
pub const MAVLINK_MSG_ID_MISSION_ACK_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_ACK_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_47_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_47_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_MISSION_ACK_CRC: u32 = 153;
pub const MAVLINK_MSG_ID_47_CRC: u32 = 153;
pub const MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN: u32 = 48;
pub const MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_LEN: u32 = 21;
pub const MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_MIN_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_48_LEN: u32 = 21;
pub const MAVLINK_MSG_ID_48_MIN_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_SET_GPS_GLOBAL_ORIGIN_CRC: u32 = 41;
pub const MAVLINK_MSG_ID_48_CRC: u32 = 41;
pub const MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN: u32 = 49;
pub const MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_49_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_49_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_GPS_GLOBAL_ORIGIN_CRC: u32 = 39;
pub const MAVLINK_MSG_ID_49_CRC: u32 = 39;
pub const MAVLINK_MSG_ID_PARAM_MAP_RC: u32 = 50;
pub const MAVLINK_MSG_ID_PARAM_MAP_RC_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_PARAM_MAP_RC_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_50_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_50_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_PARAM_MAP_RC_CRC: u32 = 78;
pub const MAVLINK_MSG_ID_50_CRC: u32 = 78;
pub const MAVLINK_MSG_PARAM_MAP_RC_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_INT: u32 = 51;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_INT_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_INT_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_51_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_51_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MISSION_REQUEST_INT_CRC: u32 = 196;
pub const MAVLINK_MSG_ID_51_CRC: u32 = 196;
pub const MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA: u32 = 54;
pub const MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_MIN_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_54_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_54_MIN_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_SAFETY_SET_ALLOWED_AREA_CRC: u32 = 15;
pub const MAVLINK_MSG_ID_54_CRC: u32 = 15;
pub const MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA: u32 = 55;
pub const MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_MIN_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_55_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_55_MIN_LEN: u32 = 25;
pub const MAVLINK_MSG_ID_SAFETY_ALLOWED_AREA_CRC: u32 = 3;
pub const MAVLINK_MSG_ID_55_CRC: u32 = 3;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV: u32 = 61;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_LEN: u32 = 72;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_MIN_LEN: u32 = 72;
pub const MAVLINK_MSG_ID_61_LEN: u32 = 72;
pub const MAVLINK_MSG_ID_61_MIN_LEN: u32 = 72;
pub const MAVLINK_MSG_ID_ATTITUDE_QUATERNION_COV_CRC: u32 = 167;
pub const MAVLINK_MSG_ID_61_CRC: u32 = 167;
pub const MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ATTITUDE_QUATERNION_COV_FIELD_COVARIANCE_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT: u32 = 62;
pub const MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_62_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_62_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_CRC: u32 = 183;
pub const MAVLINK_MSG_ID_62_CRC: u32 = 183;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV: u32 = 63;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_LEN: u32 = 181;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_MIN_LEN: u32 = 181;
pub const MAVLINK_MSG_ID_63_LEN: u32 = 181;
pub const MAVLINK_MSG_ID_63_MIN_LEN: u32 = 181;
pub const MAVLINK_MSG_ID_GLOBAL_POSITION_INT_COV_CRC: u32 = 119;
pub const MAVLINK_MSG_ID_63_CRC: u32 = 119;
pub const MAVLINK_MSG_GLOBAL_POSITION_INT_COV_FIELD_COVARIANCE_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV: u32 = 64;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_LEN: u32 = 225;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_MIN_LEN: u32 = 225;
pub const MAVLINK_MSG_ID_64_LEN: u32 = 225;
pub const MAVLINK_MSG_ID_64_MIN_LEN: u32 = 225;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_COV_CRC: u32 = 191;
pub const MAVLINK_MSG_ID_64_CRC: u32 = 191;
pub const MAVLINK_MSG_LOCAL_POSITION_NED_COV_FIELD_COVARIANCE_LEN: u32 = 45;
pub const MAVLINK_MSG_ID_RC_CHANNELS: u32 = 65;
pub const MAVLINK_MSG_ID_RC_CHANNELS_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_RC_CHANNELS_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_65_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_65_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_RC_CHANNELS_CRC: u32 = 118;
pub const MAVLINK_MSG_ID_65_CRC: u32 = 118;
pub const MAVLINK_MSG_ID_REQUEST_DATA_STREAM: u32 = 66;
pub const MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_REQUEST_DATA_STREAM_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_66_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_66_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_REQUEST_DATA_STREAM_CRC: u32 = 148;
pub const MAVLINK_MSG_ID_66_CRC: u32 = 148;
pub const MAVLINK_MSG_ID_DATA_STREAM: u32 = 67;
pub const MAVLINK_MSG_ID_DATA_STREAM_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_DATA_STREAM_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_67_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_67_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_DATA_STREAM_CRC: u32 = 21;
pub const MAVLINK_MSG_ID_67_CRC: u32 = 21;
pub const MAVLINK_MSG_ID_MANUAL_CONTROL: u32 = 69;
pub const MAVLINK_MSG_ID_MANUAL_CONTROL_LEN: u32 = 11;
pub const MAVLINK_MSG_ID_MANUAL_CONTROL_MIN_LEN: u32 = 11;
pub const MAVLINK_MSG_ID_69_LEN: u32 = 11;
pub const MAVLINK_MSG_ID_69_MIN_LEN: u32 = 11;
pub const MAVLINK_MSG_ID_MANUAL_CONTROL_CRC: u32 = 243;
pub const MAVLINK_MSG_ID_69_CRC: u32 = 243;
pub const MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE: u32 = 70;
pub const MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_70_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_70_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_RC_CHANNELS_OVERRIDE_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_70_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_MISSION_ITEM_INT: u32 = 73;
pub const MAVLINK_MSG_ID_MISSION_ITEM_INT_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_MISSION_ITEM_INT_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_73_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_73_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_MISSION_ITEM_INT_CRC: u32 = 38;
pub const MAVLINK_MSG_ID_73_CRC: u32 = 38;
pub const MAVLINK_MSG_ID_VFR_HUD: u32 = 74;
pub const MAVLINK_MSG_ID_VFR_HUD_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_VFR_HUD_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_74_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_74_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_VFR_HUD_CRC: u32 = 20;
pub const MAVLINK_MSG_ID_74_CRC: u32 = 20;
pub const MAVLINK_MSG_ID_COMMAND_INT: u32 = 75;
pub const MAVLINK_MSG_ID_COMMAND_INT_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_COMMAND_INT_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_75_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_75_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_COMMAND_INT_CRC: u32 = 158;
pub const MAVLINK_MSG_ID_75_CRC: u32 = 158;
pub const MAVLINK_MSG_ID_COMMAND_LONG: u32 = 76;
pub const MAVLINK_MSG_ID_COMMAND_LONG_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_COMMAND_LONG_MIN_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_76_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_76_MIN_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_COMMAND_LONG_CRC: u32 = 152;
pub const MAVLINK_MSG_ID_76_CRC: u32 = 152;
pub const MAVLINK_MSG_ID_COMMAND_ACK: u32 = 77;
pub const MAVLINK_MSG_ID_COMMAND_ACK_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_COMMAND_ACK_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_77_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_77_MIN_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_COMMAND_ACK_CRC: u32 = 143;
pub const MAVLINK_MSG_ID_77_CRC: u32 = 143;
pub const MAVLINK_MSG_ID_MANUAL_SETPOINT: u32 = 81;
pub const MAVLINK_MSG_ID_MANUAL_SETPOINT_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_MANUAL_SETPOINT_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_81_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_81_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_MANUAL_SETPOINT_CRC: u32 = 106;
pub const MAVLINK_MSG_ID_81_CRC: u32 = 106;
pub const MAVLINK_MSG_ID_SET_ATTITUDE_TARGET: u32 = 82;
pub const MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_LEN: u32 = 39;
pub const MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_MIN_LEN: u32 = 39;
pub const MAVLINK_MSG_ID_82_LEN: u32 = 39;
pub const MAVLINK_MSG_ID_82_MIN_LEN: u32 = 39;
pub const MAVLINK_MSG_ID_SET_ATTITUDE_TARGET_CRC: u32 = 49;
pub const MAVLINK_MSG_ID_82_CRC: u32 = 49;
pub const MAVLINK_MSG_SET_ATTITUDE_TARGET_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_ATTITUDE_TARGET: u32 = 83;
pub const MAVLINK_MSG_ID_ATTITUDE_TARGET_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_ATTITUDE_TARGET_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_83_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_83_MIN_LEN: u32 = 37;
pub const MAVLINK_MSG_ID_ATTITUDE_TARGET_CRC: u32 = 22;
pub const MAVLINK_MSG_ID_83_CRC: u32 = 22;
pub const MAVLINK_MSG_ATTITUDE_TARGET_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED: u32 = 84;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_84_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_84_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_LOCAL_NED_CRC: u32 = 143;
pub const MAVLINK_MSG_ID_84_CRC: u32 = 143;
pub const MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED: u32 = 85;
pub const MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_85_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_85_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_POSITION_TARGET_LOCAL_NED_CRC: u32 = 140;
pub const MAVLINK_MSG_ID_85_CRC: u32 = 140;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT: u32 = 86;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_86_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_86_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_SET_POSITION_TARGET_GLOBAL_INT_CRC: u32 = 5;
pub const MAVLINK_MSG_ID_86_CRC: u32 = 5;
pub const MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT: u32 = 87;
pub const MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_87_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_87_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_CRC: u32 = 150;
pub const MAVLINK_MSG_ID_87_CRC: u32 = 150;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET: u32 = 89;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_89_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_89_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET_CRC: u32 = 231;
pub const MAVLINK_MSG_ID_89_CRC: u32 = 231;
pub const MAVLINK_MSG_ID_HIL_STATE: u32 = 90;
pub const MAVLINK_MSG_ID_HIL_STATE_LEN: u32 = 56;
pub const MAVLINK_MSG_ID_HIL_STATE_MIN_LEN: u32 = 56;
pub const MAVLINK_MSG_ID_90_LEN: u32 = 56;
pub const MAVLINK_MSG_ID_90_MIN_LEN: u32 = 56;
pub const MAVLINK_MSG_ID_HIL_STATE_CRC: u32 = 183;
pub const MAVLINK_MSG_ID_90_CRC: u32 = 183;
pub const MAVLINK_MSG_ID_HIL_CONTROLS: u32 = 91;
pub const MAVLINK_MSG_ID_HIL_CONTROLS_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_HIL_CONTROLS_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_91_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_91_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_HIL_CONTROLS_CRC: u32 = 63;
pub const MAVLINK_MSG_ID_91_CRC: u32 = 63;
pub const MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW: u32 = 92;
pub const MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_MIN_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_92_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_92_MIN_LEN: u32 = 33;
pub const MAVLINK_MSG_ID_HIL_RC_INPUTS_RAW_CRC: u32 = 54;
pub const MAVLINK_MSG_ID_92_CRC: u32 = 54;
pub const MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS: u32 = 93;
pub const MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_LEN: u32 = 81;
pub const MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_MIN_LEN: u32 = 81;
pub const MAVLINK_MSG_ID_93_LEN: u32 = 81;
pub const MAVLINK_MSG_ID_93_MIN_LEN: u32 = 81;
pub const MAVLINK_MSG_ID_HIL_ACTUATOR_CONTROLS_CRC: u32 = 47;
pub const MAVLINK_MSG_ID_93_CRC: u32 = 47;
pub const MAVLINK_MSG_HIL_ACTUATOR_CONTROLS_FIELD_CONTROLS_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW: u32 = 100;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_LEN: u32 = 34;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_100_LEN: u32 = 34;
pub const MAVLINK_MSG_ID_100_MIN_LEN: u32 = 26;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_CRC: u32 = 175;
pub const MAVLINK_MSG_ID_100_CRC: u32 = 175;
pub const MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE: u32 = 101;
pub const MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_101_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_101_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_GLOBAL_VISION_POSITION_ESTIMATE_CRC: u32 = 102;
pub const MAVLINK_MSG_ID_101_CRC: u32 = 102;
pub const MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE: u32 = 102;
pub const MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_102_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_102_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VISION_POSITION_ESTIMATE_CRC: u32 = 158;
pub const MAVLINK_MSG_ID_102_CRC: u32 = 158;
pub const MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE: u32 = 103;
pub const MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_103_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_103_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_VISION_SPEED_ESTIMATE_CRC: u32 = 208;
pub const MAVLINK_MSG_ID_103_CRC: u32 = 208;
pub const MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE: u32 = 104;
pub const MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_104_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_104_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VICON_POSITION_ESTIMATE_CRC: u32 = 56;
pub const MAVLINK_MSG_ID_104_CRC: u32 = 56;
pub const MAVLINK_MSG_ID_HIGHRES_IMU: u32 = 105;
pub const MAVLINK_MSG_ID_HIGHRES_IMU_LEN: u32 = 62;
pub const MAVLINK_MSG_ID_HIGHRES_IMU_MIN_LEN: u32 = 62;
pub const MAVLINK_MSG_ID_105_LEN: u32 = 62;
pub const MAVLINK_MSG_ID_105_MIN_LEN: u32 = 62;
pub const MAVLINK_MSG_ID_HIGHRES_IMU_CRC: u32 = 93;
pub const MAVLINK_MSG_ID_105_CRC: u32 = 93;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_RAD: u32 = 106;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_MIN_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_106_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_106_MIN_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_CRC: u32 = 138;
pub const MAVLINK_MSG_ID_106_CRC: u32 = 138;
pub const MAVLINK_MSG_ID_HIL_SENSOR: u32 = 107;
pub const MAVLINK_MSG_ID_HIL_SENSOR_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_HIL_SENSOR_MIN_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_107_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_107_MIN_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_HIL_SENSOR_CRC: u32 = 108;
pub const MAVLINK_MSG_ID_107_CRC: u32 = 108;
pub const MAVLINK_MSG_ID_SIM_STATE: u32 = 108;
pub const MAVLINK_MSG_ID_SIM_STATE_LEN: u32 = 84;
pub const MAVLINK_MSG_ID_SIM_STATE_MIN_LEN: u32 = 84;
pub const MAVLINK_MSG_ID_108_LEN: u32 = 84;
pub const MAVLINK_MSG_ID_108_MIN_LEN: u32 = 84;
pub const MAVLINK_MSG_ID_SIM_STATE_CRC: u32 = 32;
pub const MAVLINK_MSG_ID_108_CRC: u32 = 32;
pub const MAVLINK_MSG_ID_RADIO_STATUS: u32 = 109;
pub const MAVLINK_MSG_ID_RADIO_STATUS_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_RADIO_STATUS_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_109_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_109_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_RADIO_STATUS_CRC: u32 = 185;
pub const MAVLINK_MSG_ID_109_CRC: u32 = 185;
pub const MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL: u32 = 110;
pub const MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_MIN_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_110_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_110_MIN_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_FILE_TRANSFER_PROTOCOL_CRC: u32 = 84;
pub const MAVLINK_MSG_ID_110_CRC: u32 = 84;
pub const MAVLINK_MSG_FILE_TRANSFER_PROTOCOL_FIELD_PAYLOAD_LEN: u32 = 251;
pub const MAVLINK_MSG_ID_TIMESYNC: u32 = 111;
pub const MAVLINK_MSG_ID_TIMESYNC_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_TIMESYNC_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_111_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_111_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_TIMESYNC_CRC: u32 = 34;
pub const MAVLINK_MSG_ID_111_CRC: u32 = 34;
pub const MAVLINK_MSG_ID_CAMERA_TRIGGER: u32 = 112;
pub const MAVLINK_MSG_ID_CAMERA_TRIGGER_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_CAMERA_TRIGGER_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_112_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_112_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_CAMERA_TRIGGER_CRC: u32 = 174;
pub const MAVLINK_MSG_ID_112_CRC: u32 = 174;
pub const MAVLINK_MSG_ID_HIL_GPS: u32 = 113;
pub const MAVLINK_MSG_ID_HIL_GPS_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_HIL_GPS_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_113_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_113_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_HIL_GPS_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_113_CRC: u32 = 124;
pub const MAVLINK_MSG_ID_HIL_OPTICAL_FLOW: u32 = 114;
pub const MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_MIN_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_114_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_114_MIN_LEN: u32 = 44;
pub const MAVLINK_MSG_ID_HIL_OPTICAL_FLOW_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_114_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_HIL_STATE_QUATERNION: u32 = 115;
pub const MAVLINK_MSG_ID_HIL_STATE_QUATERNION_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_HIL_STATE_QUATERNION_MIN_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_115_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_115_MIN_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_HIL_STATE_QUATERNION_CRC: u32 = 4;
pub const MAVLINK_MSG_ID_115_CRC: u32 = 4;
pub const MAVLINK_MSG_HIL_STATE_QUATERNION_FIELD_ATTITUDE_QUATERNION_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_SCALED_IMU2: u32 = 116;
pub const MAVLINK_MSG_ID_SCALED_IMU2_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU2_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_116_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_116_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU2_CRC: u32 = 76;
pub const MAVLINK_MSG_ID_116_CRC: u32 = 76;
pub const MAVLINK_MSG_ID_LOG_REQUEST_LIST: u32 = 117;
pub const MAVLINK_MSG_ID_LOG_REQUEST_LIST_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_LOG_REQUEST_LIST_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_117_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_117_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_LOG_REQUEST_LIST_CRC: u32 = 128;
pub const MAVLINK_MSG_ID_117_CRC: u32 = 128;
pub const MAVLINK_MSG_ID_LOG_ENTRY: u32 = 118;
pub const MAVLINK_MSG_ID_LOG_ENTRY_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_LOG_ENTRY_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_118_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_118_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_LOG_ENTRY_CRC: u32 = 56;
pub const MAVLINK_MSG_ID_118_CRC: u32 = 56;
pub const MAVLINK_MSG_ID_LOG_REQUEST_DATA: u32 = 119;
pub const MAVLINK_MSG_ID_LOG_REQUEST_DATA_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_LOG_REQUEST_DATA_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_119_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_119_MIN_LEN: u32 = 12;
pub const MAVLINK_MSG_ID_LOG_REQUEST_DATA_CRC: u32 = 116;
pub const MAVLINK_MSG_ID_119_CRC: u32 = 116;
pub const MAVLINK_MSG_ID_LOG_DATA: u32 = 120;
pub const MAVLINK_MSG_ID_LOG_DATA_LEN: u32 = 97;
pub const MAVLINK_MSG_ID_LOG_DATA_MIN_LEN: u32 = 97;
pub const MAVLINK_MSG_ID_120_LEN: u32 = 97;
pub const MAVLINK_MSG_ID_120_MIN_LEN: u32 = 97;
pub const MAVLINK_MSG_ID_LOG_DATA_CRC: u32 = 134;
pub const MAVLINK_MSG_ID_120_CRC: u32 = 134;
pub const MAVLINK_MSG_LOG_DATA_FIELD_DATA_LEN: u32 = 90;
pub const MAVLINK_MSG_ID_LOG_ERASE: u32 = 121;
pub const MAVLINK_MSG_ID_LOG_ERASE_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_LOG_ERASE_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_121_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_121_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_LOG_ERASE_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_121_CRC: u32 = 237;
pub const MAVLINK_MSG_ID_LOG_REQUEST_END: u32 = 122;
pub const MAVLINK_MSG_ID_LOG_REQUEST_END_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_LOG_REQUEST_END_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_122_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_122_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_LOG_REQUEST_END_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_122_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_GPS_INJECT_DATA: u32 = 123;
pub const MAVLINK_MSG_ID_GPS_INJECT_DATA_LEN: u32 = 113;
pub const MAVLINK_MSG_ID_GPS_INJECT_DATA_MIN_LEN: u32 = 113;
pub const MAVLINK_MSG_ID_123_LEN: u32 = 113;
pub const MAVLINK_MSG_ID_123_MIN_LEN: u32 = 113;
pub const MAVLINK_MSG_ID_GPS_INJECT_DATA_CRC: u32 = 250;
pub const MAVLINK_MSG_ID_123_CRC: u32 = 250;
pub const MAVLINK_MSG_GPS_INJECT_DATA_FIELD_DATA_LEN: u32 = 110;
pub const MAVLINK_MSG_ID_GPS2_RAW: u32 = 124;
pub const MAVLINK_MSG_ID_GPS2_RAW_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS2_RAW_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_124_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_124_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS2_RAW_CRC: u32 = 87;
pub const MAVLINK_MSG_ID_124_CRC: u32 = 87;
pub const MAVLINK_MSG_ID_POWER_STATUS: u32 = 125;
pub const MAVLINK_MSG_ID_POWER_STATUS_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_POWER_STATUS_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_125_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_125_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_POWER_STATUS_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_125_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_SERIAL_CONTROL: u32 = 126;
pub const MAVLINK_MSG_ID_SERIAL_CONTROL_LEN: u32 = 79;
pub const MAVLINK_MSG_ID_SERIAL_CONTROL_MIN_LEN: u32 = 79;
pub const MAVLINK_MSG_ID_126_LEN: u32 = 79;
pub const MAVLINK_MSG_ID_126_MIN_LEN: u32 = 79;
pub const MAVLINK_MSG_ID_SERIAL_CONTROL_CRC: u32 = 220;
pub const MAVLINK_MSG_ID_126_CRC: u32 = 220;
pub const MAVLINK_MSG_SERIAL_CONTROL_FIELD_DATA_LEN: u32 = 70;
pub const MAVLINK_MSG_ID_GPS_RTK: u32 = 127;
pub const MAVLINK_MSG_ID_GPS_RTK_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS_RTK_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_127_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_127_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS_RTK_CRC: u32 = 25;
pub const MAVLINK_MSG_ID_127_CRC: u32 = 25;
pub const MAVLINK_MSG_ID_GPS2_RTK: u32 = 128;
pub const MAVLINK_MSG_ID_GPS2_RTK_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS2_RTK_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_128_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_128_MIN_LEN: u32 = 35;
pub const MAVLINK_MSG_ID_GPS2_RTK_CRC: u32 = 226;
pub const MAVLINK_MSG_ID_128_CRC: u32 = 226;
pub const MAVLINK_MSG_ID_SCALED_IMU3: u32 = 129;
pub const MAVLINK_MSG_ID_SCALED_IMU3_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU3_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_129_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_129_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_SCALED_IMU3_CRC: u32 = 46;
pub const MAVLINK_MSG_ID_129_CRC: u32 = 46;
pub const MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE: u32 = 130;
pub const MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_MIN_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_130_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_130_MIN_LEN: u32 = 13;
pub const MAVLINK_MSG_ID_DATA_TRANSMISSION_HANDSHAKE_CRC: u32 = 29;
pub const MAVLINK_MSG_ID_130_CRC: u32 = 29;
pub const MAVLINK_MSG_ID_ENCAPSULATED_DATA: u32 = 131;
pub const MAVLINK_MSG_ID_ENCAPSULATED_DATA_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_ENCAPSULATED_DATA_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_131_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_131_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_ENCAPSULATED_DATA_CRC: u32 = 223;
pub const MAVLINK_MSG_ID_131_CRC: u32 = 223;
pub const MAVLINK_MSG_ENCAPSULATED_DATA_FIELD_DATA_LEN: u32 = 253;
pub const MAVLINK_MSG_ID_DISTANCE_SENSOR: u32 = 132;
pub const MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_DISTANCE_SENSOR_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_132_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_132_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_DISTANCE_SENSOR_CRC: u32 = 85;
pub const MAVLINK_MSG_ID_132_CRC: u32 = 85;
pub const MAVLINK_MSG_ID_TERRAIN_REQUEST: u32 = 133;
pub const MAVLINK_MSG_ID_TERRAIN_REQUEST_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_TERRAIN_REQUEST_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_133_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_133_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_TERRAIN_REQUEST_CRC: u32 = 6;
pub const MAVLINK_MSG_ID_133_CRC: u32 = 6;
pub const MAVLINK_MSG_ID_TERRAIN_DATA: u32 = 134;
pub const MAVLINK_MSG_ID_TERRAIN_DATA_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_TERRAIN_DATA_MIN_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_134_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_134_MIN_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_TERRAIN_DATA_CRC: u32 = 229;
pub const MAVLINK_MSG_ID_134_CRC: u32 = 229;
pub const MAVLINK_MSG_TERRAIN_DATA_FIELD_DATA_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_TERRAIN_CHECK: u32 = 135;
pub const MAVLINK_MSG_ID_TERRAIN_CHECK_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_TERRAIN_CHECK_MIN_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_135_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_135_MIN_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_TERRAIN_CHECK_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_135_CRC: u32 = 203;
pub const MAVLINK_MSG_ID_TERRAIN_REPORT: u32 = 136;
pub const MAVLINK_MSG_ID_TERRAIN_REPORT_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_TERRAIN_REPORT_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_136_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_136_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_TERRAIN_REPORT_CRC: u32 = 1;
pub const MAVLINK_MSG_ID_136_CRC: u32 = 1;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE2: u32 = 137;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE2_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE2_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_137_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_137_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE2_CRC: u32 = 195;
pub const MAVLINK_MSG_ID_137_CRC: u32 = 195;
pub const MAVLINK_MSG_ID_ATT_POS_MOCAP: u32 = 138;
pub const MAVLINK_MSG_ID_ATT_POS_MOCAP_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_ATT_POS_MOCAP_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_138_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_138_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_ATT_POS_MOCAP_CRC: u32 = 109;
pub const MAVLINK_MSG_ID_138_CRC: u32 = 109;
pub const MAVLINK_MSG_ATT_POS_MOCAP_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET: u32 = 139;
pub const MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_MIN_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_139_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_139_MIN_LEN: u32 = 43;
pub const MAVLINK_MSG_ID_SET_ACTUATOR_CONTROL_TARGET_CRC: u32 = 168;
pub const MAVLINK_MSG_ID_139_CRC: u32 = 168;
pub const MAVLINK_MSG_SET_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET: u32 = 140;
pub const MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_LEN: u32 = 41;
pub const MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_MIN_LEN: u32 = 41;
pub const MAVLINK_MSG_ID_140_LEN: u32 = 41;
pub const MAVLINK_MSG_ID_140_MIN_LEN: u32 = 41;
pub const MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_CRC: u32 = 181;
pub const MAVLINK_MSG_ID_140_CRC: u32 = 181;
pub const MAVLINK_MSG_ACTUATOR_CONTROL_TARGET_FIELD_CONTROLS_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_ALTITUDE: u32 = 141;
pub const MAVLINK_MSG_ID_ALTITUDE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_ALTITUDE_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_141_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_141_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_ALTITUDE_CRC: u32 = 47;
pub const MAVLINK_MSG_ID_141_CRC: u32 = 47;
pub const MAVLINK_MSG_ID_RESOURCE_REQUEST: u32 = 142;
pub const MAVLINK_MSG_ID_RESOURCE_REQUEST_LEN: u32 = 243;
pub const MAVLINK_MSG_ID_RESOURCE_REQUEST_MIN_LEN: u32 = 243;
pub const MAVLINK_MSG_ID_142_LEN: u32 = 243;
pub const MAVLINK_MSG_ID_142_MIN_LEN: u32 = 243;
pub const MAVLINK_MSG_ID_RESOURCE_REQUEST_CRC: u32 = 72;
pub const MAVLINK_MSG_ID_142_CRC: u32 = 72;
pub const MAVLINK_MSG_RESOURCE_REQUEST_FIELD_URI_LEN: u32 = 120;
pub const MAVLINK_MSG_RESOURCE_REQUEST_FIELD_STORAGE_LEN: u32 = 120;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE3: u32 = 143;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE3_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE3_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_143_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_143_MIN_LEN: u32 = 14;
pub const MAVLINK_MSG_ID_SCALED_PRESSURE3_CRC: u32 = 131;
pub const MAVLINK_MSG_ID_143_CRC: u32 = 131;
pub const MAVLINK_MSG_ID_FOLLOW_TARGET: u32 = 144;
pub const MAVLINK_MSG_ID_FOLLOW_TARGET_LEN: u32 = 93;
pub const MAVLINK_MSG_ID_FOLLOW_TARGET_MIN_LEN: u32 = 93;
pub const MAVLINK_MSG_ID_144_LEN: u32 = 93;
pub const MAVLINK_MSG_ID_144_MIN_LEN: u32 = 93;
pub const MAVLINK_MSG_ID_FOLLOW_TARGET_CRC: u32 = 127;
pub const MAVLINK_MSG_ID_144_CRC: u32 = 127;
pub const MAVLINK_MSG_FOLLOW_TARGET_FIELD_VEL_LEN: u32 = 3;
pub const MAVLINK_MSG_FOLLOW_TARGET_FIELD_ACC_LEN: u32 = 3;
pub const MAVLINK_MSG_FOLLOW_TARGET_FIELD_ATTITUDE_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_FOLLOW_TARGET_FIELD_RATES_LEN: u32 = 3;
pub const MAVLINK_MSG_FOLLOW_TARGET_FIELD_POSITION_COV_LEN: u32 = 3;
pub const MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE: u32 = 146;
pub const MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_LEN: u32 = 100;
pub const MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_MIN_LEN: u32 = 100;
pub const MAVLINK_MSG_ID_146_LEN: u32 = 100;
pub const MAVLINK_MSG_ID_146_MIN_LEN: u32 = 100;
pub const MAVLINK_MSG_ID_CONTROL_SYSTEM_STATE_CRC: u32 = 103;
pub const MAVLINK_MSG_ID_146_CRC: u32 = 103;
pub const MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_VEL_VARIANCE_LEN: u32 = 3;
pub const MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_POS_VARIANCE_LEN: u32 = 3;
pub const MAVLINK_MSG_CONTROL_SYSTEM_STATE_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_BATTERY_STATUS: u32 = 147;
pub const MAVLINK_MSG_ID_BATTERY_STATUS_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_BATTERY_STATUS_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_147_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_147_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_BATTERY_STATUS_CRC: u32 = 154;
pub const MAVLINK_MSG_ID_147_CRC: u32 = 154;
pub const MAVLINK_MSG_BATTERY_STATUS_FIELD_VOLTAGES_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_AUTOPILOT_VERSION: u32 = 148;
pub const MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN: u32 = 78;
pub const MAVLINK_MSG_ID_AUTOPILOT_VERSION_MIN_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_148_LEN: u32 = 78;
pub const MAVLINK_MSG_ID_148_MIN_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_AUTOPILOT_VERSION_CRC: u32 = 178;
pub const MAVLINK_MSG_ID_148_CRC: u32 = 178;
pub const MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_FLIGHT_CUSTOM_VERSION_LEN: u32 = 8;
pub const MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_MIDDLEWARE_CUSTOM_VERSION_LEN: u32 = 8;
pub const MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_OS_CUSTOM_VERSION_LEN: u32 = 8;
pub const MAVLINK_MSG_AUTOPILOT_VERSION_FIELD_UID2_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_LANDING_TARGET: u32 = 149;
pub const MAVLINK_MSG_ID_LANDING_TARGET_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_LANDING_TARGET_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_149_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_149_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_LANDING_TARGET_CRC: u32 = 200;
pub const MAVLINK_MSG_ID_149_CRC: u32 = 200;
pub const MAVLINK_MSG_LANDING_TARGET_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_ESTIMATOR_STATUS: u32 = 230;
pub const MAVLINK_MSG_ID_ESTIMATOR_STATUS_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_ESTIMATOR_STATUS_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_230_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_230_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_ESTIMATOR_STATUS_CRC: u32 = 163;
pub const MAVLINK_MSG_ID_230_CRC: u32 = 163;
pub const MAVLINK_MSG_ID_WIND_COV: u32 = 231;
pub const MAVLINK_MSG_ID_WIND_COV_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_WIND_COV_MIN_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_231_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_231_MIN_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_WIND_COV_CRC: u32 = 105;
pub const MAVLINK_MSG_ID_231_CRC: u32 = 105;
pub const MAVLINK_MSG_ID_GPS_INPUT: u32 = 232;
pub const MAVLINK_MSG_ID_GPS_INPUT_LEN: u32 = 63;
pub const MAVLINK_MSG_ID_GPS_INPUT_MIN_LEN: u32 = 63;
pub const MAVLINK_MSG_ID_232_LEN: u32 = 63;
pub const MAVLINK_MSG_ID_232_MIN_LEN: u32 = 63;
pub const MAVLINK_MSG_ID_GPS_INPUT_CRC: u32 = 151;
pub const MAVLINK_MSG_ID_232_CRC: u32 = 151;
pub const MAVLINK_MSG_ID_GPS_RTCM_DATA: u32 = 233;
pub const MAVLINK_MSG_ID_GPS_RTCM_DATA_LEN: u32 = 182;
pub const MAVLINK_MSG_ID_GPS_RTCM_DATA_MIN_LEN: u32 = 182;
pub const MAVLINK_MSG_ID_233_LEN: u32 = 182;
pub const MAVLINK_MSG_ID_233_MIN_LEN: u32 = 182;
pub const MAVLINK_MSG_ID_GPS_RTCM_DATA_CRC: u32 = 35;
pub const MAVLINK_MSG_ID_233_CRC: u32 = 35;
pub const MAVLINK_MSG_GPS_RTCM_DATA_FIELD_DATA_LEN: u32 = 180;
pub const MAVLINK_MSG_ID_HIGH_LATENCY: u32 = 234;
pub const MAVLINK_MSG_ID_HIGH_LATENCY_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_HIGH_LATENCY_MIN_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_234_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_234_MIN_LEN: u32 = 40;
pub const MAVLINK_MSG_ID_HIGH_LATENCY_CRC: u32 = 150;
pub const MAVLINK_MSG_ID_234_CRC: u32 = 150;
pub const MAVLINK_MSG_ID_VIBRATION: u32 = 241;
pub const MAVLINK_MSG_ID_VIBRATION_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VIBRATION_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_241_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_241_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_VIBRATION_CRC: u32 = 90;
pub const MAVLINK_MSG_ID_241_CRC: u32 = 90;
pub const MAVLINK_MSG_ID_HOME_POSITION: u32 = 242;
pub const MAVLINK_MSG_ID_HOME_POSITION_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_HOME_POSITION_MIN_LEN: u32 = 52;
pub const MAVLINK_MSG_ID_242_LEN: u32 = 60;
pub const MAVLINK_MSG_ID_242_MIN_LEN: u32 = 52;
pub const MAVLINK_MSG_ID_HOME_POSITION_CRC: u32 = 104;
pub const MAVLINK_MSG_ID_242_CRC: u32 = 104;
pub const MAVLINK_MSG_HOME_POSITION_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_SET_HOME_POSITION: u32 = 243;
pub const MAVLINK_MSG_ID_SET_HOME_POSITION_LEN: u32 = 61;
pub const MAVLINK_MSG_ID_SET_HOME_POSITION_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_243_LEN: u32 = 61;
pub const MAVLINK_MSG_ID_243_MIN_LEN: u32 = 53;
pub const MAVLINK_MSG_ID_SET_HOME_POSITION_CRC: u32 = 85;
pub const MAVLINK_MSG_ID_243_CRC: u32 = 85;
pub const MAVLINK_MSG_SET_HOME_POSITION_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_MESSAGE_INTERVAL: u32 = 244;
pub const MAVLINK_MSG_ID_MESSAGE_INTERVAL_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_MESSAGE_INTERVAL_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_244_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_244_MIN_LEN: u32 = 6;
pub const MAVLINK_MSG_ID_MESSAGE_INTERVAL_CRC: u32 = 95;
pub const MAVLINK_MSG_ID_244_CRC: u32 = 95;
pub const MAVLINK_MSG_ID_EXTENDED_SYS_STATE: u32 = 245;
pub const MAVLINK_MSG_ID_EXTENDED_SYS_STATE_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_EXTENDED_SYS_STATE_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_245_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_245_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_EXTENDED_SYS_STATE_CRC: u32 = 130;
pub const MAVLINK_MSG_ID_245_CRC: u32 = 130;
pub const MAVLINK_MSG_ID_ADSB_VEHICLE: u32 = 246;
pub const MAVLINK_MSG_ID_ADSB_VEHICLE_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_ADSB_VEHICLE_MIN_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_246_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_246_MIN_LEN: u32 = 38;
pub const MAVLINK_MSG_ID_ADSB_VEHICLE_CRC: u32 = 184;
pub const MAVLINK_MSG_ID_246_CRC: u32 = 184;
pub const MAVLINK_MSG_ADSB_VEHICLE_FIELD_CALLSIGN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_COLLISION: u32 = 247;
pub const MAVLINK_MSG_ID_COLLISION_LEN: u32 = 19;
pub const MAVLINK_MSG_ID_COLLISION_MIN_LEN: u32 = 19;
pub const MAVLINK_MSG_ID_247_LEN: u32 = 19;
pub const MAVLINK_MSG_ID_247_MIN_LEN: u32 = 19;
pub const MAVLINK_MSG_ID_COLLISION_CRC: u32 = 81;
pub const MAVLINK_MSG_ID_247_CRC: u32 = 81;
pub const MAVLINK_MSG_ID_V2_EXTENSION: u32 = 248;
pub const MAVLINK_MSG_ID_V2_EXTENSION_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_V2_EXTENSION_MIN_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_248_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_248_MIN_LEN: u32 = 254;
pub const MAVLINK_MSG_ID_V2_EXTENSION_CRC: u32 = 8;
pub const MAVLINK_MSG_ID_248_CRC: u32 = 8;
pub const MAVLINK_MSG_V2_EXTENSION_FIELD_PAYLOAD_LEN: u32 = 249;
pub const MAVLINK_MSG_ID_MEMORY_VECT: u32 = 249;
pub const MAVLINK_MSG_ID_MEMORY_VECT_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_MEMORY_VECT_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_249_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_249_MIN_LEN: u32 = 36;
pub const MAVLINK_MSG_ID_MEMORY_VECT_CRC: u32 = 204;
pub const MAVLINK_MSG_ID_249_CRC: u32 = 204;
pub const MAVLINK_MSG_MEMORY_VECT_FIELD_VALUE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_DEBUG_VECT: u32 = 250;
pub const MAVLINK_MSG_ID_DEBUG_VECT_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_DEBUG_VECT_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_250_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_250_MIN_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_DEBUG_VECT_CRC: u32 = 49;
pub const MAVLINK_MSG_ID_250_CRC: u32 = 49;
pub const MAVLINK_MSG_DEBUG_VECT_FIELD_NAME_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_NAMED_VALUE_FLOAT: u32 = 251;
pub const MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_251_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_251_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC: u32 = 170;
pub const MAVLINK_MSG_ID_251_CRC: u32 = 170;
pub const MAVLINK_MSG_NAMED_VALUE_FLOAT_FIELD_NAME_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_NAMED_VALUE_INT: u32 = 252;
pub const MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_NAMED_VALUE_INT_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_252_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_252_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC: u32 = 44;
pub const MAVLINK_MSG_ID_252_CRC: u32 = 44;
pub const MAVLINK_MSG_NAMED_VALUE_INT_FIELD_NAME_LEN: u32 = 10;
pub const MAVLINK_MSG_ID_STATUSTEXT: u32 = 253;
pub const MAVLINK_MSG_ID_STATUSTEXT_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_STATUSTEXT_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_253_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_253_MIN_LEN: u32 = 51;
pub const MAVLINK_MSG_ID_STATUSTEXT_CRC: u32 = 83;
pub const MAVLINK_MSG_ID_253_CRC: u32 = 83;
pub const MAVLINK_MSG_STATUSTEXT_FIELD_TEXT_LEN: u32 = 50;
pub const MAVLINK_MSG_ID_DEBUG: u32 = 254;
pub const MAVLINK_MSG_ID_DEBUG_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_DEBUG_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_254_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_254_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_DEBUG_CRC: u32 = 46;
pub const MAVLINK_MSG_ID_254_CRC: u32 = 46;
pub const MAVLINK_MSG_ID_SETUP_SIGNING: u32 = 256;
pub const MAVLINK_MSG_ID_SETUP_SIGNING_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_SETUP_SIGNING_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_256_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_256_MIN_LEN: u32 = 42;
pub const MAVLINK_MSG_ID_SETUP_SIGNING_CRC: u32 = 71;
pub const MAVLINK_MSG_ID_256_CRC: u32 = 71;
pub const MAVLINK_MSG_SETUP_SIGNING_FIELD_SECRET_KEY_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_BUTTON_CHANGE: u32 = 257;
pub const MAVLINK_MSG_ID_BUTTON_CHANGE_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_BUTTON_CHANGE_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_257_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_257_MIN_LEN: u32 = 9;
pub const MAVLINK_MSG_ID_BUTTON_CHANGE_CRC: u32 = 131;
pub const MAVLINK_MSG_ID_257_CRC: u32 = 131;
pub const MAVLINK_MSG_ID_PLAY_TUNE: u32 = 258;
pub const MAVLINK_MSG_ID_PLAY_TUNE_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_PLAY_TUNE_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_258_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_258_MIN_LEN: u32 = 32;
pub const MAVLINK_MSG_ID_PLAY_TUNE_CRC: u32 = 187;
pub const MAVLINK_MSG_ID_258_CRC: u32 = 187;
pub const MAVLINK_MSG_PLAY_TUNE_FIELD_TUNE_LEN: u32 = 30;
pub const MAVLINK_MSG_ID_CAMERA_INFORMATION: u32 = 259;
pub const MAVLINK_MSG_ID_CAMERA_INFORMATION_LEN: u32 = 235;
pub const MAVLINK_MSG_ID_CAMERA_INFORMATION_MIN_LEN: u32 = 235;
pub const MAVLINK_MSG_ID_259_LEN: u32 = 235;
pub const MAVLINK_MSG_ID_259_MIN_LEN: u32 = 235;
pub const MAVLINK_MSG_ID_CAMERA_INFORMATION_CRC: u32 = 92;
pub const MAVLINK_MSG_ID_259_CRC: u32 = 92;
pub const MAVLINK_MSG_CAMERA_INFORMATION_FIELD_VENDOR_NAME_LEN: u32 = 32;
pub const MAVLINK_MSG_CAMERA_INFORMATION_FIELD_MODEL_NAME_LEN: u32 = 32;
pub const MAVLINK_MSG_CAMERA_INFORMATION_FIELD_CAM_DEFINITION_URI_LEN: u32 = 140;
pub const MAVLINK_MSG_ID_CAMERA_SETTINGS: u32 = 260;
pub const MAVLINK_MSG_ID_CAMERA_SETTINGS_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_CAMERA_SETTINGS_MIN_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_260_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_260_MIN_LEN: u32 = 5;
pub const MAVLINK_MSG_ID_CAMERA_SETTINGS_CRC: u32 = 146;
pub const MAVLINK_MSG_ID_260_CRC: u32 = 146;
pub const MAVLINK_MSG_ID_STORAGE_INFORMATION: u32 = 261;
pub const MAVLINK_MSG_ID_STORAGE_INFORMATION_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_STORAGE_INFORMATION_MIN_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_261_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_261_MIN_LEN: u32 = 27;
pub const MAVLINK_MSG_ID_STORAGE_INFORMATION_CRC: u32 = 179;
pub const MAVLINK_MSG_ID_261_CRC: u32 = 179;
pub const MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS: u32 = 262;
pub const MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_262_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_262_MIN_LEN: u32 = 18;
pub const MAVLINK_MSG_ID_CAMERA_CAPTURE_STATUS_CRC: u32 = 12;
pub const MAVLINK_MSG_ID_262_CRC: u32 = 12;
pub const MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED: u32 = 263;
pub const MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_263_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_263_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED_CRC: u32 = 133;
pub const MAVLINK_MSG_ID_263_CRC: u32 = 133;
pub const MAVLINK_MSG_CAMERA_IMAGE_CAPTURED_FIELD_Q_LEN: u32 = 4;
pub const MAVLINK_MSG_CAMERA_IMAGE_CAPTURED_FIELD_FILE_URL_LEN: u32 = 205;
pub const MAVLINK_MSG_ID_FLIGHT_INFORMATION: u32 = 264;
pub const MAVLINK_MSG_ID_FLIGHT_INFORMATION_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_FLIGHT_INFORMATION_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_264_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_264_MIN_LEN: u32 = 28;
pub const MAVLINK_MSG_ID_FLIGHT_INFORMATION_CRC: u32 = 49;
pub const MAVLINK_MSG_ID_264_CRC: u32 = 49;
pub const MAVLINK_MSG_ID_MOUNT_ORIENTATION: u32 = 265;
pub const MAVLINK_MSG_ID_MOUNT_ORIENTATION_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_MOUNT_ORIENTATION_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_265_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_265_MIN_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_MOUNT_ORIENTATION_CRC: u32 = 26;
pub const MAVLINK_MSG_ID_265_CRC: u32 = 26;
pub const MAVLINK_MSG_ID_LOGGING_DATA: u32 = 266;
pub const MAVLINK_MSG_ID_LOGGING_DATA_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_LOGGING_DATA_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_266_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_266_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_LOGGING_DATA_CRC: u32 = 193;
pub const MAVLINK_MSG_ID_266_CRC: u32 = 193;
pub const MAVLINK_MSG_LOGGING_DATA_FIELD_DATA_LEN: u32 = 249;
pub const MAVLINK_MSG_ID_LOGGING_DATA_ACKED: u32 = 267;
pub const MAVLINK_MSG_ID_LOGGING_DATA_ACKED_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_LOGGING_DATA_ACKED_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_267_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_267_MIN_LEN: u32 = 255;
pub const MAVLINK_MSG_ID_LOGGING_DATA_ACKED_CRC: u32 = 35;
pub const MAVLINK_MSG_ID_267_CRC: u32 = 35;
pub const MAVLINK_MSG_LOGGING_DATA_ACKED_FIELD_DATA_LEN: u32 = 249;
pub const MAVLINK_MSG_ID_LOGGING_ACK: u32 = 268;
pub const MAVLINK_MSG_ID_LOGGING_ACK_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_LOGGING_ACK_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_268_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_268_MIN_LEN: u32 = 4;
pub const MAVLINK_MSG_ID_LOGGING_ACK_CRC: u32 = 14;
pub const MAVLINK_MSG_ID_268_CRC: u32 = 14;
pub const MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION: u32 = 269;
pub const MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION_LEN: u32 = 246;
pub const MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION_MIN_LEN: u32 = 246;
pub const MAVLINK_MSG_ID_269_LEN: u32 = 246;
pub const MAVLINK_MSG_ID_269_MIN_LEN: u32 = 246;
pub const MAVLINK_MSG_ID_VIDEO_STREAM_INFORMATION_CRC: u32 = 58;
pub const MAVLINK_MSG_ID_269_CRC: u32 = 58;
pub const MAVLINK_MSG_VIDEO_STREAM_INFORMATION_FIELD_URI_LEN: u32 = 230;
pub const MAVLINK_MSG_ID_SET_VIDEO_STREAM_SETTINGS: u32 = 270;
pub const MAVLINK_MSG_ID_SET_VIDEO_STREAM_SETTINGS_LEN: u32 = 247;
pub const MAVLINK_MSG_ID_SET_VIDEO_STREAM_SETTINGS_MIN_LEN: u32 = 247;
pub const MAVLINK_MSG_ID_270_LEN: u32 = 247;
pub const MAVLINK_MSG_ID_270_MIN_LEN: u32 = 247;
pub const MAVLINK_MSG_ID_SET_VIDEO_STREAM_SETTINGS_CRC: u32 = 232;
pub const MAVLINK_MSG_ID_270_CRC: u32 = 232;
pub const MAVLINK_MSG_SET_VIDEO_STREAM_SETTINGS_FIELD_URI_LEN: u32 = 230;
pub const MAVLINK_MSG_ID_WIFI_CONFIG_AP: u32 = 299;
pub const MAVLINK_MSG_ID_WIFI_CONFIG_AP_LEN: u32 = 96;
pub const MAVLINK_MSG_ID_WIFI_CONFIG_AP_MIN_LEN: u32 = 96;
pub const MAVLINK_MSG_ID_299_LEN: u32 = 96;
pub const MAVLINK_MSG_ID_299_MIN_LEN: u32 = 96;
pub const MAVLINK_MSG_ID_WIFI_CONFIG_AP_CRC: u32 = 19;
pub const MAVLINK_MSG_ID_299_CRC: u32 = 19;
pub const MAVLINK_MSG_WIFI_CONFIG_AP_FIELD_SSID_LEN: u32 = 32;
pub const MAVLINK_MSG_WIFI_CONFIG_AP_FIELD_PASSWORD_LEN: u32 = 64;
pub const MAVLINK_MSG_ID_PROTOCOL_VERSION: u32 = 300;
pub const MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_PROTOCOL_VERSION_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_300_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_300_MIN_LEN: u32 = 22;
pub const MAVLINK_MSG_ID_PROTOCOL_VERSION_CRC: u32 = 217;
pub const MAVLINK_MSG_ID_300_CRC: u32 = 217;
pub const MAVLINK_MSG_PROTOCOL_VERSION_FIELD_SPEC_VERSION_HASH_LEN: u32 = 8;
pub const MAVLINK_MSG_PROTOCOL_VERSION_FIELD_LIBRARY_VERSION_HASH_LEN: u32 = 8;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_STATUS: u32 = 310;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_STATUS_LEN: u32 = 17;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_STATUS_MIN_LEN: u32 = 17;
pub const MAVLINK_MSG_ID_310_LEN: u32 = 17;
pub const MAVLINK_MSG_ID_310_MIN_LEN: u32 = 17;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_STATUS_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_310_CRC: u32 = 28;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_INFO: u32 = 311;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_INFO_LEN: u32 = 116;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_INFO_MIN_LEN: u32 = 116;
pub const MAVLINK_MSG_ID_311_LEN: u32 = 116;
pub const MAVLINK_MSG_ID_311_MIN_LEN: u32 = 116;
pub const MAVLINK_MSG_ID_UAVCAN_NODE_INFO_CRC: u32 = 95;
pub const MAVLINK_MSG_ID_311_CRC: u32 = 95;
pub const MAVLINK_MSG_UAVCAN_NODE_INFO_FIELD_NAME_LEN: u32 = 80;
pub const MAVLINK_MSG_UAVCAN_NODE_INFO_FIELD_HW_UNIQUE_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ: u32 = 320;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_320_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_320_MIN_LEN: u32 = 20;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_READ_CRC: u32 = 243;
pub const MAVLINK_MSG_ID_320_CRC: u32 = 243;
pub const MAVLINK_MSG_PARAM_EXT_REQUEST_READ_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST: u32 = 321;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_321_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_321_MIN_LEN: u32 = 2;
pub const MAVLINK_MSG_ID_PARAM_EXT_REQUEST_LIST_CRC: u32 = 88;
pub const MAVLINK_MSG_ID_321_CRC: u32 = 88;
pub const MAVLINK_MSG_ID_PARAM_EXT_VALUE: u32 = 322;
pub const MAVLINK_MSG_ID_PARAM_EXT_VALUE_LEN: u32 = 149;
pub const MAVLINK_MSG_ID_PARAM_EXT_VALUE_MIN_LEN: u32 = 149;
pub const MAVLINK_MSG_ID_322_LEN: u32 = 149;
pub const MAVLINK_MSG_ID_322_MIN_LEN: u32 = 149;
pub const MAVLINK_MSG_ID_PARAM_EXT_VALUE_CRC: u32 = 243;
pub const MAVLINK_MSG_ID_322_CRC: u32 = 243;
pub const MAVLINK_MSG_PARAM_EXT_VALUE_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_PARAM_EXT_VALUE_FIELD_PARAM_VALUE_LEN: u32 = 128;
pub const MAVLINK_MSG_ID_PARAM_EXT_SET: u32 = 323;
pub const MAVLINK_MSG_ID_PARAM_EXT_SET_LEN: u32 = 147;
pub const MAVLINK_MSG_ID_PARAM_EXT_SET_MIN_LEN: u32 = 147;
pub const MAVLINK_MSG_ID_323_LEN: u32 = 147;
pub const MAVLINK_MSG_ID_323_MIN_LEN: u32 = 147;
pub const MAVLINK_MSG_ID_PARAM_EXT_SET_CRC: u32 = 78;
pub const MAVLINK_MSG_ID_323_CRC: u32 = 78;
pub const MAVLINK_MSG_PARAM_EXT_SET_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_PARAM_EXT_SET_FIELD_PARAM_VALUE_LEN: u32 = 128;
pub const MAVLINK_MSG_ID_PARAM_EXT_ACK: u32 = 324;
pub const MAVLINK_MSG_ID_PARAM_EXT_ACK_LEN: u32 = 146;
pub const MAVLINK_MSG_ID_PARAM_EXT_ACK_MIN_LEN: u32 = 146;
pub const MAVLINK_MSG_ID_324_LEN: u32 = 146;
pub const MAVLINK_MSG_ID_324_MIN_LEN: u32 = 146;
pub const MAVLINK_MSG_ID_PARAM_EXT_ACK_CRC: u32 = 132;
pub const MAVLINK_MSG_ID_324_CRC: u32 = 132;
pub const MAVLINK_MSG_PARAM_EXT_ACK_FIELD_PARAM_ID_LEN: u32 = 16;
pub const MAVLINK_MSG_PARAM_EXT_ACK_FIELD_PARAM_VALUE_LEN: u32 = 128;
pub const MAVLINK_MSG_ID_OBSTACLE_DISTANCE: u32 = 330;
pub const MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN: u32 = 158;
pub const MAVLINK_MSG_ID_OBSTACLE_DISTANCE_MIN_LEN: u32 = 158;
pub const MAVLINK_MSG_ID_330_LEN: u32 = 158;
pub const MAVLINK_MSG_ID_330_MIN_LEN: u32 = 158;
pub const MAVLINK_MSG_ID_OBSTACLE_DISTANCE_CRC: u32 = 23;
pub const MAVLINK_MSG_ID_330_CRC: u32 = 23;
pub const MAVLINK_MSG_OBSTACLE_DISTANCE_FIELD_DISTANCES_LEN: u32 = 72;
pub const RC_MAV_DEFAULT_UDP_PORT: u32 = 14551;
pub const RC_MAV_DEFAULT_CONNECTION_TIMEOUT_US: u32 = 2000000;
pub const RC_MOTOR_DEFAULT_PWM_FREQ: u32 = 25000;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const TIME_UTC: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_SGI_CYCLE: u32 = 10;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const PTHREAD_CREATE_JOINABLE: u32 = 0;
pub const PTHREAD_CREATE_DETACHED: u32 = 1;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 2;
pub const PTHREAD_MUTEX_STALLED: u32 = 0;
pub const PTHREAD_MUTEX_ROBUST: u32 = 1;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 0;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 1;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 0;
pub const PTHREAD_SCOPE_PROCESS: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 0;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_CANCEL_ENABLE: u32 = 0;
pub const PTHREAD_CANCEL_DISABLE: u32 = 1;
pub const PTHREAD_CANCEL_MASKED: u32 = 2;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 1;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const RC_MPU_DEFAULT_I2C_ADDR: u32 = 104;
pub const RC_MPU_ALT_I2C_ADDR: u32 = 105;
pub const TB_PITCH_X: u32 = 0;
pub const TB_ROLL_Y: u32 = 1;
pub const TB_YAW_Z: u32 = 2;
pub const QUAT_W: u32 = 0;
pub const QUAT_X: u32 = 1;
pub const QUAT_Y: u32 = 2;
pub const QUAT_Z: u32 = 3;
pub const DEG_TO_RAD: f64 = 0.0174532925199;
pub const RAD_TO_DEG: f64 = 57.295779513;
pub const MS2_TO_G: f64 = 0.10197162129;
pub const G_TO_MS2: f64 = 9.80665;
pub const DSM_HEADER_PIN: u32 = 30;
pub const GPS_HEADER_PIN_3: u32 = 2;
pub const GPS_HEADER_PIN_4: u32 = 3;
pub const UART1_HEADER_PIN_3: u32 = 14;
pub const UART1_HEADER_PIN_4: u32 = 15;
pub const SPI_HEADER_PIN_3: u32 = 112;
pub const SPI_HEADER_PIN_4: u32 = 111;
pub const SPI_HEADER_PIN_5: u32 = 110;
pub const CAPE_SPI_PIN_6_SS1: u32 = 113;
pub const CAPE_SPI_PIN_6_SS2: u32 = 49;
pub const BLUE_SPI_PIN_6_SS1: u32 = 29;
pub const BLUE_SPI_PIN_6_SS2: u32 = 7;
pub const BLUE_GP0_PIN_3: u32 = 57;
pub const BLUE_GP0_PIN_4: u32 = 49;
pub const BLUE_GP0_PIN_5: u32 = 116;
pub const BLUE_GP0_PIN_6: u32 = 113;
pub const BLUE_GP1_PIN_3: u32 = 98;
pub const BLUE_GP1_PIN_4: u32 = 97;
pub const RC_SERVO_CH_MIN: u32 = 1;
pub const RC_SERVO_CH_MAX: u32 = 8;
pub const RC_SERVO_CH_ALL: u32 = 0;
pub const RC_ESC_DEFAULT_MIN_US: u32 = 1000;
pub const RC_ESC_DEFAULT_MAX_US: u32 = 2000;
pub const RC_ESC_DJI_MIN_US: u32 = 1120;
pub const RC_ESC_DJI_MAX_US: u32 = 1920;
pub const __BITS_PER_LONG: u32 = 32;
pub const __FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const SPI_MODE_0: u32 = 0;
pub const SPI_IOC_MAGIC: u8 = 107u8;
pub const RC_SPI_MAX_SPEED: u32 = 24000000;
pub const RC_SPI_MIN_SPEED: u32 = 1000;
pub const RC_SPI_BITS_PER_WORD: u32 = 8;
pub const RC_PID_DIR: &[u8; 10usize] = b"/run/shm/\0";
pub const RC_PID_FILE: &[u8; 26usize] = b"/run/shm/robotcontrol.pid\0";
pub const FD_SETSIZE: u32 = 1024;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const RC_LIB_VERSION_MAJOR: u32 = 1;
pub const RC_LIB_VERSION_MINOR: u32 = 0;
pub const RC_LIB_VERSION_PATCH: u32 = 5;
pub const RC_LIB_VERSION_HEX: u32 = 65541;
extern "C" {
    pub fn rc_adc_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_adc_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_adc_read_raw(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_adc_read_volt(ch: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rc_adc_batt() -> f64;
}
extern "C" {
    pub fn rc_adc_dc_jack() -> f64;
}
pub const rc_bmp_oversample_t_BMP_OVERSAMPLE_1: rc_bmp_oversample_t = 4;
pub const rc_bmp_oversample_t_BMP_OVERSAMPLE_2: rc_bmp_oversample_t = 8;
pub const rc_bmp_oversample_t_BMP_OVERSAMPLE_4: rc_bmp_oversample_t = 12;
pub const rc_bmp_oversample_t_BMP_OVERSAMPLE_8: rc_bmp_oversample_t = 16;
pub const rc_bmp_oversample_t_BMP_OVERSAMPLE_16: rc_bmp_oversample_t = 20;
pub type rc_bmp_oversample_t = ::std::os::raw::c_uint;
pub const rc_bmp_filter_t_BMP_FILTER_OFF: rc_bmp_filter_t = 0;
pub const rc_bmp_filter_t_BMP_FILTER_2: rc_bmp_filter_t = 4;
pub const rc_bmp_filter_t_BMP_FILTER_4: rc_bmp_filter_t = 8;
pub const rc_bmp_filter_t_BMP_FILTER_8: rc_bmp_filter_t = 12;
pub const rc_bmp_filter_t_BMP_FILTER_16: rc_bmp_filter_t = 16;
pub type rc_bmp_filter_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rc_bmp_data_t {
    pub temp_c: f64,
    pub alt_m: f64,
    pub pressure_pa: f64,
}
#[test]
fn bindgen_test_layout_rc_bmp_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_bmp_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_bmp_data_t>(),
        24usize,
        concat!("Size of: ", stringify!(rc_bmp_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_bmp_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rc_bmp_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp_c) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_bmp_data_t), "::", stringify!(temp_c))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_m) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rc_bmp_data_t), "::", stringify!(alt_m))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure_pa) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_bmp_data_t),
            "::",
            stringify!(pressure_pa)
        )
    );
}
extern "C" {
    pub fn rc_bmp_init(oversample: rc_bmp_oversample_t, filter: rc_bmp_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_bmp_set_sea_level_pressure_pa(pa: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_bmp_power_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_bmp_read(data: *mut rc_bmp_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_button_init(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        polarity: ::std::os::raw::c_char,
        debounce_us: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_button_cleanup();
}
extern "C" {
    pub fn rc_button_set_callbacks(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        press_func: ::std::option::Option<unsafe extern "C" fn()>,
        release_func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_button_get_state(chip: ::std::os::raw::c_int, pin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_button_wait_for_event(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        press_or_release: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const rc_governor_t_RC_GOV_POWERSAVE: rc_governor_t = 0;
pub const rc_governor_t_RC_GOV_PERFORMANCE: rc_governor_t = 1;
pub const rc_governor_t_RC_GOV_ONDEMAND: rc_governor_t = 2;
pub const rc_governor_t_RC_GOV_SCHEDUTIL: rc_governor_t = 3;
pub const rc_governor_t_RC_GOV_CONSERVATIVE: rc_governor_t = 4;
pub type rc_governor_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_cpu_set_governor(gov: rc_governor_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_cpu_get_freq() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_cpu_print_freq() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_cleanup() -> ::std::os::raw::c_int;
}
pub const rc_button_state_t_RELEASED: rc_button_state_t = 0;
pub const rc_button_state_t_PRESSED: rc_button_state_t = 1;
pub type rc_button_state_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_set_pause_pressed_func(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_pause_released_func(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_mode_pressed_func(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_mode_released_func(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_get_pause_button() -> rc_button_state_t;
}
extern "C" {
    pub fn rc_get_mode_button() -> rc_button_state_t;
}
extern "C" {
    pub fn rc_get_encoder_pos(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_encoder_pos(ch: ::std::os::raw::c_int, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_enable_motors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_disable_motors() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor(motor: ::std::os::raw::c_int, duty: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor_all(duty: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor_free_spin(motor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor_free_spin_all() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor_brake(motor: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_set_motor_brake_all() -> ::std::os::raw::c_int;
}
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = i8;
pub type int_fast64_t = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast64_t = u64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast16_t = i32;
pub type int_fast32_t = i32;
pub type uint_fast16_t = u32;
pub type uint_fast32_t = u32;
extern "C" {
    pub fn rc_dsm_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_ch_raw(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_ch_normalized(ch: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rc_dsm_is_new_data() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_set_callback(func: ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn rc_dsm_set_disconnect_callback(func: ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn rc_dsm_is_connection_active() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_nanos_since_last_packet() -> i64;
}
extern "C" {
    pub fn rc_dsm_resolution() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_channels() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_bind_routine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_dsm_calibrate_routine() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_eqep_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_eqep_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_eqep_read(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_eqep_write(ch: ::std::os::raw::c_int, pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_pru_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_pru_cleanup();
}
extern "C" {
    pub fn rc_encoder_pru_read() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_pru_write(pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_read(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_encoder_write(ch: ::std::os::raw::c_int, pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_init(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        handle_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_set_value(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_get_value(chip: ::std::os::raw::c_int, pin: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_init_event(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        handle_flags: ::std::os::raw::c_int,
        event_flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_poll(
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
        event_time_ns: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_gpio_cleanup(chip: ::std::os::raw::c_int, pin: ::std::os::raw::c_int);
}
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __ll: ::std::os::raw::c_longlong,
    pub __ld: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ll) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(max_align_t), "::", stringify!(__ll))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ld) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(max_align_t), "::", stringify!(__ld))
    );
}
extern "C" {
    pub fn rc_i2c_init(bus: ::std::os::raw::c_int, devAddr: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_close(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_set_device_address(bus: ::std::os::raw::c_int, devAddr: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_read_byte(bus: ::std::os::raw::c_int, regAddr: u8, data: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_read_bytes(
        bus: ::std::os::raw::c_int,
        regAddr: u8,
        count: usize,
        data: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_read_word(bus: ::std::os::raw::c_int, regAddr: u8, data: *mut u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_read_words(
        bus: ::std::os::raw::c_int,
        regAddr: u8,
        count: usize,
        data: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_write_byte(bus: ::std::os::raw::c_int, regAddr: u8, data: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_write_bytes(
        bus: ::std::os::raw::c_int,
        regAddr: u8,
        count: usize,
        data: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_write_word(bus: ::std::os::raw::c_int, regAddr: u8, data: u16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_write_words(
        bus: ::std::os::raw::c_int,
        regAddr: u8,
        count: usize,
        data: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_send_bytes(bus: ::std::os::raw::c_int, count: usize, data: *mut u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_send_byte(bus: ::std::os::raw::c_int, data: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_lock_bus(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_unlock_bus(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_get_lock(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_i2c_get_fd(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const rc_led_t_RC_LED_GREEN: rc_led_t = 0;
pub const rc_led_t_RC_LED_RED: rc_led_t = 1;
pub const rc_led_t_RC_LED_USR0: rc_led_t = 2;
pub const rc_led_t_RC_LED_USR1: rc_led_t = 3;
pub const rc_led_t_RC_LED_USR2: rc_led_t = 4;
pub const rc_led_t_RC_LED_USR3: rc_led_t = 5;
pub const rc_led_t_RC_LED_BAT25: rc_led_t = 6;
pub const rc_led_t_RC_LED_BAT50: rc_led_t = 7;
pub const rc_led_t_RC_LED_BAT75: rc_led_t = 8;
pub const rc_led_t_RC_LED_BAT100: rc_led_t = 9;
pub const rc_led_t_RC_LED_WIFI: rc_led_t = 10;
pub type rc_led_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_led_set(led: rc_led_t, value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_led_cleanup();
}
extern "C" {
    pub fn rc_led_get(led: rc_led_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_led_blink(led: rc_led_t, hz: f32, duration: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_led_stop_blink(led: rc_led_t);
}
extern "C" {
    pub fn rc_led_stop_blink_all();
}
extern "C" {
    pub static mut zero_tolerance: f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_vector_t {
    pub len: ::std::os::raw::c_int,
    pub d: *mut f64,
    pub initialized: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rc_vector_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_vector_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_vector_t>(),
        12usize,
        concat!("Size of: ", stringify!(rc_vector_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_vector_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rc_vector_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_vector_t), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(rc_vector_t), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_vector_t),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for rc_vector_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rc_vector_empty() -> rc_vector_t;
}
extern "C" {
    pub fn rc_vector_alloc(v: *mut rc_vector_t, length: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_free(v: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_zeros(v: *mut rc_vector_t, length: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_ones(v: *mut rc_vector_t, length: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_random(v: *mut rc_vector_t, length: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_fibonnaci(v: *mut rc_vector_t, length: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_from_array(
        v: *mut rc_vector_t,
        ptr: *mut f64,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_duplicate(a: rc_vector_t, b: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_print(v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_print_sci(v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_zero_out(v: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_times_scalar(v: *mut rc_vector_t, s: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_norm(v: rc_vector_t, p: f64) -> f64;
}
extern "C" {
    pub fn rc_vector_max(v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_min(v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_std_dev(v: rc_vector_t) -> f64;
}
extern "C" {
    pub fn rc_vector_mean(v: rc_vector_t) -> f64;
}
extern "C" {
    pub fn rc_vector_projection(v: rc_vector_t, e: rc_vector_t, p: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_dot_product(v1: rc_vector_t, v2: rc_vector_t) -> f64;
}
extern "C" {
    pub fn rc_vector_cross_product(v1: rc_vector_t, v2: rc_vector_t, p: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_sum(v1: rc_vector_t, v2: rc_vector_t, s: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_sum_inplace(v1: *mut rc_vector_t, v2: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_vector_subtract(v1: rc_vector_t, v2: rc_vector_t, s: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_matrix_t {
    pub rows: ::std::os::raw::c_int,
    pub cols: ::std::os::raw::c_int,
    pub d: *mut *mut f64,
    pub initialized: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rc_matrix_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_matrix_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_matrix_t>(),
        16usize,
        concat!("Size of: ", stringify!(rc_matrix_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_matrix_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rc_matrix_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rows) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_matrix_t), "::", stringify!(rows))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cols) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(rc_matrix_t), "::", stringify!(cols))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rc_matrix_t), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_matrix_t),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for rc_matrix_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rc_matrix_empty() -> rc_matrix_t;
}
extern "C" {
    pub fn rc_matrix_alloc(
        A: *mut rc_matrix_t,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_free(A: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_zeros(
        A: *mut rc_matrix_t,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_identity(A: *mut rc_matrix_t, dim: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_random(
        A: *mut rc_matrix_t,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_diagonal(A: *mut rc_matrix_t, v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_duplicate(A: rc_matrix_t, B: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_print(A: rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_print_sci(A: rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_zero_out(A: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_times_scalar(A: *mut rc_matrix_t, s: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_multiply(A: rc_matrix_t, B: rc_matrix_t, C: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_left_multiply_inplace(A: rc_matrix_t, B: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_right_multiply_inplace(A: *mut rc_matrix_t, B: rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_add(A: rc_matrix_t, B: rc_matrix_t, C: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_add_inplace(A: *mut rc_matrix_t, B: rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_subtract_inplace(A: *mut rc_matrix_t, B: rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_transpose(A: rc_matrix_t, T: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_transpose_inplace(A: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_times_col_vec(A: rc_matrix_t, v: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_row_vec_times_matrix(v: rc_vector_t, A: rc_matrix_t, c: *mut rc_vector_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_outer_product(v1: rc_vector_t, v2: rc_vector_t, A: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_matrix_determinant(A: rc_matrix_t) -> f64;
}
extern "C" {
    pub fn rc_matrix_symmetrize(P: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_lup_decomp(
        A: rc_matrix_t,
        L: *mut rc_matrix_t,
        U: *mut rc_matrix_t,
        P: *mut rc_matrix_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_qr_decomp(A: rc_matrix_t, Q: *mut rc_matrix_t, R: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_invert_matrix(A: rc_matrix_t, Ainv: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_invert_matrix_inplace(A: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_lin_system_solve(A: rc_matrix_t, b: rc_vector_t, x: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_set_zero_tolerance(tol: f64);
}
extern "C" {
    pub fn rc_algebra_lin_system_solve_qr(A: rc_matrix_t, b: rc_vector_t, x: *mut rc_vector_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_algebra_fit_ellipsoid(
        points: rc_matrix_t,
        center: *mut rc_vector_t,
        lengths: *mut rc_vector_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_ringbuf_t {
    pub d: *mut f64,
    pub size: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub initialized: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rc_ringbuf_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_ringbuf_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_ringbuf_t>(),
        16usize,
        concat!("Size of: ", stringify!(rc_ringbuf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_ringbuf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(rc_ringbuf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_ringbuf_t), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(rc_ringbuf_t), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rc_ringbuf_t), "::", stringify!(index))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_ringbuf_t),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for rc_ringbuf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rc_ringbuf_empty() -> rc_ringbuf_t;
}
extern "C" {
    pub fn rc_ringbuf_alloc(buf: *mut rc_ringbuf_t, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_ringbuf_free(buf: *mut rc_ringbuf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_ringbuf_reset(buf: *mut rc_ringbuf_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_ringbuf_insert(buf: *mut rc_ringbuf_t, val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_ringbuf_get_value(buf: *mut rc_ringbuf_t, position: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rc_ringbuf_std_dev(buf: rc_ringbuf_t) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_filter_t {
    pub order: ::std::os::raw::c_int,
    pub dt: f64,
    pub gain: f64,
    pub num: rc_vector_t,
    pub den: rc_vector_t,
    pub sat_en: ::std::os::raw::c_int,
    pub sat_min: f64,
    pub sat_max: f64,
    pub sat_flag: ::std::os::raw::c_int,
    pub ss_en: ::std::os::raw::c_int,
    pub ss_steps: f64,
    pub in_buf: rc_ringbuf_t,
    pub out_buf: rc_ringbuf_t,
    pub newest_input: f64,
    pub newest_output: f64,
    pub step: u64,
    pub initialized: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rc_filter_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_filter_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_filter_t>(),
        152usize,
        concat!("Size of: ", stringify!(rc_filter_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_filter_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rc_filter_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(order))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dt) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(dt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gain) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(gain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(num))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).den) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(den))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sat_en) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(sat_en))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sat_min) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(sat_min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sat_max) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(sat_max))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sat_flag) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(sat_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_en) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(ss_en))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_steps) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(ss_steps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_buf) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(in_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_buf) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(out_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newest_input) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_filter_t),
            "::",
            stringify!(newest_input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newest_output) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_filter_t),
            "::",
            stringify!(newest_output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(rc_filter_t), "::", stringify!(step))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_filter_t),
            "::",
            stringify!(initialized)
        )
    );
}
impl Default for rc_filter_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rc_filter_empty() -> rc_filter_t;
}
extern "C" {
    pub fn rc_filter_alloc(f: *mut rc_filter_t, num: rc_vector_t, den: rc_vector_t, dt: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_alloc_from_arrays(
        f: *mut rc_filter_t,
        dt: f64,
        num: *mut f64,
        numlen: ::std::os::raw::c_int,
        den: *mut f64,
        denlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_duplicate(f: *mut rc_filter_t, old: rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_free(f: *mut rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_print(f: rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_march(f: *mut rc_filter_t, new_input: f64) -> f64;
}
extern "C" {
    pub fn rc_filter_reset(f: *mut rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_enable_saturation(f: *mut rc_filter_t, min: f64, max: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_get_saturation_flag(f: *mut rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_enable_soft_start(f: *mut rc_filter_t, seconds: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_previous_input(f: *mut rc_filter_t, steps: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rc_filter_previous_output(f: *mut rc_filter_t, steps: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rc_filter_prefill_inputs(f: *mut rc_filter_t, in_: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_prefill_outputs(f: *mut rc_filter_t, out: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_multiply(f1: rc_filter_t, f2: rc_filter_t, out: *mut rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_multiply_three(
        f1: rc_filter_t,
        f2: rc_filter_t,
        f3: rc_filter_t,
        out: *mut rc_filter_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_c2d_tustin(
        f: *mut rc_filter_t,
        dt: f64,
        num: rc_vector_t,
        den: rc_vector_t,
        w: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_normalize(f: *mut rc_filter_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_first_order_lowpass(f: *mut rc_filter_t, dt: f64, tc: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_first_order_highpass(f: *mut rc_filter_t, dt: f64, tc: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_butterworth_lowpass(
        f: *mut rc_filter_t,
        order: ::std::os::raw::c_int,
        dt: f64,
        wc: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_butterworth_highpass(
        f: *mut rc_filter_t,
        order: ::std::os::raw::c_int,
        dt: f64,
        wc: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_moving_average(
        f: *mut rc_filter_t,
        samples: ::std::os::raw::c_int,
        dt: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_integrator(f: *mut rc_filter_t, dt: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_double_integrator(f: *mut rc_filter_t, dt: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_pid(f: *mut rc_filter_t, kp: f64, ki: f64, kd: f64, Tf: f64, dt: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_filter_third_order_complement(
        lp: *mut rc_filter_t,
        hp: *mut rc_filter_t,
        freq: f64,
        damp: f64,
        dt: f64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_kalman_t {
    pub F: rc_matrix_t,
    pub G: rc_matrix_t,
    pub H: rc_matrix_t,
    pub Q: rc_matrix_t,
    pub R: rc_matrix_t,
    pub P: rc_matrix_t,
    pub Pi: rc_matrix_t,
    pub x_est: rc_vector_t,
    pub x_pre: rc_vector_t,
    pub initialized: ::std::os::raw::c_int,
    pub step: u64,
}
#[test]
fn bindgen_test_layout_rc_kalman_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_kalman_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_kalman_t>(),
        152usize,
        concat!("Size of: ", stringify!(rc_kalman_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_kalman_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rc_kalman_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).F) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(F))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).G) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(G))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).H) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(H))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Q) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(Q))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(R))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(P))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pi) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(Pi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_est) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(x_est))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_pre) as usize - ptr as usize },
        124usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(x_pre))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_kalman_t),
            "::",
            stringify!(initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(rc_kalman_t), "::", stringify!(step))
    );
}
impl Default for rc_kalman_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn rc_kalman_empty() -> rc_kalman_t;
}
extern "C" {
    pub fn rc_kalman_alloc_lin(
        kf: *mut rc_kalman_t,
        F: rc_matrix_t,
        G: rc_matrix_t,
        H: rc_matrix_t,
        Q: rc_matrix_t,
        R: rc_matrix_t,
        Pi: rc_matrix_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kalman_alloc_ekf(
        kf: *mut rc_kalman_t,
        Q: rc_matrix_t,
        R: rc_matrix_t,
        Pi: rc_matrix_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kalman_free(kf: *mut rc_kalman_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kalman_reset(kf: *mut rc_kalman_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kalman_update_lin(kf: *mut rc_kalman_t, u: rc_vector_t, y: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kalman_update_ekf(
        kf: *mut rc_kalman_t,
        F: rc_matrix_t,
        H: rc_matrix_t,
        x_pre: rc_vector_t,
        y: rc_vector_t,
        h: rc_vector_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_get_random_float() -> f32;
}
extern "C" {
    pub fn rc_get_random_double() -> f64;
}
extern "C" {
    pub fn rc_saturate_float(val: *mut f32, min: f32, max: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_saturate_double(val: *mut f64, min: f64, max: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_print(v: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_conv(a: rc_vector_t, b: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_power(a: rc_vector_t, n: ::std::os::raw::c_int, b: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_add(a: rc_vector_t, b: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_add_inplace(a: *mut rc_vector_t, b: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_subtract(a: rc_vector_t, b: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_subtract_inplace(a: *mut rc_vector_t, b: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_differentiate(
        a: rc_vector_t,
        d: ::std::os::raw::c_int,
        b: *mut rc_vector_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_divide(
        n: rc_vector_t,
        d: rc_vector_t,
        div: *mut rc_vector_t,
        rem: *mut rc_vector_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_poly_butter(N: ::std::os::raw::c_int, wc: f64, b: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_norm(q: rc_vector_t) -> f64;
}
extern "C" {
    pub fn rc_quaternion_norm_array(q: *mut f64) -> f64;
}
extern "C" {
    pub fn rc_normalize_quaternion(q: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_normalize_quaternion_array(q: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_to_tb(q: rc_vector_t, tb: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_to_tb_array(q: *mut f64, tb: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_from_tb(tb: rc_vector_t, q: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_from_tb_array(tb: *mut f64, q: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_conjugate(q: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_conjugate_inplace(q: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_conjugate_array(q: *mut f64, c: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_conjugate_array_inplace(q: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_imaginary_part(q: rc_vector_t, img: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_multiply(a: rc_vector_t, b: rc_vector_t, c: *mut rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_multiply_array(a: *mut f64, b: *mut f64, c: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_rotate(p: *mut rc_vector_t, q: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_rotate_array(p: *mut f64, q: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_rotate_vector(v: *mut rc_vector_t, q: rc_vector_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_rotate_vector_array(v: *mut f64, q: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_quaternion_to_rotation_matrix(q: rc_vector_t, m: *mut rc_matrix_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_struct;
extern "C" {
    pub fn memcpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn strchr(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn strspn(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::std::os::raw::c_void, arg2: *mut ::std::os::raw::c_void, arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn index(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stpcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct param_union {
    pub __bindgen_anon_1: param_union__bindgen_ty_1,
    pub type_: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union param_union__bindgen_ty_1 {
    pub param_float: f32,
    pub param_int32: i32,
    pub param_uint32: u32,
    pub param_int16: i16,
    pub param_uint16: u16,
    pub param_int8: i8,
    pub param_uint8: u8,
    pub bytes: [u8; 4usize],
}
#[test]
fn bindgen_test_layout_param_union__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<param_union__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<param_union__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(param_union__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<param_union__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(param_union__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_float) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_uint16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_uint8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(param_uint8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
}
impl Default for param_union__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_param_union() {
    const UNINIT: ::std::mem::MaybeUninit<param_union> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<param_union>(),
        5usize,
        concat!("Size of: ", stringify!(param_union))
    );
    assert_eq!(
        ::std::mem::align_of::<param_union>(),
        1usize,
        concat!("Alignment of ", stringify!(param_union))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(param_union), "::", stringify!(type_))
    );
}
impl Default for param_union {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_param_union_t = param_union;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct param_union_extended {
    pub __bindgen_anon_1: param_union_extended__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union param_union_extended__bindgen_ty_1 {
    pub __bindgen_anon_1: param_union_extended__bindgen_ty_1__bindgen_ty_1,
    pub data: [u8; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct param_union_extended__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_anon_1: param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub c: ::std::os::raw::c_char,
    pub uint8: u8,
    pub int8: i8,
    pub uint16: u16,
    pub int16: i16,
    pub uint32: u32,
    pub int32: i32,
    pub f: f32,
    pub align: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(uint8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(align)
        )
    );
}
impl Default for param_union_extended__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_param_union_extended__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<param_union_extended__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<param_union_extended__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(param_union_extended__bindgen_ty_1__bindgen_ty_1)
        )
    );
}
impl Default for param_union_extended__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl param_union_extended__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn is_double(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_double(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mavlink_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_mavlink_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(is_double: u8, mavlink_type: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_double: u8 = unsafe { ::std::mem::transmute(is_double) };
            is_double as u64
        });
        __bindgen_bitfield_unit.set(1usize, 7u8, {
            let mavlink_type: u8 = unsafe { ::std::mem::transmute(mavlink_type) };
            mavlink_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_param_union_extended__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<param_union_extended__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<param_union_extended__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(param_union_extended__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<param_union_extended__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(param_union_extended__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(param_union_extended__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
impl Default for param_union_extended__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_param_union_extended() {
    assert_eq!(
        ::std::mem::size_of::<param_union_extended>(),
        12usize,
        concat!("Size of: ", stringify!(param_union_extended))
    );
    assert_eq!(
        ::std::mem::align_of::<param_union_extended>(),
        1usize,
        concat!("Alignment of ", stringify!(param_union_extended))
    );
}
impl Default for param_union_extended {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_param_union_double_t = param_union_extended;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_system {
    pub sysid: u8,
    pub compid: u8,
}
#[test]
fn bindgen_test_layout___mavlink_system() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_system> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_system>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_system))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_system>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_system))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_system),
            "::",
            stringify!(sysid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compid) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_system),
            "::",
            stringify!(compid)
        )
    );
}
pub type mavlink_system_t = __mavlink_system;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_message {
    pub checksum: u16,
    pub magic: u8,
    pub len: u8,
    pub incompat_flags: u8,
    pub compat_flags: u8,
    pub seq: u8,
    pub sysid: u8,
    pub compid: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub payload64: [u64; 33usize],
    pub ck: [u8; 2usize],
    pub signature: [u8; 13usize],
}
#[test]
fn bindgen_test_layout___mavlink_message() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_message>(),
        291usize,
        concat!("Size of: ", stringify!(__mavlink_message))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_message>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).checksum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).incompat_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(incompat_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compat_flags) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(compat_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysid) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(sysid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(compid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload64) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(payload64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ck) as usize - ptr as usize },
        276usize,
        concat!("Offset of field: ", stringify!(__mavlink_message), "::", stringify!(ck))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        278usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message),
            "::",
            stringify!(signature)
        )
    );
}
impl Default for __mavlink_message {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl __mavlink_message {
    #[inline]
    pub fn msgid(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_msgid(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(msgid: u32) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let msgid: u32 = unsafe { ::std::mem::transmute(msgid) };
            msgid as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mavlink_message_t = __mavlink_message;
pub const mavlink_message_type_t_MAVLINK_TYPE_CHAR: mavlink_message_type_t = 0;
pub const mavlink_message_type_t_MAVLINK_TYPE_UINT8_T: mavlink_message_type_t = 1;
pub const mavlink_message_type_t_MAVLINK_TYPE_INT8_T: mavlink_message_type_t = 2;
pub const mavlink_message_type_t_MAVLINK_TYPE_UINT16_T: mavlink_message_type_t = 3;
pub const mavlink_message_type_t_MAVLINK_TYPE_INT16_T: mavlink_message_type_t = 4;
pub const mavlink_message_type_t_MAVLINK_TYPE_UINT32_T: mavlink_message_type_t = 5;
pub const mavlink_message_type_t_MAVLINK_TYPE_INT32_T: mavlink_message_type_t = 6;
pub const mavlink_message_type_t_MAVLINK_TYPE_UINT64_T: mavlink_message_type_t = 7;
pub const mavlink_message_type_t_MAVLINK_TYPE_INT64_T: mavlink_message_type_t = 8;
pub const mavlink_message_type_t_MAVLINK_TYPE_FLOAT: mavlink_message_type_t = 9;
pub const mavlink_message_type_t_MAVLINK_TYPE_DOUBLE: mavlink_message_type_t = 10;
pub type mavlink_message_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_field_info {
    pub name: *const ::std::os::raw::c_char,
    pub print_format: *const ::std::os::raw::c_char,
    pub type_: mavlink_message_type_t,
    pub array_length: ::std::os::raw::c_uint,
    pub wire_offset: ::std::os::raw::c_uint,
    pub structure_offset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___mavlink_field_info() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_field_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_field_info>(),
        24usize,
        concat!("Size of: ", stringify!(__mavlink_field_info))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_field_info>(),
        4usize,
        concat!("Alignment of ", stringify!(__mavlink_field_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(print_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(array_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wire_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(wire_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).structure_offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_field_info),
            "::",
            stringify!(structure_offset)
        )
    );
}
impl Default for __mavlink_field_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_field_info_t = __mavlink_field_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_message_info {
    pub msgid: u32,
    pub name: *const ::std::os::raw::c_char,
    pub num_fields: ::std::os::raw::c_uint,
    pub fields: [mavlink_field_info_t; 64usize],
}
#[test]
fn bindgen_test_layout___mavlink_message_info() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_message_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_message_info>(),
        1548usize,
        concat!("Size of: ", stringify!(__mavlink_message_info))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_message_info>(),
        4usize,
        concat!("Alignment of ", stringify!(__mavlink_message_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_info),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_fields) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_info),
            "::",
            stringify!(num_fields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_info),
            "::",
            stringify!(fields)
        )
    );
}
impl Default for __mavlink_message_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_message_info_t = __mavlink_message_info;
pub const mavlink_channel_t_MAVLINK_COMM_0: mavlink_channel_t = 0;
pub const mavlink_channel_t_MAVLINK_COMM_1: mavlink_channel_t = 1;
pub const mavlink_channel_t_MAVLINK_COMM_2: mavlink_channel_t = 2;
pub const mavlink_channel_t_MAVLINK_COMM_3: mavlink_channel_t = 3;
pub type mavlink_channel_t = ::std::os::raw::c_uint;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_UNINIT: mavlink_parse_state_t = 0;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_IDLE: mavlink_parse_state_t = 1;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_STX: mavlink_parse_state_t = 2;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_LENGTH: mavlink_parse_state_t = 3;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS: mavlink_parse_state_t = 4;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS: mavlink_parse_state_t = 5;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_SEQ: mavlink_parse_state_t = 6;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_SYSID: mavlink_parse_state_t = 7;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_COMPID: mavlink_parse_state_t = 8;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_MSGID1: mavlink_parse_state_t = 9;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_MSGID2: mavlink_parse_state_t = 10;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_MSGID3: mavlink_parse_state_t = 11;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_PAYLOAD: mavlink_parse_state_t = 12;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_CRC1: mavlink_parse_state_t = 13;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_GOT_BAD_CRC1: mavlink_parse_state_t = 14;
pub const mavlink_parse_state_t_MAVLINK_PARSE_STATE_SIGNATURE_WAIT: mavlink_parse_state_t = 15;
pub type mavlink_parse_state_t = ::std::os::raw::c_uint;
pub const mavlink_framing_t_MAVLINK_FRAMING_INCOMPLETE: mavlink_framing_t = 0;
pub const mavlink_framing_t_MAVLINK_FRAMING_OK: mavlink_framing_t = 1;
pub const mavlink_framing_t_MAVLINK_FRAMING_BAD_CRC: mavlink_framing_t = 2;
pub const mavlink_framing_t_MAVLINK_FRAMING_BAD_SIGNATURE: mavlink_framing_t = 3;
pub type mavlink_framing_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_status {
    pub msg_received: u8,
    pub buffer_overrun: u8,
    pub parse_error: u8,
    pub parse_state: mavlink_parse_state_t,
    pub packet_idx: u8,
    pub current_rx_seq: u8,
    pub current_tx_seq: u8,
    pub packet_rx_success_count: u16,
    pub packet_rx_drop_count: u16,
    pub flags: u8,
    pub signature_wait: u8,
    pub signing: *mut __mavlink_signing,
    pub signing_streams: *mut __mavlink_signing_streams,
}
#[test]
fn bindgen_test_layout___mavlink_status() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_status>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_status>(),
        4usize,
        concat!("Alignment of ", stringify!(__mavlink_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_received) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(msg_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_overrun) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(buffer_overrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_error) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(parse_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parse_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(parse_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_idx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(packet_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_rx_seq) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(current_rx_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_tx_seq) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(current_tx_seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_rx_success_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(packet_rx_success_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_rx_drop_count) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(packet_rx_drop_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature_wait) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(signature_wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signing) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(signing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signing_streams) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_status),
            "::",
            stringify!(signing_streams)
        )
    );
}
impl Default for __mavlink_status {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_status_t = __mavlink_status;
pub type mavlink_accept_unsigned_t =
    ::std::option::Option<unsafe extern "C" fn(status: *const mavlink_status_t, msgid: u32) -> bool>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_signing {
    pub flags: u8,
    pub link_id: u8,
    pub timestamp: u64,
    pub secret_key: [u8; 32usize],
    pub accept_unsigned_callback: mavlink_accept_unsigned_t,
}
#[test]
fn bindgen_test_layout___mavlink_signing() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_signing> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_signing>(),
        56usize,
        concat!("Size of: ", stringify!(__mavlink_signing))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_signing>(),
        8usize,
        concat!("Alignment of ", stringify!(__mavlink_signing))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_id) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing),
            "::",
            stringify!(link_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secret_key) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing),
            "::",
            stringify!(secret_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_unsigned_callback) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing),
            "::",
            stringify!(accept_unsigned_callback)
        )
    );
}
pub type mavlink_signing_t = __mavlink_signing;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_signing_streams {
    pub num_signing_streams: u16,
    pub stream: [__mavlink_signing_streams___mavlink_signing_stream; 16usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_signing_streams___mavlink_signing_stream {
    pub link_id: u8,
    pub sysid: u8,
    pub compid: u8,
    pub timestamp_bytes: [u8; 6usize],
}
#[test]
fn bindgen_test_layout___mavlink_signing_streams___mavlink_signing_stream() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_signing_streams___mavlink_signing_stream> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_signing_streams___mavlink_signing_stream>(),
        9usize,
        concat!(
            "Size of: ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_signing_streams___mavlink_signing_stream>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream),
            "::",
            stringify!(link_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysid) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream),
            "::",
            stringify!(sysid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream),
            "::",
            stringify!(compid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp_bytes) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams___mavlink_signing_stream),
            "::",
            stringify!(timestamp_bytes)
        )
    );
}
#[test]
fn bindgen_test_layout___mavlink_signing_streams() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_signing_streams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_signing_streams>(),
        146usize,
        concat!("Size of: ", stringify!(__mavlink_signing_streams))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_signing_streams>(),
        2usize,
        concat!("Alignment of ", stringify!(__mavlink_signing_streams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_signing_streams) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams),
            "::",
            stringify!(num_signing_streams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_signing_streams),
            "::",
            stringify!(stream)
        )
    );
}
pub type mavlink_signing_streams_t = __mavlink_signing_streams;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_msg_entry {
    pub msgid: u32,
    pub crc_extra: u8,
    pub msg_len: u8,
    pub flags: u8,
    pub target_system_ofs: u8,
    pub target_component_ofs: u8,
}
#[test]
fn bindgen_test_layout___mavlink_msg_entry() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_msg_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_msg_entry>(),
        12usize,
        concat!("Size of: ", stringify!(__mavlink_msg_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_msg_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(__mavlink_msg_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).crc_extra) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(crc_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_len) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(msg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system_ofs) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(target_system_ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component_ofs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_msg_entry),
            "::",
            stringify!(target_component_ofs)
        )
    );
}
pub type mavlink_msg_entry_t = __mavlink_msg_entry;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn dremf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalbf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
extern "C" {
    pub fn significandf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
pub type off_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type FILE = _IO_FILE;
pub type va_list = u32;
pub type __isoc_va_list = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _G_fpos64_t {
    pub __opaque: [::std::os::raw::c_char; 16usize],
    pub __lldata: ::std::os::raw::c_longlong,
    pub __align: f64,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__opaque))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lldata) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__lldata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__align))
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = _G_fpos64_t;
extern "C" {
    pub static stdin: *mut FILE;
}
extern "C" {
    pub static stdout: *mut FILE;
}
extern "C" {
    pub static stderr: *mut FILE;
}
extern "C" {
    pub fn fopen(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut FILE,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fwrite(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut FILE,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, arg3: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
        arg3: *const ::std::os::raw::c_char,
        arg4: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(arg1: *const ::std::os::raw::c_char, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, arg3: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(arg1: *mut ::std::os::raw::c_void, arg2: usize, arg3: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn popen(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko(arg1: *mut FILE, arg2: off_t, arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(arg1: *mut FILE) -> off_t;
}
extern "C" {
    pub fn dprintf(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: __isoc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut usize, arg3: *mut FILE) -> isize;
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE);
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char, arg3: usize);
}
extern "C" {
    pub fn fgetc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(arg1: *mut ::std::os::raw::c_void, arg2: usize, arg3: usize, arg4: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(arg1: *const ::std::os::raw::c_void, arg2: usize, arg3: usize, arg4: *mut FILE) -> usize;
}
extern "C" {
    pub fn clearerr_unlocked(arg1: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __isoc_va_list,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mavlink_sha256_ctx {
    pub sz: [::std::os::raw::c_uint; 2usize],
    pub counter: [u32; 8usize],
    pub u: mavlink_sha256_ctx__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mavlink_sha256_ctx__bindgen_ty_1 {
    pub save_bytes: [::std::os::raw::c_uchar; 64usize],
    pub save_u32: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_mavlink_sha256_ctx__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mavlink_sha256_ctx__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mavlink_sha256_ctx__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(mavlink_sha256_ctx__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mavlink_sha256_ctx__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(mavlink_sha256_ctx__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mavlink_sha256_ctx__bindgen_ty_1),
            "::",
            stringify!(save_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mavlink_sha256_ctx__bindgen_ty_1),
            "::",
            stringify!(save_u32)
        )
    );
}
impl Default for mavlink_sha256_ctx__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_mavlink_sha256_ctx() {
    const UNINIT: ::std::mem::MaybeUninit<mavlink_sha256_ctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mavlink_sha256_ctx>(),
        104usize,
        concat!("Size of: ", stringify!(mavlink_sha256_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<mavlink_sha256_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(mavlink_sha256_ctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mavlink_sha256_ctx),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mavlink_sha256_ctx),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(mavlink_sha256_ctx), "::", stringify!(u))
    );
}
impl Default for mavlink_sha256_ctx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static mavlink_sha256_constant_256: [u32; 64usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mavlink_bitfield {
    pub uint8: u8,
    pub int8: i8,
    pub uint16: u16,
    pub int16: i16,
    pub uint32: u32,
    pub int32: i32,
}
#[test]
fn bindgen_test_layout___mavlink_bitfield() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_bitfield> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_bitfield>(),
        4usize,
        concat!("Size of: ", stringify!(__mavlink_bitfield))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_bitfield>(),
        4usize,
        concat!("Alignment of ", stringify!(__mavlink_bitfield))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(uint8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(int8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_bitfield),
            "::",
            stringify!(int32)
        )
    );
}
impl Default for __mavlink_bitfield {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_GENERIC: MAV_AUTOPILOT = 0;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_RESERVED: MAV_AUTOPILOT = 1;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_SLUGS: MAV_AUTOPILOT = 2;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_ARDUPILOTMEGA: MAV_AUTOPILOT = 3;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_OPENPILOT: MAV_AUTOPILOT = 4;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY: MAV_AUTOPILOT = 5;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY: MAV_AUTOPILOT = 6;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_GENERIC_MISSION_FULL: MAV_AUTOPILOT = 7;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_INVALID: MAV_AUTOPILOT = 8;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_PPZ: MAV_AUTOPILOT = 9;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_UDB: MAV_AUTOPILOT = 10;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_FP: MAV_AUTOPILOT = 11;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_PX4: MAV_AUTOPILOT = 12;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_SMACCMPILOT: MAV_AUTOPILOT = 13;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_AUTOQUAD: MAV_AUTOPILOT = 14;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_ARMAZILA: MAV_AUTOPILOT = 15;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_AEROB: MAV_AUTOPILOT = 16;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_ASLUAV: MAV_AUTOPILOT = 17;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_SMARTAP: MAV_AUTOPILOT = 18;
pub const MAV_AUTOPILOT_MAV_AUTOPILOT_ENUM_END: MAV_AUTOPILOT = 19;
pub type MAV_AUTOPILOT = ::std::os::raw::c_uint;
pub const MAV_TYPE_MAV_TYPE_GENERIC: MAV_TYPE = 0;
pub const MAV_TYPE_MAV_TYPE_FIXED_WING: MAV_TYPE = 1;
pub const MAV_TYPE_MAV_TYPE_QUADROTOR: MAV_TYPE = 2;
pub const MAV_TYPE_MAV_TYPE_COAXIAL: MAV_TYPE = 3;
pub const MAV_TYPE_MAV_TYPE_HELICOPTER: MAV_TYPE = 4;
pub const MAV_TYPE_MAV_TYPE_ANTENNA_TRACKER: MAV_TYPE = 5;
pub const MAV_TYPE_MAV_TYPE_GCS: MAV_TYPE = 6;
pub const MAV_TYPE_MAV_TYPE_AIRSHIP: MAV_TYPE = 7;
pub const MAV_TYPE_MAV_TYPE_FREE_BALLOON: MAV_TYPE = 8;
pub const MAV_TYPE_MAV_TYPE_ROCKET: MAV_TYPE = 9;
pub const MAV_TYPE_MAV_TYPE_GROUND_ROVER: MAV_TYPE = 10;
pub const MAV_TYPE_MAV_TYPE_SURFACE_BOAT: MAV_TYPE = 11;
pub const MAV_TYPE_MAV_TYPE_SUBMARINE: MAV_TYPE = 12;
pub const MAV_TYPE_MAV_TYPE_HEXAROTOR: MAV_TYPE = 13;
pub const MAV_TYPE_MAV_TYPE_OCTOROTOR: MAV_TYPE = 14;
pub const MAV_TYPE_MAV_TYPE_TRICOPTER: MAV_TYPE = 15;
pub const MAV_TYPE_MAV_TYPE_FLAPPING_WING: MAV_TYPE = 16;
pub const MAV_TYPE_MAV_TYPE_KITE: MAV_TYPE = 17;
pub const MAV_TYPE_MAV_TYPE_ONBOARD_CONTROLLER: MAV_TYPE = 18;
pub const MAV_TYPE_MAV_TYPE_VTOL_DUOROTOR: MAV_TYPE = 19;
pub const MAV_TYPE_MAV_TYPE_VTOL_QUADROTOR: MAV_TYPE = 20;
pub const MAV_TYPE_MAV_TYPE_VTOL_TILTROTOR: MAV_TYPE = 21;
pub const MAV_TYPE_MAV_TYPE_VTOL_RESERVED2: MAV_TYPE = 22;
pub const MAV_TYPE_MAV_TYPE_VTOL_RESERVED3: MAV_TYPE = 23;
pub const MAV_TYPE_MAV_TYPE_VTOL_RESERVED4: MAV_TYPE = 24;
pub const MAV_TYPE_MAV_TYPE_VTOL_RESERVED5: MAV_TYPE = 25;
pub const MAV_TYPE_MAV_TYPE_GIMBAL: MAV_TYPE = 26;
pub const MAV_TYPE_MAV_TYPE_ADSB: MAV_TYPE = 27;
pub const MAV_TYPE_MAV_TYPE_PARAFOIL: MAV_TYPE = 28;
pub const MAV_TYPE_MAV_TYPE_DODECAROTOR: MAV_TYPE = 29;
pub const MAV_TYPE_MAV_TYPE_ENUM_END: MAV_TYPE = 30;
pub type MAV_TYPE = ::std::os::raw::c_uint;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_DEV: FIRMWARE_VERSION_TYPE = 0;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_ALPHA: FIRMWARE_VERSION_TYPE = 64;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_BETA: FIRMWARE_VERSION_TYPE = 128;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_RC: FIRMWARE_VERSION_TYPE = 192;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_OFFICIAL: FIRMWARE_VERSION_TYPE = 255;
pub const FIRMWARE_VERSION_TYPE_FIRMWARE_VERSION_TYPE_ENUM_END: FIRMWARE_VERSION_TYPE = 256;
pub type FIRMWARE_VERSION_TYPE = ::std::os::raw::c_uint;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_CUSTOM_MODE_ENABLED: MAV_MODE_FLAG = 1;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_TEST_ENABLED: MAV_MODE_FLAG = 2;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_AUTO_ENABLED: MAV_MODE_FLAG = 4;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_GUIDED_ENABLED: MAV_MODE_FLAG = 8;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_STABILIZE_ENABLED: MAV_MODE_FLAG = 16;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_HIL_ENABLED: MAV_MODE_FLAG = 32;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_MANUAL_INPUT_ENABLED: MAV_MODE_FLAG = 64;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_SAFETY_ARMED: MAV_MODE_FLAG = 128;
pub const MAV_MODE_FLAG_MAV_MODE_FLAG_ENUM_END: MAV_MODE_FLAG = 129;
pub type MAV_MODE_FLAG = ::std::os::raw::c_uint;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE: MAV_MODE_FLAG_DECODE_POSITION = 1;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_TEST: MAV_MODE_FLAG_DECODE_POSITION = 2;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_AUTO: MAV_MODE_FLAG_DECODE_POSITION = 4;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_GUIDED: MAV_MODE_FLAG_DECODE_POSITION = 8;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_STABILIZE: MAV_MODE_FLAG_DECODE_POSITION = 16;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_HIL: MAV_MODE_FLAG_DECODE_POSITION = 32;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_MANUAL: MAV_MODE_FLAG_DECODE_POSITION = 64;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_SAFETY: MAV_MODE_FLAG_DECODE_POSITION = 128;
pub const MAV_MODE_FLAG_DECODE_POSITION_MAV_MODE_FLAG_DECODE_POSITION_ENUM_END: MAV_MODE_FLAG_DECODE_POSITION = 129;
pub type MAV_MODE_FLAG_DECODE_POSITION = ::std::os::raw::c_uint;
pub const MAV_GOTO_MAV_GOTO_DO_HOLD: MAV_GOTO = 0;
pub const MAV_GOTO_MAV_GOTO_DO_CONTINUE: MAV_GOTO = 1;
pub const MAV_GOTO_MAV_GOTO_HOLD_AT_CURRENT_POSITION: MAV_GOTO = 2;
pub const MAV_GOTO_MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: MAV_GOTO = 3;
pub const MAV_GOTO_MAV_GOTO_ENUM_END: MAV_GOTO = 4;
pub type MAV_GOTO = ::std::os::raw::c_uint;
pub const MAV_MODE_MAV_MODE_PREFLIGHT: MAV_MODE = 0;
pub const MAV_MODE_MAV_MODE_MANUAL_DISARMED: MAV_MODE = 64;
pub const MAV_MODE_MAV_MODE_TEST_DISARMED: MAV_MODE = 66;
pub const MAV_MODE_MAV_MODE_STABILIZE_DISARMED: MAV_MODE = 80;
pub const MAV_MODE_MAV_MODE_GUIDED_DISARMED: MAV_MODE = 88;
pub const MAV_MODE_MAV_MODE_AUTO_DISARMED: MAV_MODE = 92;
pub const MAV_MODE_MAV_MODE_MANUAL_ARMED: MAV_MODE = 192;
pub const MAV_MODE_MAV_MODE_TEST_ARMED: MAV_MODE = 194;
pub const MAV_MODE_MAV_MODE_STABILIZE_ARMED: MAV_MODE = 208;
pub const MAV_MODE_MAV_MODE_GUIDED_ARMED: MAV_MODE = 216;
pub const MAV_MODE_MAV_MODE_AUTO_ARMED: MAV_MODE = 220;
pub const MAV_MODE_MAV_MODE_ENUM_END: MAV_MODE = 221;
pub type MAV_MODE = ::std::os::raw::c_uint;
pub const MAV_STATE_MAV_STATE_UNINIT: MAV_STATE = 0;
pub const MAV_STATE_MAV_STATE_BOOT: MAV_STATE = 1;
pub const MAV_STATE_MAV_STATE_CALIBRATING: MAV_STATE = 2;
pub const MAV_STATE_MAV_STATE_STANDBY: MAV_STATE = 3;
pub const MAV_STATE_MAV_STATE_ACTIVE: MAV_STATE = 4;
pub const MAV_STATE_MAV_STATE_CRITICAL: MAV_STATE = 5;
pub const MAV_STATE_MAV_STATE_EMERGENCY: MAV_STATE = 6;
pub const MAV_STATE_MAV_STATE_POWEROFF: MAV_STATE = 7;
pub const MAV_STATE_MAV_STATE_FLIGHT_TERMINATION: MAV_STATE = 8;
pub const MAV_STATE_MAV_STATE_ENUM_END: MAV_STATE = 9;
pub type MAV_STATE = ::std::os::raw::c_uint;
pub const MAV_COMPONENT_MAV_COMP_ID_ALL: MAV_COMPONENT = 0;
pub const MAV_COMPONENT_MAV_COMP_ID_AUTOPILOT1: MAV_COMPONENT = 1;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA: MAV_COMPONENT = 100;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA2: MAV_COMPONENT = 101;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA3: MAV_COMPONENT = 102;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA4: MAV_COMPONENT = 103;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA5: MAV_COMPONENT = 104;
pub const MAV_COMPONENT_MAV_COMP_ID_CAMERA6: MAV_COMPONENT = 105;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO1: MAV_COMPONENT = 140;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO2: MAV_COMPONENT = 141;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO3: MAV_COMPONENT = 142;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO4: MAV_COMPONENT = 143;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO5: MAV_COMPONENT = 144;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO6: MAV_COMPONENT = 145;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO7: MAV_COMPONENT = 146;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO8: MAV_COMPONENT = 147;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO9: MAV_COMPONENT = 148;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO10: MAV_COMPONENT = 149;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO11: MAV_COMPONENT = 150;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO12: MAV_COMPONENT = 151;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO13: MAV_COMPONENT = 152;
pub const MAV_COMPONENT_MAV_COMP_ID_SERVO14: MAV_COMPONENT = 153;
pub const MAV_COMPONENT_MAV_COMP_ID_GIMBAL: MAV_COMPONENT = 154;
pub const MAV_COMPONENT_MAV_COMP_ID_LOG: MAV_COMPONENT = 155;
pub const MAV_COMPONENT_MAV_COMP_ID_ADSB: MAV_COMPONENT = 156;
pub const MAV_COMPONENT_MAV_COMP_ID_OSD: MAV_COMPONENT = 157;
pub const MAV_COMPONENT_MAV_COMP_ID_PERIPHERAL: MAV_COMPONENT = 158;
pub const MAV_COMPONENT_MAV_COMP_ID_QX1_GIMBAL: MAV_COMPONENT = 159;
pub const MAV_COMPONENT_MAV_COMP_ID_MAPPER: MAV_COMPONENT = 180;
pub const MAV_COMPONENT_MAV_COMP_ID_MISSIONPLANNER: MAV_COMPONENT = 190;
pub const MAV_COMPONENT_MAV_COMP_ID_PATHPLANNER: MAV_COMPONENT = 195;
pub const MAV_COMPONENT_MAV_COMP_ID_IMU: MAV_COMPONENT = 200;
pub const MAV_COMPONENT_MAV_COMP_ID_IMU_2: MAV_COMPONENT = 201;
pub const MAV_COMPONENT_MAV_COMP_ID_IMU_3: MAV_COMPONENT = 202;
pub const MAV_COMPONENT_MAV_COMP_ID_GPS: MAV_COMPONENT = 220;
pub const MAV_COMPONENT_MAV_COMP_ID_GPS2: MAV_COMPONENT = 221;
pub const MAV_COMPONENT_MAV_COMP_ID_UDP_BRIDGE: MAV_COMPONENT = 240;
pub const MAV_COMPONENT_MAV_COMP_ID_UART_BRIDGE: MAV_COMPONENT = 241;
pub const MAV_COMPONENT_MAV_COMP_ID_SYSTEM_CONTROL: MAV_COMPONENT = 250;
pub const MAV_COMPONENT_MAV_COMPONENT_ENUM_END: MAV_COMPONENT = 251;
pub type MAV_COMPONENT = ::std::os::raw::c_uint;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_GYRO: MAV_SYS_STATUS_SENSOR = 1;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_ACCEL: MAV_SYS_STATUS_SENSOR = 2;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_MAG: MAV_SYS_STATUS_SENSOR = 4;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE: MAV_SYS_STATUS_SENSOR = 8;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE: MAV_SYS_STATUS_SENSOR = 16;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_GPS: MAV_SYS_STATUS_SENSOR = 32;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW: MAV_SYS_STATUS_SENSOR = 64;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_VISION_POSITION: MAV_SYS_STATUS_SENSOR = 128;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_LASER_POSITION: MAV_SYS_STATUS_SENSOR = 256;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH: MAV_SYS_STATUS_SENSOR = 512;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL: MAV_SYS_STATUS_SENSOR = 1024;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION: MAV_SYS_STATUS_SENSOR = 2048;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_YAW_POSITION: MAV_SYS_STATUS_SENSOR = 4096;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL: MAV_SYS_STATUS_SENSOR = 8192;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL: MAV_SYS_STATUS_SENSOR = 16384;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS: MAV_SYS_STATUS_SENSOR = 32768;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_RC_RECEIVER: MAV_SYS_STATUS_SENSOR = 65536;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_GYRO2: MAV_SYS_STATUS_SENSOR = 131072;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_ACCEL2: MAV_SYS_STATUS_SENSOR = 262144;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_3D_MAG2: MAV_SYS_STATUS_SENSOR = 524288;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_GEOFENCE: MAV_SYS_STATUS_SENSOR = 1048576;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_AHRS: MAV_SYS_STATUS_SENSOR = 2097152;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_TERRAIN: MAV_SYS_STATUS_SENSOR = 4194304;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_REVERSE_MOTOR: MAV_SYS_STATUS_SENSOR = 8388608;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_LOGGING: MAV_SYS_STATUS_SENSOR = 16777216;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_BATTERY: MAV_SYS_STATUS_SENSOR = 33554432;
pub const MAV_SYS_STATUS_SENSOR_MAV_SYS_STATUS_SENSOR_ENUM_END: MAV_SYS_STATUS_SENSOR = 33554433;
pub type MAV_SYS_STATUS_SENSOR = ::std::os::raw::c_uint;
pub const MAV_FRAME_MAV_FRAME_GLOBAL: MAV_FRAME = 0;
pub const MAV_FRAME_MAV_FRAME_LOCAL_NED: MAV_FRAME = 1;
pub const MAV_FRAME_MAV_FRAME_MISSION: MAV_FRAME = 2;
pub const MAV_FRAME_MAV_FRAME_GLOBAL_RELATIVE_ALT: MAV_FRAME = 3;
pub const MAV_FRAME_MAV_FRAME_LOCAL_ENU: MAV_FRAME = 4;
pub const MAV_FRAME_MAV_FRAME_GLOBAL_INT: MAV_FRAME = 5;
pub const MAV_FRAME_MAV_FRAME_GLOBAL_RELATIVE_ALT_INT: MAV_FRAME = 6;
pub const MAV_FRAME_MAV_FRAME_LOCAL_OFFSET_NED: MAV_FRAME = 7;
pub const MAV_FRAME_MAV_FRAME_BODY_NED: MAV_FRAME = 8;
pub const MAV_FRAME_MAV_FRAME_BODY_OFFSET_NED: MAV_FRAME = 9;
pub const MAV_FRAME_MAV_FRAME_GLOBAL_TERRAIN_ALT: MAV_FRAME = 10;
pub const MAV_FRAME_MAV_FRAME_GLOBAL_TERRAIN_ALT_INT: MAV_FRAME = 11;
pub const MAV_FRAME_MAV_FRAME_ENUM_END: MAV_FRAME = 12;
pub type MAV_FRAME = ::std::os::raw::c_uint;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_JPEG: MAVLINK_DATA_STREAM_TYPE = 1;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_BMP: MAVLINK_DATA_STREAM_TYPE = 2;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_RAW8U: MAVLINK_DATA_STREAM_TYPE = 3;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_RAW32U: MAVLINK_DATA_STREAM_TYPE = 4;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_PGM: MAVLINK_DATA_STREAM_TYPE = 5;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_IMG_PNG: MAVLINK_DATA_STREAM_TYPE = 6;
pub const MAVLINK_DATA_STREAM_TYPE_MAVLINK_DATA_STREAM_TYPE_ENUM_END: MAVLINK_DATA_STREAM_TYPE = 7;
pub type MAVLINK_DATA_STREAM_TYPE = ::std::os::raw::c_uint;
pub const FENCE_ACTION_FENCE_ACTION_NONE: FENCE_ACTION = 0;
pub const FENCE_ACTION_FENCE_ACTION_GUIDED: FENCE_ACTION = 1;
pub const FENCE_ACTION_FENCE_ACTION_REPORT: FENCE_ACTION = 2;
pub const FENCE_ACTION_FENCE_ACTION_GUIDED_THR_PASS: FENCE_ACTION = 3;
pub const FENCE_ACTION_FENCE_ACTION_RTL: FENCE_ACTION = 4;
pub const FENCE_ACTION_FENCE_ACTION_ENUM_END: FENCE_ACTION = 5;
pub type FENCE_ACTION = ::std::os::raw::c_uint;
pub const FENCE_BREACH_FENCE_BREACH_NONE: FENCE_BREACH = 0;
pub const FENCE_BREACH_FENCE_BREACH_MINALT: FENCE_BREACH = 1;
pub const FENCE_BREACH_FENCE_BREACH_MAXALT: FENCE_BREACH = 2;
pub const FENCE_BREACH_FENCE_BREACH_BOUNDARY: FENCE_BREACH = 3;
pub const FENCE_BREACH_FENCE_BREACH_ENUM_END: FENCE_BREACH = 4;
pub type FENCE_BREACH = ::std::os::raw::c_uint;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_RETRACT: MAV_MOUNT_MODE = 0;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_NEUTRAL: MAV_MOUNT_MODE = 1;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_MAVLINK_TARGETING: MAV_MOUNT_MODE = 2;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_RC_TARGETING: MAV_MOUNT_MODE = 3;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_GPS_POINT: MAV_MOUNT_MODE = 4;
pub const MAV_MOUNT_MODE_MAV_MOUNT_MODE_ENUM_END: MAV_MOUNT_MODE = 5;
pub type MAV_MOUNT_MODE = ::std::os::raw::c_uint;
pub const UAVCAN_NODE_HEALTH_UAVCAN_NODE_HEALTH_OK: UAVCAN_NODE_HEALTH = 0;
pub const UAVCAN_NODE_HEALTH_UAVCAN_NODE_HEALTH_WARNING: UAVCAN_NODE_HEALTH = 1;
pub const UAVCAN_NODE_HEALTH_UAVCAN_NODE_HEALTH_ERROR: UAVCAN_NODE_HEALTH = 2;
pub const UAVCAN_NODE_HEALTH_UAVCAN_NODE_HEALTH_CRITICAL: UAVCAN_NODE_HEALTH = 3;
pub const UAVCAN_NODE_HEALTH_UAVCAN_NODE_HEALTH_ENUM_END: UAVCAN_NODE_HEALTH = 4;
pub type UAVCAN_NODE_HEALTH = ::std::os::raw::c_uint;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_OPERATIONAL: UAVCAN_NODE_MODE = 0;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_INITIALIZATION: UAVCAN_NODE_MODE = 1;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_MAINTENANCE: UAVCAN_NODE_MODE = 2;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_SOFTWARE_UPDATE: UAVCAN_NODE_MODE = 3;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_OFFLINE: UAVCAN_NODE_MODE = 7;
pub const UAVCAN_NODE_MODE_UAVCAN_NODE_MODE_ENUM_END: UAVCAN_NODE_MODE = 8;
pub type UAVCAN_NODE_MODE = ::std::os::raw::c_uint;
pub const MAV_CMD_MAV_CMD_NAV_WAYPOINT: MAV_CMD = 16;
pub const MAV_CMD_MAV_CMD_NAV_LOITER_UNLIM: MAV_CMD = 17;
pub const MAV_CMD_MAV_CMD_NAV_LOITER_TURNS: MAV_CMD = 18;
pub const MAV_CMD_MAV_CMD_NAV_LOITER_TIME: MAV_CMD = 19;
pub const MAV_CMD_MAV_CMD_NAV_RETURN_TO_LAUNCH: MAV_CMD = 20;
pub const MAV_CMD_MAV_CMD_NAV_LAND: MAV_CMD = 21;
pub const MAV_CMD_MAV_CMD_NAV_TAKEOFF: MAV_CMD = 22;
pub const MAV_CMD_MAV_CMD_NAV_LAND_LOCAL: MAV_CMD = 23;
pub const MAV_CMD_MAV_CMD_NAV_TAKEOFF_LOCAL: MAV_CMD = 24;
pub const MAV_CMD_MAV_CMD_NAV_FOLLOW: MAV_CMD = 25;
pub const MAV_CMD_MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT: MAV_CMD = 30;
pub const MAV_CMD_MAV_CMD_NAV_LOITER_TO_ALT: MAV_CMD = 31;
pub const MAV_CMD_MAV_CMD_DO_FOLLOW: MAV_CMD = 32;
pub const MAV_CMD_MAV_CMD_DO_FOLLOW_REPOSITION: MAV_CMD = 33;
pub const MAV_CMD_MAV_CMD_NAV_ROI: MAV_CMD = 80;
pub const MAV_CMD_MAV_CMD_NAV_PATHPLANNING: MAV_CMD = 81;
pub const MAV_CMD_MAV_CMD_NAV_SPLINE_WAYPOINT: MAV_CMD = 82;
pub const MAV_CMD_MAV_CMD_NAV_VTOL_TAKEOFF: MAV_CMD = 84;
pub const MAV_CMD_MAV_CMD_NAV_VTOL_LAND: MAV_CMD = 85;
pub const MAV_CMD_MAV_CMD_NAV_GUIDED_ENABLE: MAV_CMD = 92;
pub const MAV_CMD_MAV_CMD_NAV_DELAY: MAV_CMD = 93;
pub const MAV_CMD_MAV_CMD_NAV_PAYLOAD_PLACE: MAV_CMD = 94;
pub const MAV_CMD_MAV_CMD_NAV_LAST: MAV_CMD = 95;
pub const MAV_CMD_MAV_CMD_CONDITION_DELAY: MAV_CMD = 112;
pub const MAV_CMD_MAV_CMD_CONDITION_CHANGE_ALT: MAV_CMD = 113;
pub const MAV_CMD_MAV_CMD_CONDITION_DISTANCE: MAV_CMD = 114;
pub const MAV_CMD_MAV_CMD_CONDITION_YAW: MAV_CMD = 115;
pub const MAV_CMD_MAV_CMD_CONDITION_LAST: MAV_CMD = 159;
pub const MAV_CMD_MAV_CMD_DO_SET_MODE: MAV_CMD = 176;
pub const MAV_CMD_MAV_CMD_DO_JUMP: MAV_CMD = 177;
pub const MAV_CMD_MAV_CMD_DO_CHANGE_SPEED: MAV_CMD = 178;
pub const MAV_CMD_MAV_CMD_DO_SET_HOME: MAV_CMD = 179;
pub const MAV_CMD_MAV_CMD_DO_SET_PARAMETER: MAV_CMD = 180;
pub const MAV_CMD_MAV_CMD_DO_SET_RELAY: MAV_CMD = 181;
pub const MAV_CMD_MAV_CMD_DO_REPEAT_RELAY: MAV_CMD = 182;
pub const MAV_CMD_MAV_CMD_DO_SET_SERVO: MAV_CMD = 183;
pub const MAV_CMD_MAV_CMD_DO_REPEAT_SERVO: MAV_CMD = 184;
pub const MAV_CMD_MAV_CMD_DO_FLIGHTTERMINATION: MAV_CMD = 185;
pub const MAV_CMD_MAV_CMD_DO_CHANGE_ALTITUDE: MAV_CMD = 186;
pub const MAV_CMD_MAV_CMD_DO_LAND_START: MAV_CMD = 189;
pub const MAV_CMD_MAV_CMD_DO_RALLY_LAND: MAV_CMD = 190;
pub const MAV_CMD_MAV_CMD_DO_GO_AROUND: MAV_CMD = 191;
pub const MAV_CMD_MAV_CMD_DO_REPOSITION: MAV_CMD = 192;
pub const MAV_CMD_MAV_CMD_DO_PAUSE_CONTINUE: MAV_CMD = 193;
pub const MAV_CMD_MAV_CMD_DO_SET_REVERSE: MAV_CMD = 194;
pub const MAV_CMD_MAV_CMD_DO_SET_ROI_LOCATION: MAV_CMD = 195;
pub const MAV_CMD_MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET: MAV_CMD = 196;
pub const MAV_CMD_MAV_CMD_DO_SET_ROI_NONE: MAV_CMD = 197;
pub const MAV_CMD_MAV_CMD_DO_CONTROL_VIDEO: MAV_CMD = 200;
pub const MAV_CMD_MAV_CMD_DO_SET_ROI: MAV_CMD = 201;
pub const MAV_CMD_MAV_CMD_DO_DIGICAM_CONFIGURE: MAV_CMD = 202;
pub const MAV_CMD_MAV_CMD_DO_DIGICAM_CONTROL: MAV_CMD = 203;
pub const MAV_CMD_MAV_CMD_DO_MOUNT_CONFIGURE: MAV_CMD = 204;
pub const MAV_CMD_MAV_CMD_DO_MOUNT_CONTROL: MAV_CMD = 205;
pub const MAV_CMD_MAV_CMD_DO_SET_CAM_TRIGG_DIST: MAV_CMD = 206;
pub const MAV_CMD_MAV_CMD_DO_FENCE_ENABLE: MAV_CMD = 207;
pub const MAV_CMD_MAV_CMD_DO_PARACHUTE: MAV_CMD = 208;
pub const MAV_CMD_MAV_CMD_DO_MOTOR_TEST: MAV_CMD = 209;
pub const MAV_CMD_MAV_CMD_DO_INVERTED_FLIGHT: MAV_CMD = 210;
pub const MAV_CMD_MAV_CMD_NAV_SET_YAW_SPEED: MAV_CMD = 213;
pub const MAV_CMD_MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL: MAV_CMD = 214;
pub const MAV_CMD_MAV_CMD_DO_MOUNT_CONTROL_QUAT: MAV_CMD = 220;
pub const MAV_CMD_MAV_CMD_DO_GUIDED_MASTER: MAV_CMD = 221;
pub const MAV_CMD_MAV_CMD_DO_GUIDED_LIMITS: MAV_CMD = 222;
pub const MAV_CMD_MAV_CMD_DO_ENGINE_CONTROL: MAV_CMD = 223;
pub const MAV_CMD_MAV_CMD_DO_LAST: MAV_CMD = 240;
pub const MAV_CMD_MAV_CMD_PREFLIGHT_CALIBRATION: MAV_CMD = 241;
pub const MAV_CMD_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS: MAV_CMD = 242;
pub const MAV_CMD_MAV_CMD_PREFLIGHT_UAVCAN: MAV_CMD = 243;
pub const MAV_CMD_MAV_CMD_PREFLIGHT_STORAGE: MAV_CMD = 245;
pub const MAV_CMD_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN: MAV_CMD = 246;
pub const MAV_CMD_MAV_CMD_OVERRIDE_GOTO: MAV_CMD = 252;
pub const MAV_CMD_MAV_CMD_MISSION_START: MAV_CMD = 300;
pub const MAV_CMD_MAV_CMD_COMPONENT_ARM_DISARM: MAV_CMD = 400;
pub const MAV_CMD_MAV_CMD_GET_HOME_POSITION: MAV_CMD = 410;
pub const MAV_CMD_MAV_CMD_START_RX_PAIR: MAV_CMD = 500;
pub const MAV_CMD_MAV_CMD_GET_MESSAGE_INTERVAL: MAV_CMD = 510;
pub const MAV_CMD_MAV_CMD_SET_MESSAGE_INTERVAL: MAV_CMD = 511;
pub const MAV_CMD_MAV_CMD_REQUEST_PROTOCOL_VERSION: MAV_CMD = 519;
pub const MAV_CMD_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES: MAV_CMD = 520;
pub const MAV_CMD_MAV_CMD_REQUEST_CAMERA_INFORMATION: MAV_CMD = 521;
pub const MAV_CMD_MAV_CMD_REQUEST_CAMERA_SETTINGS: MAV_CMD = 522;
pub const MAV_CMD_MAV_CMD_REQUEST_STORAGE_INFORMATION: MAV_CMD = 525;
pub const MAV_CMD_MAV_CMD_STORAGE_FORMAT: MAV_CMD = 526;
pub const MAV_CMD_MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS: MAV_CMD = 527;
pub const MAV_CMD_MAV_CMD_REQUEST_FLIGHT_INFORMATION: MAV_CMD = 528;
pub const MAV_CMD_MAV_CMD_RESET_CAMERA_SETTINGS: MAV_CMD = 529;
pub const MAV_CMD_MAV_CMD_SET_CAMERA_MODE: MAV_CMD = 530;
pub const MAV_CMD_MAV_CMD_IMAGE_START_CAPTURE: MAV_CMD = 2000;
pub const MAV_CMD_MAV_CMD_IMAGE_STOP_CAPTURE: MAV_CMD = 2001;
pub const MAV_CMD_MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE: MAV_CMD = 2002;
pub const MAV_CMD_MAV_CMD_DO_TRIGGER_CONTROL: MAV_CMD = 2003;
pub const MAV_CMD_MAV_CMD_VIDEO_START_CAPTURE: MAV_CMD = 2500;
pub const MAV_CMD_MAV_CMD_VIDEO_STOP_CAPTURE: MAV_CMD = 2501;
pub const MAV_CMD_MAV_CMD_VIDEO_START_STREAMING: MAV_CMD = 2502;
pub const MAV_CMD_MAV_CMD_VIDEO_STOP_STREAMING: MAV_CMD = 2503;
pub const MAV_CMD_MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION: MAV_CMD = 2504;
pub const MAV_CMD_MAV_CMD_LOGGING_START: MAV_CMD = 2510;
pub const MAV_CMD_MAV_CMD_LOGGING_STOP: MAV_CMD = 2511;
pub const MAV_CMD_MAV_CMD_AIRFRAME_CONFIGURATION: MAV_CMD = 2520;
pub const MAV_CMD_MAV_CMD_PANORAMA_CREATE: MAV_CMD = 2800;
pub const MAV_CMD_MAV_CMD_DO_VTOL_TRANSITION: MAV_CMD = 3000;
pub const MAV_CMD_MAV_CMD_ARM_AUTHORIZATION_REQUEST: MAV_CMD = 3001;
pub const MAV_CMD_MAV_CMD_SET_GUIDED_SUBMODE_STANDARD: MAV_CMD = 4000;
pub const MAV_CMD_MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE: MAV_CMD = 4001;
pub const MAV_CMD_MAV_CMD_CONDITION_GATE: MAV_CMD = 4501;
pub const MAV_CMD_MAV_CMD_NAV_FENCE_RETURN_POINT: MAV_CMD = 5000;
pub const MAV_CMD_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION: MAV_CMD = 5001;
pub const MAV_CMD_MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION: MAV_CMD = 5002;
pub const MAV_CMD_MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION: MAV_CMD = 5003;
pub const MAV_CMD_MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION: MAV_CMD = 5004;
pub const MAV_CMD_MAV_CMD_NAV_RALLY_POINT: MAV_CMD = 5100;
pub const MAV_CMD_MAV_CMD_UAVCAN_GET_NODE_INFO: MAV_CMD = 5200;
pub const MAV_CMD_MAV_CMD_PAYLOAD_PREPARE_DEPLOY: MAV_CMD = 30001;
pub const MAV_CMD_MAV_CMD_PAYLOAD_CONTROL_DEPLOY: MAV_CMD = 30002;
pub const MAV_CMD_MAV_CMD_WAYPOINT_USER_1: MAV_CMD = 31000;
pub const MAV_CMD_MAV_CMD_WAYPOINT_USER_2: MAV_CMD = 31001;
pub const MAV_CMD_MAV_CMD_WAYPOINT_USER_3: MAV_CMD = 31002;
pub const MAV_CMD_MAV_CMD_WAYPOINT_USER_4: MAV_CMD = 31003;
pub const MAV_CMD_MAV_CMD_WAYPOINT_USER_5: MAV_CMD = 31004;
pub const MAV_CMD_MAV_CMD_SPATIAL_USER_1: MAV_CMD = 31005;
pub const MAV_CMD_MAV_CMD_SPATIAL_USER_2: MAV_CMD = 31006;
pub const MAV_CMD_MAV_CMD_SPATIAL_USER_3: MAV_CMD = 31007;
pub const MAV_CMD_MAV_CMD_SPATIAL_USER_4: MAV_CMD = 31008;
pub const MAV_CMD_MAV_CMD_SPATIAL_USER_5: MAV_CMD = 31009;
pub const MAV_CMD_MAV_CMD_USER_1: MAV_CMD = 31010;
pub const MAV_CMD_MAV_CMD_USER_2: MAV_CMD = 31011;
pub const MAV_CMD_MAV_CMD_USER_3: MAV_CMD = 31012;
pub const MAV_CMD_MAV_CMD_USER_4: MAV_CMD = 31013;
pub const MAV_CMD_MAV_CMD_USER_5: MAV_CMD = 31014;
pub const MAV_CMD_MAV_CMD_ENUM_END: MAV_CMD = 31015;
pub type MAV_CMD = ::std::os::raw::c_uint;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_ALL: MAV_DATA_STREAM = 0;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_RAW_SENSORS: MAV_DATA_STREAM = 1;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_EXTENDED_STATUS: MAV_DATA_STREAM = 2;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_RC_CHANNELS: MAV_DATA_STREAM = 3;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_RAW_CONTROLLER: MAV_DATA_STREAM = 4;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_POSITION: MAV_DATA_STREAM = 6;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_EXTRA1: MAV_DATA_STREAM = 10;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_EXTRA2: MAV_DATA_STREAM = 11;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_EXTRA3: MAV_DATA_STREAM = 12;
pub const MAV_DATA_STREAM_MAV_DATA_STREAM_ENUM_END: MAV_DATA_STREAM = 13;
pub type MAV_DATA_STREAM = ::std::os::raw::c_uint;
pub const MAV_ROI_MAV_ROI_NONE: MAV_ROI = 0;
pub const MAV_ROI_MAV_ROI_WPNEXT: MAV_ROI = 1;
pub const MAV_ROI_MAV_ROI_WPINDEX: MAV_ROI = 2;
pub const MAV_ROI_MAV_ROI_LOCATION: MAV_ROI = 3;
pub const MAV_ROI_MAV_ROI_TARGET: MAV_ROI = 4;
pub const MAV_ROI_MAV_ROI_ENUM_END: MAV_ROI = 5;
pub type MAV_ROI = ::std::os::raw::c_uint;
pub const MAV_CMD_ACK_MAV_CMD_ACK_OK: MAV_CMD_ACK = 1;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_FAIL: MAV_CMD_ACK = 2;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_ACCESS_DENIED: MAV_CMD_ACK = 3;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_NOT_SUPPORTED: MAV_CMD_ACK = 4;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED: MAV_CMD_ACK = 5;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE: MAV_CMD_ACK = 6;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE: MAV_CMD_ACK = 7;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE: MAV_CMD_ACK = 8;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE: MAV_CMD_ACK = 9;
pub const MAV_CMD_ACK_MAV_CMD_ACK_ENUM_END: MAV_CMD_ACK = 10;
pub type MAV_CMD_ACK = ::std::os::raw::c_uint;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_UINT8: MAV_PARAM_TYPE = 1;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_INT8: MAV_PARAM_TYPE = 2;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_UINT16: MAV_PARAM_TYPE = 3;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_INT16: MAV_PARAM_TYPE = 4;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_UINT32: MAV_PARAM_TYPE = 5;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_INT32: MAV_PARAM_TYPE = 6;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_UINT64: MAV_PARAM_TYPE = 7;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_INT64: MAV_PARAM_TYPE = 8;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_REAL32: MAV_PARAM_TYPE = 9;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_REAL64: MAV_PARAM_TYPE = 10;
pub const MAV_PARAM_TYPE_MAV_PARAM_TYPE_ENUM_END: MAV_PARAM_TYPE = 11;
pub type MAV_PARAM_TYPE = ::std::os::raw::c_uint;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_UINT8: MAV_PARAM_EXT_TYPE = 1;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_INT8: MAV_PARAM_EXT_TYPE = 2;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_UINT16: MAV_PARAM_EXT_TYPE = 3;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_INT16: MAV_PARAM_EXT_TYPE = 4;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_UINT32: MAV_PARAM_EXT_TYPE = 5;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_INT32: MAV_PARAM_EXT_TYPE = 6;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_UINT64: MAV_PARAM_EXT_TYPE = 7;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_INT64: MAV_PARAM_EXT_TYPE = 8;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_REAL32: MAV_PARAM_EXT_TYPE = 9;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_REAL64: MAV_PARAM_EXT_TYPE = 10;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_CUSTOM: MAV_PARAM_EXT_TYPE = 11;
pub const MAV_PARAM_EXT_TYPE_MAV_PARAM_EXT_TYPE_ENUM_END: MAV_PARAM_EXT_TYPE = 12;
pub type MAV_PARAM_EXT_TYPE = ::std::os::raw::c_uint;
pub const MAV_RESULT_MAV_RESULT_ACCEPTED: MAV_RESULT = 0;
pub const MAV_RESULT_MAV_RESULT_TEMPORARILY_REJECTED: MAV_RESULT = 1;
pub const MAV_RESULT_MAV_RESULT_DENIED: MAV_RESULT = 2;
pub const MAV_RESULT_MAV_RESULT_UNSUPPORTED: MAV_RESULT = 3;
pub const MAV_RESULT_MAV_RESULT_FAILED: MAV_RESULT = 4;
pub const MAV_RESULT_MAV_RESULT_IN_PROGRESS: MAV_RESULT = 5;
pub const MAV_RESULT_MAV_RESULT_ENUM_END: MAV_RESULT = 6;
pub type MAV_RESULT = ::std::os::raw::c_uint;
pub const MAV_MISSION_RESULT_MAV_MISSION_ACCEPTED: MAV_MISSION_RESULT = 0;
pub const MAV_MISSION_RESULT_MAV_MISSION_ERROR: MAV_MISSION_RESULT = 1;
pub const MAV_MISSION_RESULT_MAV_MISSION_UNSUPPORTED_FRAME: MAV_MISSION_RESULT = 2;
pub const MAV_MISSION_RESULT_MAV_MISSION_UNSUPPORTED: MAV_MISSION_RESULT = 3;
pub const MAV_MISSION_RESULT_MAV_MISSION_NO_SPACE: MAV_MISSION_RESULT = 4;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID: MAV_MISSION_RESULT = 5;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM1: MAV_MISSION_RESULT = 6;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM2: MAV_MISSION_RESULT = 7;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM3: MAV_MISSION_RESULT = 8;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM4: MAV_MISSION_RESULT = 9;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM5_X: MAV_MISSION_RESULT = 10;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM6_Y: MAV_MISSION_RESULT = 11;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_PARAM7: MAV_MISSION_RESULT = 12;
pub const MAV_MISSION_RESULT_MAV_MISSION_INVALID_SEQUENCE: MAV_MISSION_RESULT = 13;
pub const MAV_MISSION_RESULT_MAV_MISSION_DENIED: MAV_MISSION_RESULT = 14;
pub const MAV_MISSION_RESULT_MAV_MISSION_RESULT_ENUM_END: MAV_MISSION_RESULT = 15;
pub type MAV_MISSION_RESULT = ::std::os::raw::c_uint;
pub const MAV_SEVERITY_MAV_SEVERITY_EMERGENCY: MAV_SEVERITY = 0;
pub const MAV_SEVERITY_MAV_SEVERITY_ALERT: MAV_SEVERITY = 1;
pub const MAV_SEVERITY_MAV_SEVERITY_CRITICAL: MAV_SEVERITY = 2;
pub const MAV_SEVERITY_MAV_SEVERITY_ERROR: MAV_SEVERITY = 3;
pub const MAV_SEVERITY_MAV_SEVERITY_WARNING: MAV_SEVERITY = 4;
pub const MAV_SEVERITY_MAV_SEVERITY_NOTICE: MAV_SEVERITY = 5;
pub const MAV_SEVERITY_MAV_SEVERITY_INFO: MAV_SEVERITY = 6;
pub const MAV_SEVERITY_MAV_SEVERITY_DEBUG: MAV_SEVERITY = 7;
pub const MAV_SEVERITY_MAV_SEVERITY_ENUM_END: MAV_SEVERITY = 8;
pub type MAV_SEVERITY = ::std::os::raw::c_uint;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_BRICK_VALID: MAV_POWER_STATUS = 1;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_SERVO_VALID: MAV_POWER_STATUS = 2;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_USB_CONNECTED: MAV_POWER_STATUS = 4;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_PERIPH_OVERCURRENT: MAV_POWER_STATUS = 8;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT: MAV_POWER_STATUS = 16;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_CHANGED: MAV_POWER_STATUS = 32;
pub const MAV_POWER_STATUS_MAV_POWER_STATUS_ENUM_END: MAV_POWER_STATUS = 33;
pub type MAV_POWER_STATUS = ::std::os::raw::c_uint;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_TELEM1: SERIAL_CONTROL_DEV = 0;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_TELEM2: SERIAL_CONTROL_DEV = 1;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_GPS1: SERIAL_CONTROL_DEV = 2;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_GPS2: SERIAL_CONTROL_DEV = 3;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_SHELL: SERIAL_CONTROL_DEV = 10;
pub const SERIAL_CONTROL_DEV_SERIAL_CONTROL_DEV_ENUM_END: SERIAL_CONTROL_DEV = 11;
pub type SERIAL_CONTROL_DEV = ::std::os::raw::c_uint;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_REPLY: SERIAL_CONTROL_FLAG = 1;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_RESPOND: SERIAL_CONTROL_FLAG = 2;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_EXCLUSIVE: SERIAL_CONTROL_FLAG = 4;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_BLOCKING: SERIAL_CONTROL_FLAG = 8;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_MULTI: SERIAL_CONTROL_FLAG = 16;
pub const SERIAL_CONTROL_FLAG_SERIAL_CONTROL_FLAG_ENUM_END: SERIAL_CONTROL_FLAG = 17;
pub type SERIAL_CONTROL_FLAG = ::std::os::raw::c_uint;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_LASER: MAV_DISTANCE_SENSOR = 0;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_ULTRASOUND: MAV_DISTANCE_SENSOR = 1;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_INFRARED: MAV_DISTANCE_SENSOR = 2;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_RADAR: MAV_DISTANCE_SENSOR = 3;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_UNKNOWN: MAV_DISTANCE_SENSOR = 4;
pub const MAV_DISTANCE_SENSOR_MAV_DISTANCE_SENSOR_ENUM_END: MAV_DISTANCE_SENSOR = 5;
pub type MAV_DISTANCE_SENSOR = ::std::os::raw::c_uint;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_NONE: MAV_SENSOR_ORIENTATION = 0;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_45: MAV_SENSOR_ORIENTATION = 1;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_90: MAV_SENSOR_ORIENTATION = 2;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_135: MAV_SENSOR_ORIENTATION = 3;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_180: MAV_SENSOR_ORIENTATION = 4;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_225: MAV_SENSOR_ORIENTATION = 5;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_270: MAV_SENSOR_ORIENTATION = 6;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_YAW_315: MAV_SENSOR_ORIENTATION = 7;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180: MAV_SENSOR_ORIENTATION = 8;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_45: MAV_SENSOR_ORIENTATION = 9;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_90: MAV_SENSOR_ORIENTATION = 10;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_135: MAV_SENSOR_ORIENTATION = 11;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_PITCH_180: MAV_SENSOR_ORIENTATION = 12;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_225: MAV_SENSOR_ORIENTATION = 13;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_270: MAV_SENSOR_ORIENTATION = 14;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_YAW_315: MAV_SENSOR_ORIENTATION = 15;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90: MAV_SENSOR_ORIENTATION = 16;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_YAW_45: MAV_SENSOR_ORIENTATION = 17;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_YAW_90: MAV_SENSOR_ORIENTATION = 18;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_YAW_135: MAV_SENSOR_ORIENTATION = 19;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270: MAV_SENSOR_ORIENTATION = 20;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_YAW_45: MAV_SENSOR_ORIENTATION = 21;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_YAW_90: MAV_SENSOR_ORIENTATION = 22;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_YAW_135: MAV_SENSOR_ORIENTATION = 23;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_PITCH_90: MAV_SENSOR_ORIENTATION = 24;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_PITCH_270: MAV_SENSOR_ORIENTATION = 25;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_PITCH_180_YAW_90: MAV_SENSOR_ORIENTATION = 26;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_PITCH_180_YAW_270: MAV_SENSOR_ORIENTATION = 27;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_PITCH_90: MAV_SENSOR_ORIENTATION = 28;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_PITCH_90: MAV_SENSOR_ORIENTATION = 29;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_PITCH_90: MAV_SENSOR_ORIENTATION = 30;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_PITCH_180: MAV_SENSOR_ORIENTATION = 31;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_PITCH_180: MAV_SENSOR_ORIENTATION = 32;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_PITCH_270: MAV_SENSOR_ORIENTATION = 33;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_180_PITCH_270: MAV_SENSOR_ORIENTATION = 34;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_270_PITCH_270: MAV_SENSOR_ORIENTATION = 35;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90: MAV_SENSOR_ORIENTATION = 36;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_90_YAW_270: MAV_SENSOR_ORIENTATION = 37;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ROTATION_ROLL_315_PITCH_315_YAW_315: MAV_SENSOR_ORIENTATION = 38;
pub const MAV_SENSOR_ORIENTATION_MAV_SENSOR_ORIENTATION_ENUM_END: MAV_SENSOR_ORIENTATION = 39;
pub type MAV_SENSOR_ORIENTATION = ::std::os::raw::c_uint;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT: MAV_PROTOCOL_CAPABILITY = 1;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT: MAV_PROTOCOL_CAPABILITY = 2;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_MISSION_INT: MAV_PROTOCOL_CAPABILITY = 4;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_COMMAND_INT: MAV_PROTOCOL_CAPABILITY = 8;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_PARAM_UNION: MAV_PROTOCOL_CAPABILITY = 16;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_FTP: MAV_PROTOCOL_CAPABILITY = 32;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET: MAV_PROTOCOL_CAPABILITY = 64;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED: MAV_PROTOCOL_CAPABILITY = 128;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT: MAV_PROTOCOL_CAPABILITY = 256;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_TERRAIN: MAV_PROTOCOL_CAPABILITY = 512;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET: MAV_PROTOCOL_CAPABILITY = 1024;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION: MAV_PROTOCOL_CAPABILITY = 2048;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION: MAV_PROTOCOL_CAPABILITY = 4096;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_MAVLINK2: MAV_PROTOCOL_CAPABILITY = 8192;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_MISSION_FENCE: MAV_PROTOCOL_CAPABILITY = 16384;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_MISSION_RALLY: MAV_PROTOCOL_CAPABILITY = 32768;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION: MAV_PROTOCOL_CAPABILITY = 65536;
pub const MAV_PROTOCOL_CAPABILITY_MAV_PROTOCOL_CAPABILITY_ENUM_END: MAV_PROTOCOL_CAPABILITY = 65537;
pub type MAV_PROTOCOL_CAPABILITY = ::std::os::raw::c_uint;
pub const MAV_MISSION_TYPE_MAV_MISSION_TYPE_MISSION: MAV_MISSION_TYPE = 0;
pub const MAV_MISSION_TYPE_MAV_MISSION_TYPE_FENCE: MAV_MISSION_TYPE = 1;
pub const MAV_MISSION_TYPE_MAV_MISSION_TYPE_RALLY: MAV_MISSION_TYPE = 2;
pub const MAV_MISSION_TYPE_MAV_MISSION_TYPE_ALL: MAV_MISSION_TYPE = 255;
pub const MAV_MISSION_TYPE_MAV_MISSION_TYPE_ENUM_END: MAV_MISSION_TYPE = 256;
pub type MAV_MISSION_TYPE = ::std::os::raw::c_uint;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_NAIVE: MAV_ESTIMATOR_TYPE = 1;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_VISION: MAV_ESTIMATOR_TYPE = 2;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_VIO: MAV_ESTIMATOR_TYPE = 3;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_GPS: MAV_ESTIMATOR_TYPE = 4;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_GPS_INS: MAV_ESTIMATOR_TYPE = 5;
pub const MAV_ESTIMATOR_TYPE_MAV_ESTIMATOR_TYPE_ENUM_END: MAV_ESTIMATOR_TYPE = 6;
pub type MAV_ESTIMATOR_TYPE = ::std::os::raw::c_uint;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_UNKNOWN: MAV_BATTERY_TYPE = 0;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_LIPO: MAV_BATTERY_TYPE = 1;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_LIFE: MAV_BATTERY_TYPE = 2;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_LION: MAV_BATTERY_TYPE = 3;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_NIMH: MAV_BATTERY_TYPE = 4;
pub const MAV_BATTERY_TYPE_MAV_BATTERY_TYPE_ENUM_END: MAV_BATTERY_TYPE = 5;
pub type MAV_BATTERY_TYPE = ::std::os::raw::c_uint;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_FUNCTION_UNKNOWN: MAV_BATTERY_FUNCTION = 0;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_FUNCTION_ALL: MAV_BATTERY_FUNCTION = 1;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_FUNCTION_PROPULSION: MAV_BATTERY_FUNCTION = 2;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_FUNCTION_AVIONICS: MAV_BATTERY_FUNCTION = 3;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_TYPE_PAYLOAD: MAV_BATTERY_FUNCTION = 4;
pub const MAV_BATTERY_FUNCTION_MAV_BATTERY_FUNCTION_ENUM_END: MAV_BATTERY_FUNCTION = 5;
pub type MAV_BATTERY_FUNCTION = ::std::os::raw::c_uint;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_UNDEFINED: MAV_VTOL_STATE = 0;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_TRANSITION_TO_FW: MAV_VTOL_STATE = 1;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_TRANSITION_TO_MC: MAV_VTOL_STATE = 2;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_MC: MAV_VTOL_STATE = 3;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_FW: MAV_VTOL_STATE = 4;
pub const MAV_VTOL_STATE_MAV_VTOL_STATE_ENUM_END: MAV_VTOL_STATE = 5;
pub type MAV_VTOL_STATE = ::std::os::raw::c_uint;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_UNDEFINED: MAV_LANDED_STATE = 0;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_ON_GROUND: MAV_LANDED_STATE = 1;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_IN_AIR: MAV_LANDED_STATE = 2;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_TAKEOFF: MAV_LANDED_STATE = 3;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_LANDING: MAV_LANDED_STATE = 4;
pub const MAV_LANDED_STATE_MAV_LANDED_STATE_ENUM_END: MAV_LANDED_STATE = 5;
pub type MAV_LANDED_STATE = ::std::os::raw::c_uint;
pub const ADSB_ALTITUDE_TYPE_ADSB_ALTITUDE_TYPE_PRESSURE_QNH: ADSB_ALTITUDE_TYPE = 0;
pub const ADSB_ALTITUDE_TYPE_ADSB_ALTITUDE_TYPE_GEOMETRIC: ADSB_ALTITUDE_TYPE = 1;
pub const ADSB_ALTITUDE_TYPE_ADSB_ALTITUDE_TYPE_ENUM_END: ADSB_ALTITUDE_TYPE = 2;
pub type ADSB_ALTITUDE_TYPE = ::std::os::raw::c_uint;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_NO_INFO: ADSB_EMITTER_TYPE = 0;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_LIGHT: ADSB_EMITTER_TYPE = 1;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_SMALL: ADSB_EMITTER_TYPE = 2;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_LARGE: ADSB_EMITTER_TYPE = 3;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE: ADSB_EMITTER_TYPE = 4;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_HEAVY: ADSB_EMITTER_TYPE = 5;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_HIGHLY_MANUV: ADSB_EMITTER_TYPE = 6;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_ROTOCRAFT: ADSB_EMITTER_TYPE = 7;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_UNASSIGNED: ADSB_EMITTER_TYPE = 8;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_GLIDER: ADSB_EMITTER_TYPE = 9;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_LIGHTER_AIR: ADSB_EMITTER_TYPE = 10;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_PARACHUTE: ADSB_EMITTER_TYPE = 11;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_ULTRA_LIGHT: ADSB_EMITTER_TYPE = 12;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_UNASSIGNED2: ADSB_EMITTER_TYPE = 13;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_UAV: ADSB_EMITTER_TYPE = 14;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_SPACE: ADSB_EMITTER_TYPE = 15;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_UNASSGINED3: ADSB_EMITTER_TYPE = 16;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_EMERGENCY_SURFACE: ADSB_EMITTER_TYPE = 17;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_SERVICE_SURFACE: ADSB_EMITTER_TYPE = 18;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_POINT_OBSTACLE: ADSB_EMITTER_TYPE = 19;
pub const ADSB_EMITTER_TYPE_ADSB_EMITTER_TYPE_ENUM_END: ADSB_EMITTER_TYPE = 20;
pub type ADSB_EMITTER_TYPE = ::std::os::raw::c_uint;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_COORDS: ADSB_FLAGS = 1;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_ALTITUDE: ADSB_FLAGS = 2;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_HEADING: ADSB_FLAGS = 4;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_VELOCITY: ADSB_FLAGS = 8;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_CALLSIGN: ADSB_FLAGS = 16;
pub const ADSB_FLAGS_ADSB_FLAGS_VALID_SQUAWK: ADSB_FLAGS = 32;
pub const ADSB_FLAGS_ADSB_FLAGS_SIMULATED: ADSB_FLAGS = 64;
pub const ADSB_FLAGS_ADSB_FLAGS_ENUM_END: ADSB_FLAGS = 65;
pub type ADSB_FLAGS = ::std::os::raw::c_uint;
pub const MAV_DO_REPOSITION_FLAGS_MAV_DO_REPOSITION_FLAGS_CHANGE_MODE: MAV_DO_REPOSITION_FLAGS = 1;
pub const MAV_DO_REPOSITION_FLAGS_MAV_DO_REPOSITION_FLAGS_ENUM_END: MAV_DO_REPOSITION_FLAGS = 2;
pub type MAV_DO_REPOSITION_FLAGS = ::std::os::raw::c_uint;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_ATTITUDE: ESTIMATOR_STATUS_FLAGS = 1;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_VELOCITY_HORIZ: ESTIMATOR_STATUS_FLAGS = 2;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_VELOCITY_VERT: ESTIMATOR_STATUS_FLAGS = 4;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_POS_HORIZ_REL: ESTIMATOR_STATUS_FLAGS = 8;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_POS_HORIZ_ABS: ESTIMATOR_STATUS_FLAGS = 16;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_POS_VERT_ABS: ESTIMATOR_STATUS_FLAGS = 32;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_POS_VERT_AGL: ESTIMATOR_STATUS_FLAGS = 64;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_CONST_POS_MODE: ESTIMATOR_STATUS_FLAGS = 128;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_PRED_POS_HORIZ_REL: ESTIMATOR_STATUS_FLAGS = 256;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_PRED_POS_HORIZ_ABS: ESTIMATOR_STATUS_FLAGS = 512;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_GPS_GLITCH: ESTIMATOR_STATUS_FLAGS = 1024;
pub const ESTIMATOR_STATUS_FLAGS_ESTIMATOR_STATUS_FLAGS_ENUM_END: ESTIMATOR_STATUS_FLAGS = 1025;
pub type ESTIMATOR_STATUS_FLAGS = ::std::os::raw::c_uint;
pub const MOTOR_TEST_ORDER_MOTOR_TEST_ORDER_DEFAULT: MOTOR_TEST_ORDER = 0;
pub const MOTOR_TEST_ORDER_MOTOR_TEST_ORDER_SEQUENCE: MOTOR_TEST_ORDER = 1;
pub const MOTOR_TEST_ORDER_MOTOR_TEST_ORDER_BOARD: MOTOR_TEST_ORDER = 2;
pub const MOTOR_TEST_ORDER_MOTOR_TEST_ORDER_ENUM_END: MOTOR_TEST_ORDER = 3;
pub type MOTOR_TEST_ORDER = ::std::os::raw::c_uint;
pub const MOTOR_TEST_THROTTLE_TYPE_MOTOR_TEST_THROTTLE_PERCENT: MOTOR_TEST_THROTTLE_TYPE = 0;
pub const MOTOR_TEST_THROTTLE_TYPE_MOTOR_TEST_THROTTLE_PWM: MOTOR_TEST_THROTTLE_TYPE = 1;
pub const MOTOR_TEST_THROTTLE_TYPE_MOTOR_TEST_THROTTLE_PILOT: MOTOR_TEST_THROTTLE_TYPE = 2;
pub const MOTOR_TEST_THROTTLE_TYPE_MOTOR_TEST_COMPASS_CAL: MOTOR_TEST_THROTTLE_TYPE = 3;
pub const MOTOR_TEST_THROTTLE_TYPE_MOTOR_TEST_THROTTLE_TYPE_ENUM_END: MOTOR_TEST_THROTTLE_TYPE = 4;
pub type MOTOR_TEST_THROTTLE_TYPE = ::std::os::raw::c_uint;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_ALT: GPS_INPUT_IGNORE_FLAGS = 1;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_HDOP: GPS_INPUT_IGNORE_FLAGS = 2;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_VDOP: GPS_INPUT_IGNORE_FLAGS = 4;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_VEL_HORIZ: GPS_INPUT_IGNORE_FLAGS = 8;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_VEL_VERT: GPS_INPUT_IGNORE_FLAGS = 16;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY: GPS_INPUT_IGNORE_FLAGS = 32;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY: GPS_INPUT_IGNORE_FLAGS = 64;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY: GPS_INPUT_IGNORE_FLAGS = 128;
pub const GPS_INPUT_IGNORE_FLAGS_GPS_INPUT_IGNORE_FLAGS_ENUM_END: GPS_INPUT_IGNORE_FLAGS = 129;
pub type GPS_INPUT_IGNORE_FLAGS = ::std::os::raw::c_uint;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_NONE: MAV_COLLISION_ACTION = 0;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_REPORT: MAV_COLLISION_ACTION = 1;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_ASCEND_OR_DESCEND: MAV_COLLISION_ACTION = 2;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_MOVE_HORIZONTALLY: MAV_COLLISION_ACTION = 3;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_MOVE_PERPENDICULAR: MAV_COLLISION_ACTION = 4;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_RTL: MAV_COLLISION_ACTION = 5;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_HOVER: MAV_COLLISION_ACTION = 6;
pub const MAV_COLLISION_ACTION_MAV_COLLISION_ACTION_ENUM_END: MAV_COLLISION_ACTION = 7;
pub type MAV_COLLISION_ACTION = ::std::os::raw::c_uint;
pub const MAV_COLLISION_THREAT_LEVEL_MAV_COLLISION_THREAT_LEVEL_NONE: MAV_COLLISION_THREAT_LEVEL = 0;
pub const MAV_COLLISION_THREAT_LEVEL_MAV_COLLISION_THREAT_LEVEL_LOW: MAV_COLLISION_THREAT_LEVEL = 1;
pub const MAV_COLLISION_THREAT_LEVEL_MAV_COLLISION_THREAT_LEVEL_HIGH: MAV_COLLISION_THREAT_LEVEL = 2;
pub const MAV_COLLISION_THREAT_LEVEL_MAV_COLLISION_THREAT_LEVEL_ENUM_END: MAV_COLLISION_THREAT_LEVEL = 3;
pub type MAV_COLLISION_THREAT_LEVEL = ::std::os::raw::c_uint;
pub const MAV_COLLISION_SRC_MAV_COLLISION_SRC_ADSB: MAV_COLLISION_SRC = 0;
pub const MAV_COLLISION_SRC_MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT: MAV_COLLISION_SRC = 1;
pub const MAV_COLLISION_SRC_MAV_COLLISION_SRC_ENUM_END: MAV_COLLISION_SRC = 2;
pub type MAV_COLLISION_SRC = ::std::os::raw::c_uint;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_NO_GPS: GPS_FIX_TYPE = 0;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_NO_FIX: GPS_FIX_TYPE = 1;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_2D_FIX: GPS_FIX_TYPE = 2;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_3D_FIX: GPS_FIX_TYPE = 3;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_DGPS: GPS_FIX_TYPE = 4;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_RTK_FLOAT: GPS_FIX_TYPE = 5;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_RTK_FIXED: GPS_FIX_TYPE = 6;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_STATIC: GPS_FIX_TYPE = 7;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_PPP: GPS_FIX_TYPE = 8;
pub const GPS_FIX_TYPE_GPS_FIX_TYPE_ENUM_END: GPS_FIX_TYPE = 9;
pub type GPS_FIX_TYPE = ::std::os::raw::c_uint;
pub const LANDING_TARGET_TYPE_LANDING_TARGET_TYPE_LIGHT_BEACON: LANDING_TARGET_TYPE = 0;
pub const LANDING_TARGET_TYPE_LANDING_TARGET_TYPE_RADIO_BEACON: LANDING_TARGET_TYPE = 1;
pub const LANDING_TARGET_TYPE_LANDING_TARGET_TYPE_VISION_FIDUCIAL: LANDING_TARGET_TYPE = 2;
pub const LANDING_TARGET_TYPE_LANDING_TARGET_TYPE_VISION_OTHER: LANDING_TARGET_TYPE = 3;
pub const LANDING_TARGET_TYPE_LANDING_TARGET_TYPE_ENUM_END: LANDING_TARGET_TYPE = 4;
pub type LANDING_TARGET_TYPE = ::std::os::raw::c_uint;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT: VTOL_TRANSITION_HEADING = 0;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_NEXT_WAYPOINT: VTOL_TRANSITION_HEADING = 1;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_TAKEOFF: VTOL_TRANSITION_HEADING = 2;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_SPECIFIED: VTOL_TRANSITION_HEADING = 3;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_ANY: VTOL_TRANSITION_HEADING = 4;
pub const VTOL_TRANSITION_HEADING_VTOL_TRANSITION_HEADING_ENUM_END: VTOL_TRANSITION_HEADING = 5;
pub type VTOL_TRANSITION_HEADING = ::std::os::raw::c_uint;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_CAPTURE_VIDEO: CAMERA_CAP_FLAGS = 1;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_CAPTURE_IMAGE: CAMERA_CAP_FLAGS = 2;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_HAS_MODES: CAMERA_CAP_FLAGS = 4;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE: CAMERA_CAP_FLAGS = 8;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE: CAMERA_CAP_FLAGS = 16;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE: CAMERA_CAP_FLAGS = 32;
pub const CAMERA_CAP_FLAGS_CAMERA_CAP_FLAGS_ENUM_END: CAMERA_CAP_FLAGS = 33;
pub type CAMERA_CAP_FLAGS = ::std::os::raw::c_uint;
pub const PARAM_ACK_PARAM_ACK_ACCEPTED: PARAM_ACK = 0;
pub const PARAM_ACK_PARAM_ACK_VALUE_UNSUPPORTED: PARAM_ACK = 1;
pub const PARAM_ACK_PARAM_ACK_FAILED: PARAM_ACK = 2;
pub const PARAM_ACK_PARAM_ACK_IN_PROGRESS: PARAM_ACK = 3;
pub const PARAM_ACK_PARAM_ACK_ENUM_END: PARAM_ACK = 4;
pub type PARAM_ACK = ::std::os::raw::c_uint;
pub const CAMERA_MODE_CAMERA_MODE_IMAGE: CAMERA_MODE = 0;
pub const CAMERA_MODE_CAMERA_MODE_VIDEO: CAMERA_MODE = 1;
pub const CAMERA_MODE_CAMERA_MODE_IMAGE_SURVEY: CAMERA_MODE = 2;
pub const CAMERA_MODE_CAMERA_MODE_ENUM_END: CAMERA_MODE = 3;
pub type CAMERA_MODE = ::std::os::raw::c_uint;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_GENERIC: MAV_ARM_AUTH_DENIED_REASON = 0;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_NONE: MAV_ARM_AUTH_DENIED_REASON = 1;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT: MAV_ARM_AUTH_DENIED_REASON = 2;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_TIMEOUT: MAV_ARM_AUTH_DENIED_REASON = 3;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE: MAV_ARM_AUTH_DENIED_REASON = 4;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER: MAV_ARM_AUTH_DENIED_REASON = 5;
pub const MAV_ARM_AUTH_DENIED_REASON_MAV_ARM_AUTH_DENIED_REASON_ENUM_END: MAV_ARM_AUTH_DENIED_REASON = 6;
pub type MAV_ARM_AUTH_DENIED_REASON = ::std::os::raw::c_uint;
pub const RTK_BASELINE_COORDINATE_SYSTEM_RTK_BASELINE_COORDINATE_SYSTEM_ECEF: RTK_BASELINE_COORDINATE_SYSTEM = 0;
pub const RTK_BASELINE_COORDINATE_SYSTEM_RTK_BASELINE_COORDINATE_SYSTEM_NED: RTK_BASELINE_COORDINATE_SYSTEM = 1;
pub const RTK_BASELINE_COORDINATE_SYSTEM_RTK_BASELINE_COORDINATE_SYSTEM_ENUM_END: RTK_BASELINE_COORDINATE_SYSTEM = 2;
pub type RTK_BASELINE_COORDINATE_SYSTEM = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_heartbeat_t {
    pub custom_mode: u32,
    pub type_: u8,
    pub autopilot: u8,
    pub base_mode: u8,
    pub system_status: u8,
    pub mavlink_version: u8,
}
#[test]
fn bindgen_test_layout___mavlink_heartbeat_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_heartbeat_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_heartbeat_t>(),
        9usize,
        concat!("Size of: ", stringify!(__mavlink_heartbeat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_heartbeat_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_heartbeat_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(custom_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autopilot) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(autopilot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_mode) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(base_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_status) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(system_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mavlink_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_heartbeat_t),
            "::",
            stringify!(mavlink_version)
        )
    );
}
pub type mavlink_heartbeat_t = __mavlink_heartbeat_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_sys_status_t {
    pub onboard_control_sensors_present: u32,
    pub onboard_control_sensors_enabled: u32,
    pub onboard_control_sensors_health: u32,
    pub load: u16,
    pub voltage_battery: u16,
    pub current_battery: i16,
    pub drop_rate_comm: u16,
    pub errors_comm: u16,
    pub errors_count1: u16,
    pub errors_count2: u16,
    pub errors_count3: u16,
    pub errors_count4: u16,
    pub battery_remaining: i8,
}
#[test]
fn bindgen_test_layout___mavlink_sys_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_sys_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_sys_status_t>(),
        31usize,
        concat!("Size of: ", stringify!(__mavlink_sys_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_sys_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_sys_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onboard_control_sensors_present) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(onboard_control_sensors_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onboard_control_sensors_enabled) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(onboard_control_sensors_enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).onboard_control_sensors_health) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(onboard_control_sensors_health)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voltage_battery) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(voltage_battery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_battery) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(current_battery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop_rate_comm) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(drop_rate_comm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors_comm) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(errors_comm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors_count1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(errors_count1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors_count2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(errors_count2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors_count3) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(errors_count3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errors_count4) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(errors_count4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).battery_remaining) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sys_status_t),
            "::",
            stringify!(battery_remaining)
        )
    );
}
pub type mavlink_sys_status_t = __mavlink_sys_status_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_system_time_t {
    pub time_unix_usec: u64,
    pub time_boot_ms: u32,
}
#[test]
fn bindgen_test_layout___mavlink_system_time_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_system_time_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_system_time_t>(),
        12usize,
        concat!("Size of: ", stringify!(__mavlink_system_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_system_time_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_system_time_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_unix_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_system_time_t),
            "::",
            stringify!(time_unix_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_system_time_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
}
pub type mavlink_system_time_t = __mavlink_system_time_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_ping_t {
    pub time_usec: u64,
    pub seq: u32,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_ping_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_ping_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_ping_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_ping_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_ping_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_ping_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_ping_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__mavlink_ping_t), "::", stringify!(seq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_ping_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_ping_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_ping_t = __mavlink_ping_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_change_operator_control_t {
    pub target_system: u8,
    pub control_request: u8,
    pub version: u8,
    pub passkey: [::std::os::raw::c_char; 25usize],
}
#[test]
fn bindgen_test_layout___mavlink_change_operator_control_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_change_operator_control_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_change_operator_control_t>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_change_operator_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_change_operator_control_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_change_operator_control_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control_request) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_t),
            "::",
            stringify!(control_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passkey) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_t),
            "::",
            stringify!(passkey)
        )
    );
}
pub type mavlink_change_operator_control_t = __mavlink_change_operator_control_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_change_operator_control_ack_t {
    pub gcs_system_id: u8,
    pub control_request: u8,
    pub ack: u8,
}
#[test]
fn bindgen_test_layout___mavlink_change_operator_control_ack_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_change_operator_control_ack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_change_operator_control_ack_t>(),
        3usize,
        concat!("Size of: ", stringify!(__mavlink_change_operator_control_ack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_change_operator_control_ack_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_change_operator_control_ack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcs_system_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_ack_t),
            "::",
            stringify!(gcs_system_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).control_request) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_ack_t),
            "::",
            stringify!(control_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ack) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_change_operator_control_ack_t),
            "::",
            stringify!(ack)
        )
    );
}
pub type mavlink_change_operator_control_ack_t = __mavlink_change_operator_control_ack_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_auth_key_t {
    pub key: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___mavlink_auth_key_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_auth_key_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_auth_key_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_auth_key_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_auth_key_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_auth_key_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_auth_key_t),
            "::",
            stringify!(key)
        )
    );
}
pub type mavlink_auth_key_t = __mavlink_auth_key_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_mode_t {
    pub custom_mode: u32,
    pub target_system: u8,
    pub base_mode: u8,
}
#[test]
fn bindgen_test_layout___mavlink_set_mode_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_mode_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_mode_t>(),
        6usize,
        concat!("Size of: ", stringify!(__mavlink_set_mode_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_mode_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_mode_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_mode_t),
            "::",
            stringify!(custom_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_mode_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_mode) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_mode_t),
            "::",
            stringify!(base_mode)
        )
    );
}
pub type mavlink_set_mode_t = __mavlink_set_mode_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_request_read_t {
    pub param_index: i16,
    pub target_system: u8,
    pub target_component: u8,
    pub param_id: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___mavlink_param_request_read_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_request_read_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_request_read_t>(),
        20usize,
        concat!("Size of: ", stringify!(__mavlink_param_request_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_request_read_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_request_read_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_read_t),
            "::",
            stringify!(param_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_read_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_read_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_read_t),
            "::",
            stringify!(param_id)
        )
    );
}
pub type mavlink_param_request_read_t = __mavlink_param_request_read_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_request_list_t {
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_request_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_request_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_request_list_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_param_request_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_request_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_request_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_request_list_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_param_request_list_t = __mavlink_param_request_list_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_value_t {
    pub param_value: f32,
    pub param_count: u16,
    pub param_index: u16,
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub param_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_value_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_value_t>(),
        25usize,
        concat!("Size of: ", stringify!(__mavlink_param_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_value_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_value_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_value_t),
            "::",
            stringify!(param_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_value_t),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_index) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_value_t),
            "::",
            stringify!(param_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_value_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_value_t),
            "::",
            stringify!(param_type)
        )
    );
}
pub type mavlink_param_value_t = __mavlink_param_value_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_set_t {
    pub param_value: f32,
    pub target_system: u8,
    pub target_component: u8,
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub param_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_set_t>(),
        23usize,
        concat!("Size of: ", stringify!(__mavlink_param_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_set_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_set_t),
            "::",
            stringify!(param_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_set_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_set_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_set_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_set_t),
            "::",
            stringify!(param_type)
        )
    );
}
pub type mavlink_param_set_t = __mavlink_param_set_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps_raw_int_t {
    pub time_usec: u64,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub eph: u16,
    pub epv: u16,
    pub vel: u16,
    pub cog: u16,
    pub fix_type: u8,
    pub satellites_visible: u8,
    pub alt_ellipsoid: i32,
    pub h_acc: u32,
    pub v_acc: u32,
    pub vel_acc: u32,
    pub hdg_acc: u32,
}
#[test]
fn bindgen_test_layout___mavlink_gps_raw_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_raw_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_raw_int_t>(),
        50usize,
        concat!("Size of: ", stringify!(__mavlink_gps_raw_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_raw_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_raw_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eph) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(eph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epv) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(epv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cog) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(cog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_type) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(fix_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellites_visible) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(satellites_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_ellipsoid) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(alt_ellipsoid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h_acc) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(h_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v_acc) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(v_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel_acc) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(vel_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdg_acc) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_raw_int_t),
            "::",
            stringify!(hdg_acc)
        )
    );
}
pub type mavlink_gps_raw_int_t = __mavlink_gps_raw_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps_status_t {
    pub satellites_visible: u8,
    pub satellite_prn: [u8; 20usize],
    pub satellite_used: [u8; 20usize],
    pub satellite_elevation: [u8; 20usize],
    pub satellite_azimuth: [u8; 20usize],
    pub satellite_snr: [u8; 20usize],
}
#[test]
fn bindgen_test_layout___mavlink_gps_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_status_t>(),
        101usize,
        concat!("Size of: ", stringify!(__mavlink_gps_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellites_visible) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellites_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellite_prn) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellite_prn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellite_used) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellite_used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellite_elevation) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellite_elevation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellite_azimuth) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellite_azimuth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellite_snr) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_status_t),
            "::",
            stringify!(satellite_snr)
        )
    );
}
pub type mavlink_gps_status_t = __mavlink_gps_status_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_imu_t {
    pub time_boot_ms: u32,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
    pub xgyro: i16,
    pub ygyro: i16,
    pub zgyro: i16,
    pub xmag: i16,
    pub ymag: i16,
    pub zmag: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_imu_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_imu_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_imu_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_imu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_imu_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_imu_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu_t),
            "::",
            stringify!(zmag)
        )
    );
}
pub type mavlink_scaled_imu_t = __mavlink_scaled_imu_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_raw_imu_t {
    pub time_usec: u64,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
    pub xgyro: i16,
    pub ygyro: i16,
    pub zgyro: i16,
    pub xmag: i16,
    pub ymag: i16,
    pub zmag: i16,
}
#[test]
fn bindgen_test_layout___mavlink_raw_imu_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_raw_imu_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_raw_imu_t>(),
        26usize,
        concat!("Size of: ", stringify!(__mavlink_raw_imu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_raw_imu_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_raw_imu_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_imu_t),
            "::",
            stringify!(zmag)
        )
    );
}
pub type mavlink_raw_imu_t = __mavlink_raw_imu_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_raw_pressure_t {
    pub time_usec: u64,
    pub press_abs: i16,
    pub press_diff1: i16,
    pub press_diff2: i16,
    pub temperature: i16,
}
#[test]
fn bindgen_test_layout___mavlink_raw_pressure_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_raw_pressure_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_raw_pressure_t>(),
        16usize,
        concat!("Size of: ", stringify!(__mavlink_raw_pressure_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_raw_pressure_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_raw_pressure_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_pressure_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_abs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_pressure_t),
            "::",
            stringify!(press_abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_diff1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_pressure_t),
            "::",
            stringify!(press_diff1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_diff2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_pressure_t),
            "::",
            stringify!(press_diff2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_raw_pressure_t),
            "::",
            stringify!(temperature)
        )
    );
}
pub type mavlink_raw_pressure_t = __mavlink_raw_pressure_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_pressure_t {
    pub time_boot_ms: u32,
    pub press_abs: f32,
    pub press_diff: f32,
    pub temperature: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_pressure_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_pressure_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_pressure_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_pressure_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_pressure_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_pressure_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_abs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure_t),
            "::",
            stringify!(press_abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_diff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure_t),
            "::",
            stringify!(press_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure_t),
            "::",
            stringify!(temperature)
        )
    );
}
pub type mavlink_scaled_pressure_t = __mavlink_scaled_pressure_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_attitude_t {
    pub time_boot_ms: u32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub rollspeed: f32,
    pub pitchspeed: f32,
    pub yawspeed: f32,
}
#[test]
fn bindgen_test_layout___mavlink_attitude_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_attitude_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_attitude_t>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_attitude_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_attitude_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_attitude_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rollspeed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(rollspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchspeed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(pitchspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yawspeed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_t),
            "::",
            stringify!(yawspeed)
        )
    );
}
pub type mavlink_attitude_t = __mavlink_attitude_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_attitude_quaternion_t {
    pub time_boot_ms: u32,
    pub q1: f32,
    pub q2: f32,
    pub q3: f32,
    pub q4: f32,
    pub rollspeed: f32,
    pub pitchspeed: f32,
    pub yawspeed: f32,
}
#[test]
fn bindgen_test_layout___mavlink_attitude_quaternion_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_attitude_quaternion_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_attitude_quaternion_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_attitude_quaternion_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_attitude_quaternion_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_attitude_quaternion_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(q1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(q2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(q3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(q4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rollspeed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(rollspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchspeed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(pitchspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yawspeed) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_t),
            "::",
            stringify!(yawspeed)
        )
    );
}
pub type mavlink_attitude_quaternion_t = __mavlink_attitude_quaternion_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_local_position_ned_t {
    pub time_boot_ms: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
}
#[test]
fn bindgen_test_layout___mavlink_local_position_ned_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_local_position_ned_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_local_position_ned_t>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_local_position_ned_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_local_position_ned_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_local_position_ned_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_t),
            "::",
            stringify!(vz)
        )
    );
}
pub type mavlink_local_position_ned_t = __mavlink_local_position_ned_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_global_position_int_t {
    pub time_boot_ms: u32,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub relative_alt: i32,
    pub vx: i16,
    pub vy: i16,
    pub vz: i16,
    pub hdg: u16,
}
#[test]
fn bindgen_test_layout___mavlink_global_position_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_global_position_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_global_position_int_t>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_global_position_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_global_position_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_global_position_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative_alt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(relative_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdg) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_t),
            "::",
            stringify!(hdg)
        )
    );
}
pub type mavlink_global_position_int_t = __mavlink_global_position_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_rc_channels_scaled_t {
    pub time_boot_ms: u32,
    pub chan1_scaled: i16,
    pub chan2_scaled: i16,
    pub chan3_scaled: i16,
    pub chan4_scaled: i16,
    pub chan5_scaled: i16,
    pub chan6_scaled: i16,
    pub chan7_scaled: i16,
    pub chan8_scaled: i16,
    pub port: u8,
    pub rssi: u8,
}
#[test]
fn bindgen_test_layout___mavlink_rc_channels_scaled_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_rc_channels_scaled_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_rc_channels_scaled_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_rc_channels_scaled_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_rc_channels_scaled_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_rc_channels_scaled_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan1_scaled) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan1_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan2_scaled) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan2_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan3_scaled) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan3_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan4_scaled) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan4_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan5_scaled) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan5_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan6_scaled) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan6_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan7_scaled) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan7_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan8_scaled) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(chan8_scaled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_scaled_t),
            "::",
            stringify!(rssi)
        )
    );
}
pub type mavlink_rc_channels_scaled_t = __mavlink_rc_channels_scaled_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_rc_channels_raw_t {
    pub time_boot_ms: u32,
    pub chan1_raw: u16,
    pub chan2_raw: u16,
    pub chan3_raw: u16,
    pub chan4_raw: u16,
    pub chan5_raw: u16,
    pub chan6_raw: u16,
    pub chan7_raw: u16,
    pub chan8_raw: u16,
    pub port: u8,
    pub rssi: u8,
}
#[test]
fn bindgen_test_layout___mavlink_rc_channels_raw_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_rc_channels_raw_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_rc_channels_raw_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_rc_channels_raw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_rc_channels_raw_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_rc_channels_raw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan1_raw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan1_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan2_raw) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan2_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan3_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan3_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan4_raw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan4_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan5_raw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan5_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan6_raw) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan6_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan7_raw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan7_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan8_raw) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(chan8_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_raw_t),
            "::",
            stringify!(rssi)
        )
    );
}
pub type mavlink_rc_channels_raw_t = __mavlink_rc_channels_raw_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_servo_output_raw_t {
    pub time_usec: u32,
    pub servo1_raw: u16,
    pub servo2_raw: u16,
    pub servo3_raw: u16,
    pub servo4_raw: u16,
    pub servo5_raw: u16,
    pub servo6_raw: u16,
    pub servo7_raw: u16,
    pub servo8_raw: u16,
    pub port: u8,
    pub servo9_raw: u16,
    pub servo10_raw: u16,
    pub servo11_raw: u16,
    pub servo12_raw: u16,
    pub servo13_raw: u16,
    pub servo14_raw: u16,
    pub servo15_raw: u16,
    pub servo16_raw: u16,
}
#[test]
fn bindgen_test_layout___mavlink_servo_output_raw_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_servo_output_raw_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_servo_output_raw_t>(),
        37usize,
        concat!("Size of: ", stringify!(__mavlink_servo_output_raw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_servo_output_raw_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_servo_output_raw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo1_raw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo1_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo2_raw) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo2_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo3_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo3_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo4_raw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo4_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo5_raw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo5_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo6_raw) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo6_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo7_raw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo7_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo8_raw) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo8_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo9_raw) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo9_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo10_raw) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo10_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo11_raw) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo11_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo12_raw) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo12_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo13_raw) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo13_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo14_raw) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo14_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo15_raw) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo15_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).servo16_raw) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_servo_output_raw_t),
            "::",
            stringify!(servo16_raw)
        )
    );
}
pub type mavlink_servo_output_raw_t = __mavlink_servo_output_raw_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_request_partial_list_t {
    pub start_index: i16,
    pub end_index: i16,
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_request_partial_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_request_partial_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_request_partial_list_t>(),
        7usize,
        concat!("Size of: ", stringify!(__mavlink_mission_request_partial_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_request_partial_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_request_partial_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_partial_list_t),
            "::",
            stringify!(start_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_partial_list_t),
            "::",
            stringify!(end_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_partial_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_partial_list_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_partial_list_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_request_partial_list_t = __mavlink_mission_request_partial_list_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_write_partial_list_t {
    pub start_index: i16,
    pub end_index: i16,
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_write_partial_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_write_partial_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_write_partial_list_t>(),
        7usize,
        concat!("Size of: ", stringify!(__mavlink_mission_write_partial_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_write_partial_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_write_partial_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_write_partial_list_t),
            "::",
            stringify!(start_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_write_partial_list_t),
            "::",
            stringify!(end_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_write_partial_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_write_partial_list_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_write_partial_list_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_write_partial_list_t = __mavlink_mission_write_partial_list_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_item_t {
    pub param1: f32,
    pub param2: f32,
    pub param3: f32,
    pub param4: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub seq: u16,
    pub command: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub frame: u8,
    pub current: u8,
    pub autocontinue: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_item_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_item_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_item_t>(),
        38usize,
        concat!("Size of: ", stringify!(__mavlink_mission_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_item_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_item_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(param3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(param4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autocontinue) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(autocontinue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_item_t = __mavlink_mission_item_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_request_t {
    pub seq: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_request_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_request_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_request_t>(),
        5usize,
        concat!("Size of: ", stringify!(__mavlink_mission_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_request_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_request_t = __mavlink_mission_request_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_set_current_t {
    pub seq: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_set_current_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_set_current_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_set_current_t>(),
        4usize,
        concat!("Size of: ", stringify!(__mavlink_mission_set_current_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_set_current_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_set_current_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_set_current_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_set_current_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_set_current_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_mission_set_current_t = __mavlink_mission_set_current_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_current_t {
    pub seq: u16,
}
#[test]
fn bindgen_test_layout___mavlink_mission_current_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_current_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_current_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_mission_current_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_current_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_current_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_current_t),
            "::",
            stringify!(seq)
        )
    );
}
pub type mavlink_mission_current_t = __mavlink_mission_current_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_request_list_t {
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_request_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_request_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_request_list_t>(),
        3usize,
        concat!("Size of: ", stringify!(__mavlink_mission_request_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_request_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_request_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_list_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_list_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_request_list_t = __mavlink_mission_request_list_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_count_t {
    pub count: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_count_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_count_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_count_t>(),
        5usize,
        concat!("Size of: ", stringify!(__mavlink_mission_count_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_count_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_count_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_count_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_count_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_count_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_count_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_count_t = __mavlink_mission_count_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_clear_all_t {
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_clear_all_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_clear_all_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_clear_all_t>(),
        3usize,
        concat!("Size of: ", stringify!(__mavlink_mission_clear_all_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_clear_all_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_clear_all_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_clear_all_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_clear_all_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_clear_all_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_clear_all_t = __mavlink_mission_clear_all_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_item_reached_t {
    pub seq: u16,
}
#[test]
fn bindgen_test_layout___mavlink_mission_item_reached_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_item_reached_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_item_reached_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_mission_item_reached_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_item_reached_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_item_reached_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_reached_t),
            "::",
            stringify!(seq)
        )
    );
}
pub type mavlink_mission_item_reached_t = __mavlink_mission_item_reached_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_ack_t {
    pub target_system: u8,
    pub target_component: u8,
    pub type_: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_ack_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_ack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_ack_t>(),
        4usize,
        concat!("Size of: ", stringify!(__mavlink_mission_ack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_ack_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_ack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_ack_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_ack_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_ack_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_ack_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_ack_t = __mavlink_mission_ack_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_gps_global_origin_t {
    pub latitude: i32,
    pub longitude: i32,
    pub altitude: i32,
    pub target_system: u8,
    pub time_usec: u64,
}
#[test]
fn bindgen_test_layout___mavlink_set_gps_global_origin_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_gps_global_origin_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_gps_global_origin_t>(),
        21usize,
        concat!("Size of: ", stringify!(__mavlink_set_gps_global_origin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_gps_global_origin_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_gps_global_origin_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_gps_global_origin_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_gps_global_origin_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_gps_global_origin_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_gps_global_origin_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_gps_global_origin_t),
            "::",
            stringify!(time_usec)
        )
    );
}
pub type mavlink_set_gps_global_origin_t = __mavlink_set_gps_global_origin_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps_global_origin_t {
    pub latitude: i32,
    pub longitude: i32,
    pub altitude: i32,
    pub time_usec: u64,
}
#[test]
fn bindgen_test_layout___mavlink_gps_global_origin_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_global_origin_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_global_origin_t>(),
        20usize,
        concat!("Size of: ", stringify!(__mavlink_gps_global_origin_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_global_origin_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_global_origin_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_global_origin_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_global_origin_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_global_origin_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_global_origin_t),
            "::",
            stringify!(time_usec)
        )
    );
}
pub type mavlink_gps_global_origin_t = __mavlink_gps_global_origin_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_map_rc_t {
    pub param_value0: f32,
    pub scale: f32,
    pub param_value_min: f32,
    pub param_value_max: f32,
    pub param_index: i16,
    pub target_system: u8,
    pub target_component: u8,
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub parameter_rc_channel_index: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_map_rc_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_map_rc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_map_rc_t>(),
        37usize,
        concat!("Size of: ", stringify!(__mavlink_param_map_rc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_map_rc_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_map_rc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(param_value0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value_min) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(param_value_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value_max) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(param_value_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(param_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter_rc_channel_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_map_rc_t),
            "::",
            stringify!(parameter_rc_channel_index)
        )
    );
}
pub type mavlink_param_map_rc_t = __mavlink_param_map_rc_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_request_int_t {
    pub seq: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_request_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_request_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_request_int_t>(),
        5usize,
        concat!("Size of: ", stringify!(__mavlink_mission_request_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_request_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_request_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_int_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_int_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_int_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_request_int_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_request_int_t = __mavlink_mission_request_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_safety_set_allowed_area_t {
    pub p1x: f32,
    pub p1y: f32,
    pub p1z: f32,
    pub p2x: f32,
    pub p2y: f32,
    pub p2z: f32,
    pub target_system: u8,
    pub target_component: u8,
    pub frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_safety_set_allowed_area_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_safety_set_allowed_area_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_safety_set_allowed_area_t>(),
        27usize,
        concat!("Size of: ", stringify!(__mavlink_safety_set_allowed_area_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_safety_set_allowed_area_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_safety_set_allowed_area_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p1x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p1y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p1z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p2x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p2y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2z) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(p2z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_set_allowed_area_t),
            "::",
            stringify!(frame)
        )
    );
}
pub type mavlink_safety_set_allowed_area_t = __mavlink_safety_set_allowed_area_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_safety_allowed_area_t {
    pub p1x: f32,
    pub p1y: f32,
    pub p1z: f32,
    pub p2x: f32,
    pub p2y: f32,
    pub p2z: f32,
    pub frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_safety_allowed_area_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_safety_allowed_area_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_safety_allowed_area_t>(),
        25usize,
        concat!("Size of: ", stringify!(__mavlink_safety_allowed_area_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_safety_allowed_area_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_safety_allowed_area_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p1x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p1y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p1z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p1z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p2x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p2y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p2z) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(p2z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_safety_allowed_area_t),
            "::",
            stringify!(frame)
        )
    );
}
pub type mavlink_safety_allowed_area_t = __mavlink_safety_allowed_area_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_attitude_quaternion_cov_t {
    pub time_usec: u64,
    pub q: [f32; 4usize],
    pub rollspeed: f32,
    pub pitchspeed: f32,
    pub yawspeed: f32,
    pub covariance: [f32; 9usize],
}
#[test]
fn bindgen_test_layout___mavlink_attitude_quaternion_cov_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_attitude_quaternion_cov_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_attitude_quaternion_cov_t>(),
        72usize,
        concat!("Size of: ", stringify!(__mavlink_attitude_quaternion_cov_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_attitude_quaternion_cov_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_attitude_quaternion_cov_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rollspeed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(rollspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchspeed) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(pitchspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yawspeed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(yawspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).covariance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_quaternion_cov_t),
            "::",
            stringify!(covariance)
        )
    );
}
pub type mavlink_attitude_quaternion_cov_t = __mavlink_attitude_quaternion_cov_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_nav_controller_output_t {
    pub nav_roll: f32,
    pub nav_pitch: f32,
    pub alt_error: f32,
    pub aspd_error: f32,
    pub xtrack_error: f32,
    pub nav_bearing: i16,
    pub target_bearing: i16,
    pub wp_dist: u16,
}
#[test]
fn bindgen_test_layout___mavlink_nav_controller_output_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_nav_controller_output_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_nav_controller_output_t>(),
        26usize,
        concat!("Size of: ", stringify!(__mavlink_nav_controller_output_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_nav_controller_output_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_nav_controller_output_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nav_roll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(nav_roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nav_pitch) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(nav_pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_error) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(alt_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspd_error) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(aspd_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xtrack_error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(xtrack_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nav_bearing) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(nav_bearing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_bearing) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(target_bearing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wp_dist) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_nav_controller_output_t),
            "::",
            stringify!(wp_dist)
        )
    );
}
pub type mavlink_nav_controller_output_t = __mavlink_nav_controller_output_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_global_position_int_cov_t {
    pub time_usec: u64,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub relative_alt: i32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub covariance: [f32; 36usize],
    pub estimator_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_global_position_int_cov_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_global_position_int_cov_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_global_position_int_cov_t>(),
        181usize,
        concat!("Size of: ", stringify!(__mavlink_global_position_int_cov_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_global_position_int_cov_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_global_position_int_cov_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative_alt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(relative_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).covariance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(covariance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).estimator_type) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_position_int_cov_t),
            "::",
            stringify!(estimator_type)
        )
    );
}
impl Default for __mavlink_global_position_int_cov_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_global_position_int_cov_t = __mavlink_global_position_int_cov_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_local_position_ned_cov_t {
    pub time_usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub ax: f32,
    pub ay: f32,
    pub az: f32,
    pub covariance: [f32; 45usize],
    pub estimator_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_local_position_ned_cov_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_local_position_ned_cov_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_local_position_ned_cov_t>(),
        225usize,
        concat!("Size of: ", stringify!(__mavlink_local_position_ned_cov_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_local_position_ned_cov_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_local_position_ned_cov_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ax) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(ax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ay) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(ay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).az) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(az)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).covariance) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(covariance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).estimator_type) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_cov_t),
            "::",
            stringify!(estimator_type)
        )
    );
}
impl Default for __mavlink_local_position_ned_cov_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_local_position_ned_cov_t = __mavlink_local_position_ned_cov_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_rc_channels_t {
    pub time_boot_ms: u32,
    pub chan1_raw: u16,
    pub chan2_raw: u16,
    pub chan3_raw: u16,
    pub chan4_raw: u16,
    pub chan5_raw: u16,
    pub chan6_raw: u16,
    pub chan7_raw: u16,
    pub chan8_raw: u16,
    pub chan9_raw: u16,
    pub chan10_raw: u16,
    pub chan11_raw: u16,
    pub chan12_raw: u16,
    pub chan13_raw: u16,
    pub chan14_raw: u16,
    pub chan15_raw: u16,
    pub chan16_raw: u16,
    pub chan17_raw: u16,
    pub chan18_raw: u16,
    pub chancount: u8,
    pub rssi: u8,
}
#[test]
fn bindgen_test_layout___mavlink_rc_channels_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_rc_channels_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_rc_channels_t>(),
        42usize,
        concat!("Size of: ", stringify!(__mavlink_rc_channels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_rc_channels_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_rc_channels_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan1_raw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan1_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan2_raw) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan2_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan3_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan3_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan4_raw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan4_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan5_raw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan5_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan6_raw) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan6_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan7_raw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan7_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan8_raw) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan8_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan9_raw) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan9_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan10_raw) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan10_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan11_raw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan11_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan12_raw) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan12_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan13_raw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan13_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan14_raw) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan14_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan15_raw) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan15_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan16_raw) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan16_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan17_raw) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan17_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan18_raw) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chan18_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chancount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(chancount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_t),
            "::",
            stringify!(rssi)
        )
    );
}
pub type mavlink_rc_channels_t = __mavlink_rc_channels_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_request_data_stream_t {
    pub req_message_rate: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub req_stream_id: u8,
    pub start_stop: u8,
}
#[test]
fn bindgen_test_layout___mavlink_request_data_stream_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_request_data_stream_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_request_data_stream_t>(),
        6usize,
        concat!("Size of: ", stringify!(__mavlink_request_data_stream_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_request_data_stream_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_request_data_stream_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_message_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_request_data_stream_t),
            "::",
            stringify!(req_message_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_request_data_stream_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_request_data_stream_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_stream_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_request_data_stream_t),
            "::",
            stringify!(req_stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_stop) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_request_data_stream_t),
            "::",
            stringify!(start_stop)
        )
    );
}
pub type mavlink_request_data_stream_t = __mavlink_request_data_stream_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_data_stream_t {
    pub message_rate: u16,
    pub stream_id: u8,
    pub on_off: u8,
}
#[test]
fn bindgen_test_layout___mavlink_data_stream_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_data_stream_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_data_stream_t>(),
        4usize,
        concat!("Size of: ", stringify!(__mavlink_data_stream_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_data_stream_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_data_stream_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_rate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_stream_t),
            "::",
            stringify!(message_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_stream_t),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).on_off) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_stream_t),
            "::",
            stringify!(on_off)
        )
    );
}
pub type mavlink_data_stream_t = __mavlink_data_stream_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_manual_control_t {
    pub x: i16,
    pub y: i16,
    pub z: i16,
    pub r: i16,
    pub buttons: u16,
    pub target: u8,
}
#[test]
fn bindgen_test_layout___mavlink_manual_control_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_manual_control_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_manual_control_t>(),
        11usize,
        concat!("Size of: ", stringify!(__mavlink_manual_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_manual_control_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_manual_control_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttons) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_control_t),
            "::",
            stringify!(target)
        )
    );
}
pub type mavlink_manual_control_t = __mavlink_manual_control_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_rc_channels_override_t {
    pub chan1_raw: u16,
    pub chan2_raw: u16,
    pub chan3_raw: u16,
    pub chan4_raw: u16,
    pub chan5_raw: u16,
    pub chan6_raw: u16,
    pub chan7_raw: u16,
    pub chan8_raw: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_rc_channels_override_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_rc_channels_override_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_rc_channels_override_t>(),
        18usize,
        concat!("Size of: ", stringify!(__mavlink_rc_channels_override_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_rc_channels_override_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_rc_channels_override_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan1_raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan1_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan2_raw) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan2_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan3_raw) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan3_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan4_raw) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan4_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan5_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan5_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan6_raw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan6_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan7_raw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan7_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan8_raw) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(chan8_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_rc_channels_override_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_rc_channels_override_t = __mavlink_rc_channels_override_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mission_item_int_t {
    pub param1: f32,
    pub param2: f32,
    pub param3: f32,
    pub param4: f32,
    pub x: i32,
    pub y: i32,
    pub z: f32,
    pub seq: u16,
    pub command: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub frame: u8,
    pub current: u8,
    pub autocontinue: u8,
    pub mission_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_mission_item_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mission_item_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mission_item_int_t>(),
        38usize,
        concat!("Size of: ", stringify!(__mavlink_mission_item_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mission_item_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mission_item_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(param3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(param4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autocontinue) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(autocontinue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mission_type) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mission_item_int_t),
            "::",
            stringify!(mission_type)
        )
    );
}
pub type mavlink_mission_item_int_t = __mavlink_mission_item_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_vfr_hud_t {
    pub airspeed: f32,
    pub groundspeed: f32,
    pub alt: f32,
    pub climb: f32,
    pub heading: i16,
    pub throttle: u16,
}
#[test]
fn bindgen_test_layout___mavlink_vfr_hud_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_vfr_hud_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_vfr_hud_t>(),
        20usize,
        concat!("Size of: ", stringify!(__mavlink_vfr_hud_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_vfr_hud_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_vfr_hud_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).airspeed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(airspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groundspeed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(groundspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).climb) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(climb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(heading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttle) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vfr_hud_t),
            "::",
            stringify!(throttle)
        )
    );
}
pub type mavlink_vfr_hud_t = __mavlink_vfr_hud_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_command_int_t {
    pub param1: f32,
    pub param2: f32,
    pub param3: f32,
    pub param4: f32,
    pub x: i32,
    pub y: i32,
    pub z: f32,
    pub command: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub frame: u8,
    pub current: u8,
    pub autocontinue: u8,
}
#[test]
fn bindgen_test_layout___mavlink_command_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_command_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_command_int_t>(),
        35usize,
        concat!("Size of: ", stringify!(__mavlink_command_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_command_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_command_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(param3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(param4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autocontinue) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_int_t),
            "::",
            stringify!(autocontinue)
        )
    );
}
pub type mavlink_command_int_t = __mavlink_command_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_command_long_t {
    pub param1: f32,
    pub param2: f32,
    pub param3: f32,
    pub param4: f32,
    pub param5: f32,
    pub param6: f32,
    pub param7: f32,
    pub command: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub confirmation: u8,
}
#[test]
fn bindgen_test_layout___mavlink_command_long_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_command_long_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_command_long_t>(),
        33usize,
        concat!("Size of: ", stringify!(__mavlink_command_long_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_command_long_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_command_long_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param5) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param6) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param7) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(param7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confirmation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_long_t),
            "::",
            stringify!(confirmation)
        )
    );
}
pub type mavlink_command_long_t = __mavlink_command_long_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_command_ack_t {
    pub command: u16,
    pub result: u8,
    pub progress: u8,
    pub result_param2: i32,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_command_ack_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_command_ack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_command_ack_t>(),
        10usize,
        concat!("Size of: ", stringify!(__mavlink_command_ack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_command_ack_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_command_ack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result_param2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(result_param2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_command_ack_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_command_ack_t = __mavlink_command_ack_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_manual_setpoint_t {
    pub time_boot_ms: u32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub thrust: f32,
    pub mode_switch: u8,
    pub manual_override_switch: u8,
}
#[test]
fn bindgen_test_layout___mavlink_manual_setpoint_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_manual_setpoint_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_manual_setpoint_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_manual_setpoint_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_manual_setpoint_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_manual_setpoint_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrust) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(thrust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_switch) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(mode_switch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manual_override_switch) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_manual_setpoint_t),
            "::",
            stringify!(manual_override_switch)
        )
    );
}
pub type mavlink_manual_setpoint_t = __mavlink_manual_setpoint_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_attitude_target_t {
    pub time_boot_ms: u32,
    pub q: [f32; 4usize],
    pub body_roll_rate: f32,
    pub body_pitch_rate: f32,
    pub body_yaw_rate: f32,
    pub thrust: f32,
    pub target_system: u8,
    pub target_component: u8,
    pub type_mask: u8,
}
#[test]
fn bindgen_test_layout___mavlink_set_attitude_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_attitude_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_attitude_target_t>(),
        39usize,
        concat!("Size of: ", stringify!(__mavlink_set_attitude_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_attitude_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_attitude_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_roll_rate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(body_roll_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_pitch_rate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(body_pitch_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_yaw_rate) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(body_yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrust) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(thrust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_attitude_target_t),
            "::",
            stringify!(type_mask)
        )
    );
}
pub type mavlink_set_attitude_target_t = __mavlink_set_attitude_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_attitude_target_t {
    pub time_boot_ms: u32,
    pub q: [f32; 4usize],
    pub body_roll_rate: f32,
    pub body_pitch_rate: f32,
    pub body_yaw_rate: f32,
    pub thrust: f32,
    pub type_mask: u8,
}
#[test]
fn bindgen_test_layout___mavlink_attitude_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_attitude_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_attitude_target_t>(),
        37usize,
        concat!("Size of: ", stringify!(__mavlink_attitude_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_attitude_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_attitude_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_roll_rate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(body_roll_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_pitch_rate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(body_pitch_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body_yaw_rate) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(body_yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thrust) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(thrust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_attitude_target_t),
            "::",
            stringify!(type_mask)
        )
    );
}
pub type mavlink_attitude_target_t = __mavlink_attitude_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_position_target_local_ned_t {
    pub time_boot_ms: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub afx: f32,
    pub afy: f32,
    pub afz: f32,
    pub yaw: f32,
    pub yaw_rate: f32,
    pub type_mask: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub coordinate_frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_set_position_target_local_ned_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_position_target_local_ned_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_position_target_local_ned_t>(),
        53usize,
        concat!("Size of: ", stringify!(__mavlink_set_position_target_local_ned_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_position_target_local_ned_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_position_target_local_ned_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(afx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(afy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(afz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rate) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coordinate_frame) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_local_ned_t),
            "::",
            stringify!(coordinate_frame)
        )
    );
}
pub type mavlink_set_position_target_local_ned_t = __mavlink_set_position_target_local_ned_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_position_target_local_ned_t {
    pub time_boot_ms: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub afx: f32,
    pub afy: f32,
    pub afz: f32,
    pub yaw: f32,
    pub yaw_rate: f32,
    pub type_mask: u16,
    pub coordinate_frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_position_target_local_ned_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_position_target_local_ned_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_position_target_local_ned_t>(),
        51usize,
        concat!("Size of: ", stringify!(__mavlink_position_target_local_ned_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_position_target_local_ned_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_position_target_local_ned_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(afx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(afy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(afz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rate) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coordinate_frame) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_local_ned_t),
            "::",
            stringify!(coordinate_frame)
        )
    );
}
pub type mavlink_position_target_local_ned_t = __mavlink_position_target_local_ned_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_position_target_global_int_t {
    pub time_boot_ms: u32,
    pub lat_int: i32,
    pub lon_int: i32,
    pub alt: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub afx: f32,
    pub afy: f32,
    pub afz: f32,
    pub yaw: f32,
    pub yaw_rate: f32,
    pub type_mask: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub coordinate_frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_set_position_target_global_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_position_target_global_int_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_position_target_global_int_t>(),
        53usize,
        concat!("Size of: ", stringify!(__mavlink_set_position_target_global_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_position_target_global_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_position_target_global_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat_int) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(lat_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon_int) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(lon_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(afx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(afy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(afz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rate) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coordinate_frame) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_position_target_global_int_t),
            "::",
            stringify!(coordinate_frame)
        )
    );
}
pub type mavlink_set_position_target_global_int_t = __mavlink_set_position_target_global_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_position_target_global_int_t {
    pub time_boot_ms: u32,
    pub lat_int: i32,
    pub lon_int: i32,
    pub alt: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    pub afx: f32,
    pub afy: f32,
    pub afz: f32,
    pub yaw: f32,
    pub yaw_rate: f32,
    pub type_mask: u16,
    pub coordinate_frame: u8,
}
#[test]
fn bindgen_test_layout___mavlink_position_target_global_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_position_target_global_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_position_target_global_int_t>(),
        51usize,
        concat!("Size of: ", stringify!(__mavlink_position_target_global_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_position_target_global_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_position_target_global_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat_int) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(lat_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon_int) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(lon_int)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(afx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(afy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).afz) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(afz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rate) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(yaw_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(type_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coordinate_frame) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_position_target_global_int_t),
            "::",
            stringify!(coordinate_frame)
        )
    );
}
pub type mavlink_position_target_global_int_t = __mavlink_position_target_global_int_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_local_position_ned_system_global_offset_t {
    pub time_boot_ms: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout___mavlink_local_position_ned_system_global_offset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_local_position_ned_system_global_offset_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_local_position_ned_system_global_offset_t>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_local_position_ned_system_global_offset_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_local_position_ned_system_global_offset_t),
            "::",
            stringify!(yaw)
        )
    );
}
pub type mavlink_local_position_ned_system_global_offset_t = __mavlink_local_position_ned_system_global_offset_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_state_t {
    pub time_usec: u64,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub rollspeed: f32,
    pub pitchspeed: f32,
    pub yawspeed: f32,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub vx: i16,
    pub vy: i16,
    pub vz: i16,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
}
#[test]
fn bindgen_test_layout___mavlink_hil_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_state_t>(),
        56usize,
        concat!("Size of: ", stringify!(__mavlink_hil_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rollspeed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(rollspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchspeed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(pitchspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yawspeed) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(yawspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_t),
            "::",
            stringify!(zacc)
        )
    );
}
pub type mavlink_hil_state_t = __mavlink_hil_state_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_controls_t {
    pub time_usec: u64,
    pub roll_ailerons: f32,
    pub pitch_elevator: f32,
    pub yaw_rudder: f32,
    pub throttle: f32,
    pub aux1: f32,
    pub aux2: f32,
    pub aux3: f32,
    pub aux4: f32,
    pub mode: u8,
    pub nav_mode: u8,
}
#[test]
fn bindgen_test_layout___mavlink_hil_controls_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_controls_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_controls_t>(),
        42usize,
        concat!("Size of: ", stringify!(__mavlink_hil_controls_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_controls_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_controls_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll_ailerons) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(roll_ailerons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch_elevator) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(pitch_elevator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rudder) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(yaw_rudder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(throttle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(aux1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(aux2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux3) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(aux3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aux4) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(aux4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nav_mode) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_controls_t),
            "::",
            stringify!(nav_mode)
        )
    );
}
pub type mavlink_hil_controls_t = __mavlink_hil_controls_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_rc_inputs_raw_t {
    pub time_usec: u64,
    pub chan1_raw: u16,
    pub chan2_raw: u16,
    pub chan3_raw: u16,
    pub chan4_raw: u16,
    pub chan5_raw: u16,
    pub chan6_raw: u16,
    pub chan7_raw: u16,
    pub chan8_raw: u16,
    pub chan9_raw: u16,
    pub chan10_raw: u16,
    pub chan11_raw: u16,
    pub chan12_raw: u16,
    pub rssi: u8,
}
#[test]
fn bindgen_test_layout___mavlink_hil_rc_inputs_raw_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_rc_inputs_raw_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_rc_inputs_raw_t>(),
        33usize,
        concat!("Size of: ", stringify!(__mavlink_hil_rc_inputs_raw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_rc_inputs_raw_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_rc_inputs_raw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan1_raw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan1_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan2_raw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan2_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan3_raw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan3_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan4_raw) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan4_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan5_raw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan5_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan6_raw) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan6_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan7_raw) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan7_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan8_raw) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan8_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan9_raw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan9_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan10_raw) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan10_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan11_raw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan11_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chan12_raw) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(chan12_raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_rc_inputs_raw_t),
            "::",
            stringify!(rssi)
        )
    );
}
pub type mavlink_hil_rc_inputs_raw_t = __mavlink_hil_rc_inputs_raw_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_actuator_controls_t {
    pub time_usec: u64,
    pub flags: u64,
    pub controls: [f32; 16usize],
    pub mode: u8,
}
#[test]
fn bindgen_test_layout___mavlink_hil_actuator_controls_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_actuator_controls_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_actuator_controls_t>(),
        81usize,
        concat!("Size of: ", stringify!(__mavlink_hil_actuator_controls_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_actuator_controls_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_actuator_controls_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_actuator_controls_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_actuator_controls_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controls) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_actuator_controls_t),
            "::",
            stringify!(controls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_actuator_controls_t),
            "::",
            stringify!(mode)
        )
    );
}
pub type mavlink_hil_actuator_controls_t = __mavlink_hil_actuator_controls_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_optical_flow_t {
    pub time_usec: u64,
    pub flow_comp_m_x: f32,
    pub flow_comp_m_y: f32,
    pub ground_distance: f32,
    pub flow_x: i16,
    pub flow_y: i16,
    pub sensor_id: u8,
    pub quality: u8,
    pub flow_rate_x: f32,
    pub flow_rate_y: f32,
}
#[test]
fn bindgen_test_layout___mavlink_optical_flow_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_optical_flow_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_optical_flow_t>(),
        34usize,
        concat!("Size of: ", stringify!(__mavlink_optical_flow_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_optical_flow_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_optical_flow_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_comp_m_x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_comp_m_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_comp_m_y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_comp_m_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ground_distance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(ground_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_x) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_y) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(sensor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_rate_x) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_rate_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_rate_y) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_t),
            "::",
            stringify!(flow_rate_y)
        )
    );
}
pub type mavlink_optical_flow_t = __mavlink_optical_flow_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_global_vision_position_estimate_t {
    pub usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout___mavlink_global_vision_position_estimate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_global_vision_position_estimate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_global_vision_position_estimate_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_global_vision_position_estimate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_global_vision_position_estimate_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_global_vision_position_estimate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_global_vision_position_estimate_t),
            "::",
            stringify!(yaw)
        )
    );
}
pub type mavlink_global_vision_position_estimate_t = __mavlink_global_vision_position_estimate_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_vision_position_estimate_t {
    pub usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout___mavlink_vision_position_estimate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_vision_position_estimate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_vision_position_estimate_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_vision_position_estimate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_vision_position_estimate_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_vision_position_estimate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_position_estimate_t),
            "::",
            stringify!(yaw)
        )
    );
}
pub type mavlink_vision_position_estimate_t = __mavlink_vision_position_estimate_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_vision_speed_estimate_t {
    pub usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout___mavlink_vision_speed_estimate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_vision_speed_estimate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_vision_speed_estimate_t>(),
        20usize,
        concat!("Size of: ", stringify!(__mavlink_vision_speed_estimate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_vision_speed_estimate_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_vision_speed_estimate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_speed_estimate_t),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_speed_estimate_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_speed_estimate_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vision_speed_estimate_t),
            "::",
            stringify!(z)
        )
    );
}
pub type mavlink_vision_speed_estimate_t = __mavlink_vision_speed_estimate_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_vicon_position_estimate_t {
    pub usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout___mavlink_vicon_position_estimate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_vicon_position_estimate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_vicon_position_estimate_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_vicon_position_estimate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_vicon_position_estimate_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_vicon_position_estimate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vicon_position_estimate_t),
            "::",
            stringify!(yaw)
        )
    );
}
pub type mavlink_vicon_position_estimate_t = __mavlink_vicon_position_estimate_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_highres_imu_t {
    pub time_usec: u64,
    pub xacc: f32,
    pub yacc: f32,
    pub zacc: f32,
    pub xgyro: f32,
    pub ygyro: f32,
    pub zgyro: f32,
    pub xmag: f32,
    pub ymag: f32,
    pub zmag: f32,
    pub abs_pressure: f32,
    pub diff_pressure: f32,
    pub pressure_alt: f32,
    pub temperature: f32,
    pub fields_updated: u16,
}
#[test]
fn bindgen_test_layout___mavlink_highres_imu_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_highres_imu_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_highres_imu_t>(),
        62usize,
        concat!("Size of: ", stringify!(__mavlink_highres_imu_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_highres_imu_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_highres_imu_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(zmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_pressure) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(abs_pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_pressure) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(diff_pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure_alt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(pressure_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields_updated) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_highres_imu_t),
            "::",
            stringify!(fields_updated)
        )
    );
}
pub type mavlink_highres_imu_t = __mavlink_highres_imu_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_optical_flow_rad_t {
    pub time_usec: u64,
    pub integration_time_us: u32,
    pub integrated_x: f32,
    pub integrated_y: f32,
    pub integrated_xgyro: f32,
    pub integrated_ygyro: f32,
    pub integrated_zgyro: f32,
    pub time_delta_distance_us: u32,
    pub distance: f32,
    pub temperature: i16,
    pub sensor_id: u8,
    pub quality: u8,
}
#[test]
fn bindgen_test_layout___mavlink_optical_flow_rad_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_optical_flow_rad_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_optical_flow_rad_t>(),
        44usize,
        concat!("Size of: ", stringify!(__mavlink_optical_flow_rad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_optical_flow_rad_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_optical_flow_rad_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integration_time_us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integration_time_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integrated_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integrated_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_xgyro) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integrated_xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_ygyro) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integrated_ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_zgyro) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(integrated_zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_delta_distance_us) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(time_delta_distance_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_id) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(sensor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_optical_flow_rad_t),
            "::",
            stringify!(quality)
        )
    );
}
pub type mavlink_optical_flow_rad_t = __mavlink_optical_flow_rad_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_sensor_t {
    pub time_usec: u64,
    pub xacc: f32,
    pub yacc: f32,
    pub zacc: f32,
    pub xgyro: f32,
    pub ygyro: f32,
    pub zgyro: f32,
    pub xmag: f32,
    pub ymag: f32,
    pub zmag: f32,
    pub abs_pressure: f32,
    pub diff_pressure: f32,
    pub pressure_alt: f32,
    pub temperature: f32,
    pub fields_updated: u32,
}
#[test]
fn bindgen_test_layout___mavlink_hil_sensor_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_sensor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_sensor_t>(),
        64usize,
        concat!("Size of: ", stringify!(__mavlink_hil_sensor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_sensor_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_sensor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(zmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_pressure) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(abs_pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_pressure) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(diff_pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure_alt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(pressure_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields_updated) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_sensor_t),
            "::",
            stringify!(fields_updated)
        )
    );
}
pub type mavlink_hil_sensor_t = __mavlink_hil_sensor_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_sim_state_t {
    pub q1: f32,
    pub q2: f32,
    pub q3: f32,
    pub q4: f32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
    pub xacc: f32,
    pub yacc: f32,
    pub zacc: f32,
    pub xgyro: f32,
    pub ygyro: f32,
    pub zgyro: f32,
    pub lat: f32,
    pub lon: f32,
    pub alt: f32,
    pub std_dev_horz: f32,
    pub std_dev_vert: f32,
    pub vn: f32,
    pub ve: f32,
    pub vd: f32,
}
#[test]
fn bindgen_test_layout___mavlink_sim_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_sim_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_sim_state_t>(),
        84usize,
        concat!("Size of: ", stringify!(__mavlink_sim_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_sim_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_sim_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(q1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(q2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(q3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(q4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(yaw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std_dev_horz) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(std_dev_horz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).std_dev_vert) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(std_dev_vert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(vn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ve) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(ve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_sim_state_t),
            "::",
            stringify!(vd)
        )
    );
}
pub type mavlink_sim_state_t = __mavlink_sim_state_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_radio_status_t {
    pub rxerrors: u16,
    pub fixed: u16,
    pub rssi: u8,
    pub remrssi: u8,
    pub txbuf: u8,
    pub noise: u8,
    pub remnoise: u8,
}
#[test]
fn bindgen_test_layout___mavlink_radio_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_radio_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_radio_status_t>(),
        9usize,
        concat!("Size of: ", stringify!(__mavlink_radio_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_radio_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_radio_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rxerrors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(rxerrors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fixed) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(fixed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rssi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(rssi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remrssi) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(remrssi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).txbuf) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(txbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noise) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remnoise) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_radio_status_t),
            "::",
            stringify!(remnoise)
        )
    );
}
pub type mavlink_radio_status_t = __mavlink_radio_status_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_file_transfer_protocol_t {
    pub target_network: u8,
    pub target_system: u8,
    pub target_component: u8,
    pub payload: [u8; 251usize],
}
#[test]
fn bindgen_test_layout___mavlink_file_transfer_protocol_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_file_transfer_protocol_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_file_transfer_protocol_t>(),
        254usize,
        concat!("Size of: ", stringify!(__mavlink_file_transfer_protocol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_file_transfer_protocol_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_file_transfer_protocol_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_file_transfer_protocol_t),
            "::",
            stringify!(target_network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_file_transfer_protocol_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_file_transfer_protocol_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_file_transfer_protocol_t),
            "::",
            stringify!(payload)
        )
    );
}
impl Default for __mavlink_file_transfer_protocol_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_file_transfer_protocol_t = __mavlink_file_transfer_protocol_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_timesync_t {
    pub tc1: i64,
    pub ts1: i64,
}
#[test]
fn bindgen_test_layout___mavlink_timesync_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_timesync_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_timesync_t>(),
        16usize,
        concat!("Size of: ", stringify!(__mavlink_timesync_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_timesync_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_timesync_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tc1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_timesync_t),
            "::",
            stringify!(tc1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_timesync_t),
            "::",
            stringify!(ts1)
        )
    );
}
pub type mavlink_timesync_t = __mavlink_timesync_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_camera_trigger_t {
    pub time_usec: u64,
    pub seq: u32,
}
#[test]
fn bindgen_test_layout___mavlink_camera_trigger_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_camera_trigger_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_camera_trigger_t>(),
        12usize,
        concat!("Size of: ", stringify!(__mavlink_camera_trigger_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_camera_trigger_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_camera_trigger_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_trigger_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_trigger_t),
            "::",
            stringify!(seq)
        )
    );
}
pub type mavlink_camera_trigger_t = __mavlink_camera_trigger_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_gps_t {
    pub time_usec: u64,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub eph: u16,
    pub epv: u16,
    pub vel: u16,
    pub vn: i16,
    pub ve: i16,
    pub vd: i16,
    pub cog: u16,
    pub fix_type: u8,
    pub satellites_visible: u8,
}
#[test]
fn bindgen_test_layout___mavlink_hil_gps_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_gps_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_gps_t>(),
        36usize,
        concat!("Size of: ", stringify!(__mavlink_hil_gps_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_gps_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_gps_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eph) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(eph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epv) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(epv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(vn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ve) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(ve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(vd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cog) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(cog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_type) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(fix_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellites_visible) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_gps_t),
            "::",
            stringify!(satellites_visible)
        )
    );
}
pub type mavlink_hil_gps_t = __mavlink_hil_gps_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_optical_flow_t {
    pub time_usec: u64,
    pub integration_time_us: u32,
    pub integrated_x: f32,
    pub integrated_y: f32,
    pub integrated_xgyro: f32,
    pub integrated_ygyro: f32,
    pub integrated_zgyro: f32,
    pub time_delta_distance_us: u32,
    pub distance: f32,
    pub temperature: i16,
    pub sensor_id: u8,
    pub quality: u8,
}
#[test]
fn bindgen_test_layout___mavlink_hil_optical_flow_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_optical_flow_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_optical_flow_t>(),
        44usize,
        concat!("Size of: ", stringify!(__mavlink_hil_optical_flow_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_optical_flow_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_optical_flow_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integration_time_us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integration_time_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integrated_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integrated_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_xgyro) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integrated_xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_ygyro) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integrated_ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integrated_zgyro) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(integrated_zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_delta_distance_us) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(time_delta_distance_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_id) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(sensor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_optical_flow_t),
            "::",
            stringify!(quality)
        )
    );
}
pub type mavlink_hil_optical_flow_t = __mavlink_hil_optical_flow_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_hil_state_quaternion_t {
    pub time_usec: u64,
    pub attitude_quaternion: [f32; 4usize],
    pub rollspeed: f32,
    pub pitchspeed: f32,
    pub yawspeed: f32,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub vx: i16,
    pub vy: i16,
    pub vz: i16,
    pub ind_airspeed: u16,
    pub true_airspeed: u16,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
}
#[test]
fn bindgen_test_layout___mavlink_hil_state_quaternion_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_hil_state_quaternion_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_hil_state_quaternion_t>(),
        64usize,
        concat!("Size of: ", stringify!(__mavlink_hil_state_quaternion_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_hil_state_quaternion_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_hil_state_quaternion_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attitude_quaternion) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(attitude_quaternion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rollspeed) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(rollspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitchspeed) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(pitchspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yawspeed) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(yawspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(vx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vy) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(vy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vz) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(vz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_airspeed) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(ind_airspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).true_airspeed) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(true_airspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_hil_state_quaternion_t),
            "::",
            stringify!(zacc)
        )
    );
}
pub type mavlink_hil_state_quaternion_t = __mavlink_hil_state_quaternion_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_imu2_t {
    pub time_boot_ms: u32,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
    pub xgyro: i16,
    pub ygyro: i16,
    pub zgyro: i16,
    pub xmag: i16,
    pub ymag: i16,
    pub zmag: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_imu2_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_imu2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_imu2_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_imu2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_imu2_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_imu2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu2_t),
            "::",
            stringify!(zmag)
        )
    );
}
pub type mavlink_scaled_imu2_t = __mavlink_scaled_imu2_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_log_request_list_t {
    pub start: u16,
    pub end: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_log_request_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_request_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_request_list_t>(),
        6usize,
        concat!("Size of: ", stringify!(__mavlink_log_request_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_request_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_request_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_list_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_list_t),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_list_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_log_request_list_t = __mavlink_log_request_list_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_log_entry_t {
    pub time_utc: u32,
    pub size: u32,
    pub id: u16,
    pub num_logs: u16,
    pub last_log_num: u16,
}
#[test]
fn bindgen_test_layout___mavlink_log_entry_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_entry_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_entry_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_log_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_entry_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_entry_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_utc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_entry_t),
            "::",
            stringify!(time_utc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_entry_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_entry_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_logs) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_entry_t),
            "::",
            stringify!(num_logs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_log_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_entry_t),
            "::",
            stringify!(last_log_num)
        )
    );
}
pub type mavlink_log_entry_t = __mavlink_log_entry_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_log_request_data_t {
    pub ofs: u32,
    pub count: u32,
    pub id: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_log_request_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_request_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_request_data_t>(),
        12usize,
        concat!("Size of: ", stringify!(__mavlink_log_request_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_request_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_request_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_data_t),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_data_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_data_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_data_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_data_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_log_request_data_t = __mavlink_log_request_data_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_log_data_t {
    pub ofs: u32,
    pub id: u16,
    pub count: u8,
    pub data: [u8; 90usize],
}
#[test]
fn bindgen_test_layout___mavlink_log_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_data_t>(),
        97usize,
        concat!("Size of: ", stringify!(__mavlink_log_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ofs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_data_t),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_data_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_data_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_data_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_log_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_log_data_t = __mavlink_log_data_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_log_erase_t {
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_log_erase_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_erase_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_erase_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_log_erase_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_erase_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_erase_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_erase_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_erase_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_log_erase_t = __mavlink_log_erase_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_log_request_end_t {
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_log_request_end_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_log_request_end_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_log_request_end_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_log_request_end_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_log_request_end_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_log_request_end_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_end_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_log_request_end_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_log_request_end_t = __mavlink_log_request_end_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_gps_inject_data_t {
    pub target_system: u8,
    pub target_component: u8,
    pub len: u8,
    pub data: [u8; 110usize],
}
#[test]
fn bindgen_test_layout___mavlink_gps_inject_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_inject_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_inject_data_t>(),
        113usize,
        concat!("Size of: ", stringify!(__mavlink_gps_inject_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_inject_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_inject_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_inject_data_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_inject_data_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_inject_data_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_inject_data_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_gps_inject_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_gps_inject_data_t = __mavlink_gps_inject_data_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps2_raw_t {
    pub time_usec: u64,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub dgps_age: u32,
    pub eph: u16,
    pub epv: u16,
    pub vel: u16,
    pub cog: u16,
    pub fix_type: u8,
    pub satellites_visible: u8,
    pub dgps_numch: u8,
}
#[test]
fn bindgen_test_layout___mavlink_gps2_raw_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps2_raw_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps2_raw_t>(),
        35usize,
        concat!("Size of: ", stringify!(__mavlink_gps2_raw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps2_raw_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps2_raw_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgps_age) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(dgps_age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eph) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(eph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).epv) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(epv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cog) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(cog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(fix_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellites_visible) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(satellites_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgps_numch) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_raw_t),
            "::",
            stringify!(dgps_numch)
        )
    );
}
pub type mavlink_gps2_raw_t = __mavlink_gps2_raw_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_power_status_t {
    pub Vcc: u16,
    pub Vservo: u16,
    pub flags: u16,
}
#[test]
fn bindgen_test_layout___mavlink_power_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_power_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_power_status_t>(),
        6usize,
        concat!("Size of: ", stringify!(__mavlink_power_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_power_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_power_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vcc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_power_status_t),
            "::",
            stringify!(Vcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vservo) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_power_status_t),
            "::",
            stringify!(Vservo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_power_status_t),
            "::",
            stringify!(flags)
        )
    );
}
pub type mavlink_power_status_t = __mavlink_power_status_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_serial_control_t {
    pub baudrate: u32,
    pub timeout: u16,
    pub device: u8,
    pub flags: u8,
    pub count: u8,
    pub data: [u8; 70usize],
}
#[test]
fn bindgen_test_layout___mavlink_serial_control_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_serial_control_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_serial_control_t>(),
        79usize,
        concat!("Size of: ", stringify!(__mavlink_serial_control_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_serial_control_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_serial_control_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baudrate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(baudrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_serial_control_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_serial_control_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_serial_control_t = __mavlink_serial_control_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps_rtk_t {
    pub time_last_baseline_ms: u32,
    pub tow: u32,
    pub baseline_a_mm: i32,
    pub baseline_b_mm: i32,
    pub baseline_c_mm: i32,
    pub accuracy: u32,
    pub iar_num_hypotheses: i32,
    pub wn: u16,
    pub rtk_receiver_id: u8,
    pub rtk_health: u8,
    pub rtk_rate: u8,
    pub nsats: u8,
    pub baseline_coords_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_gps_rtk_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_rtk_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_rtk_t>(),
        35usize,
        concat!("Size of: ", stringify!(__mavlink_gps_rtk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_rtk_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_rtk_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_last_baseline_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(time_last_baseline_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tow) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(tow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_a_mm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(baseline_a_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_b_mm) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(baseline_b_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_c_mm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(baseline_c_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accuracy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iar_num_hypotheses) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(iar_num_hypotheses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wn) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(wn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_receiver_id) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(rtk_receiver_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_health) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(rtk_health)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_rate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(rtk_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsats) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(nsats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_coords_type) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtk_t),
            "::",
            stringify!(baseline_coords_type)
        )
    );
}
pub type mavlink_gps_rtk_t = __mavlink_gps_rtk_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps2_rtk_t {
    pub time_last_baseline_ms: u32,
    pub tow: u32,
    pub baseline_a_mm: i32,
    pub baseline_b_mm: i32,
    pub baseline_c_mm: i32,
    pub accuracy: u32,
    pub iar_num_hypotheses: i32,
    pub wn: u16,
    pub rtk_receiver_id: u8,
    pub rtk_health: u8,
    pub rtk_rate: u8,
    pub nsats: u8,
    pub baseline_coords_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_gps2_rtk_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps2_rtk_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps2_rtk_t>(),
        35usize,
        concat!("Size of: ", stringify!(__mavlink_gps2_rtk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps2_rtk_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps2_rtk_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_last_baseline_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(time_last_baseline_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tow) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(tow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_a_mm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(baseline_a_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_b_mm) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(baseline_b_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_c_mm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(baseline_c_mm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accuracy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iar_num_hypotheses) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(iar_num_hypotheses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wn) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(wn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_receiver_id) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(rtk_receiver_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_health) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(rtk_health)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtk_rate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(rtk_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nsats) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(nsats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseline_coords_type) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps2_rtk_t),
            "::",
            stringify!(baseline_coords_type)
        )
    );
}
pub type mavlink_gps2_rtk_t = __mavlink_gps2_rtk_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_imu3_t {
    pub time_boot_ms: u32,
    pub xacc: i16,
    pub yacc: i16,
    pub zacc: i16,
    pub xgyro: i16,
    pub ygyro: i16,
    pub zgyro: i16,
    pub xmag: i16,
    pub ymag: i16,
    pub zmag: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_imu3_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_imu3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_imu3_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_imu3_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_imu3_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_imu3_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xacc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(xacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yacc) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(yacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zacc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(zacc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xgyro) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(xgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ygyro) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(ygyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zgyro) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(zgyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xmag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(xmag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ymag) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(ymag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_imu3_t),
            "::",
            stringify!(zmag)
        )
    );
}
pub type mavlink_scaled_imu3_t = __mavlink_scaled_imu3_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_data_transmission_handshake_t {
    pub size: u32,
    pub width: u16,
    pub height: u16,
    pub packets: u16,
    pub type_: u8,
    pub payload: u8,
    pub jpg_quality: u8,
}
#[test]
fn bindgen_test_layout___mavlink_data_transmission_handshake_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_data_transmission_handshake_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_data_transmission_handshake_t>(),
        13usize,
        concat!("Size of: ", stringify!(__mavlink_data_transmission_handshake_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_data_transmission_handshake_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_data_transmission_handshake_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packets) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(packets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jpg_quality) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_data_transmission_handshake_t),
            "::",
            stringify!(jpg_quality)
        )
    );
}
pub type mavlink_data_transmission_handshake_t = __mavlink_data_transmission_handshake_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_encapsulated_data_t {
    pub seqnr: u16,
    pub data: [u8; 253usize],
}
#[test]
fn bindgen_test_layout___mavlink_encapsulated_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_encapsulated_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_encapsulated_data_t>(),
        255usize,
        concat!("Size of: ", stringify!(__mavlink_encapsulated_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_encapsulated_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_encapsulated_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_encapsulated_data_t),
            "::",
            stringify!(seqnr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_encapsulated_data_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_encapsulated_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_encapsulated_data_t = __mavlink_encapsulated_data_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_distance_sensor_t {
    pub time_boot_ms: u32,
    pub min_distance: u16,
    pub max_distance: u16,
    pub current_distance: u16,
    pub type_: u8,
    pub id: u8,
    pub orientation: u8,
    pub covariance: u8,
}
#[test]
fn bindgen_test_layout___mavlink_distance_sensor_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_distance_sensor_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_distance_sensor_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_distance_sensor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_distance_sensor_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_distance_sensor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_distance) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(min_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_distance) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(max_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_distance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(current_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).covariance) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_distance_sensor_t),
            "::",
            stringify!(covariance)
        )
    );
}
pub type mavlink_distance_sensor_t = __mavlink_distance_sensor_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_terrain_request_t {
    pub mask: u64,
    pub lat: i32,
    pub lon: i32,
    pub grid_spacing: u16,
}
#[test]
fn bindgen_test_layout___mavlink_terrain_request_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_terrain_request_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_terrain_request_t>(),
        18usize,
        concat!("Size of: ", stringify!(__mavlink_terrain_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_terrain_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_terrain_request_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_request_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_request_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_request_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_spacing) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_request_t),
            "::",
            stringify!(grid_spacing)
        )
    );
}
pub type mavlink_terrain_request_t = __mavlink_terrain_request_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_terrain_data_t {
    pub lat: i32,
    pub lon: i32,
    pub grid_spacing: u16,
    pub data: [i16; 16usize],
    pub gridbit: u8,
}
#[test]
fn bindgen_test_layout___mavlink_terrain_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_terrain_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_terrain_data_t>(),
        43usize,
        concat!("Size of: ", stringify!(__mavlink_terrain_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_terrain_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_terrain_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_data_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_data_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grid_spacing) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_data_t),
            "::",
            stringify!(grid_spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_data_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridbit) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_data_t),
            "::",
            stringify!(gridbit)
        )
    );
}
pub type mavlink_terrain_data_t = __mavlink_terrain_data_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_terrain_check_t {
    pub lat: i32,
    pub lon: i32,
}
#[test]
fn bindgen_test_layout___mavlink_terrain_check_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_terrain_check_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_terrain_check_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mavlink_terrain_check_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_terrain_check_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_terrain_check_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_check_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_check_t),
            "::",
            stringify!(lon)
        )
    );
}
pub type mavlink_terrain_check_t = __mavlink_terrain_check_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_terrain_report_t {
    pub lat: i32,
    pub lon: i32,
    pub terrain_height: f32,
    pub current_height: f32,
    pub spacing: u16,
    pub pending: u16,
    pub loaded: u16,
}
#[test]
fn bindgen_test_layout___mavlink_terrain_report_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_terrain_report_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_terrain_report_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_terrain_report_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_terrain_report_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_terrain_report_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).terrain_height) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(terrain_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(current_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spacing) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(spacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pending) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaded) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_terrain_report_t),
            "::",
            stringify!(loaded)
        )
    );
}
pub type mavlink_terrain_report_t = __mavlink_terrain_report_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_pressure2_t {
    pub time_boot_ms: u32,
    pub press_abs: f32,
    pub press_diff: f32,
    pub temperature: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_pressure2_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_pressure2_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_pressure2_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_pressure2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_pressure2_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_pressure2_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure2_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_abs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure2_t),
            "::",
            stringify!(press_abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_diff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure2_t),
            "::",
            stringify!(press_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure2_t),
            "::",
            stringify!(temperature)
        )
    );
}
pub type mavlink_scaled_pressure2_t = __mavlink_scaled_pressure2_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_att_pos_mocap_t {
    pub time_usec: u64,
    pub q: [f32; 4usize],
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout___mavlink_att_pos_mocap_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_att_pos_mocap_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_att_pos_mocap_t>(),
        36usize,
        concat!("Size of: ", stringify!(__mavlink_att_pos_mocap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_att_pos_mocap_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_att_pos_mocap_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_att_pos_mocap_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_att_pos_mocap_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_att_pos_mocap_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_att_pos_mocap_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_att_pos_mocap_t),
            "::",
            stringify!(z)
        )
    );
}
pub type mavlink_att_pos_mocap_t = __mavlink_att_pos_mocap_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_actuator_control_target_t {
    pub time_usec: u64,
    pub controls: [f32; 8usize],
    pub group_mlx: u8,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_set_actuator_control_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_actuator_control_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_actuator_control_target_t>(),
        43usize,
        concat!("Size of: ", stringify!(__mavlink_set_actuator_control_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_actuator_control_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_actuator_control_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_actuator_control_target_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_actuator_control_target_t),
            "::",
            stringify!(controls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_mlx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_actuator_control_target_t),
            "::",
            stringify!(group_mlx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_actuator_control_target_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_actuator_control_target_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_set_actuator_control_target_t = __mavlink_set_actuator_control_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_actuator_control_target_t {
    pub time_usec: u64,
    pub controls: [f32; 8usize],
    pub group_mlx: u8,
}
#[test]
fn bindgen_test_layout___mavlink_actuator_control_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_actuator_control_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_actuator_control_target_t>(),
        41usize,
        concat!("Size of: ", stringify!(__mavlink_actuator_control_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_actuator_control_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_actuator_control_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_actuator_control_target_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).controls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_actuator_control_target_t),
            "::",
            stringify!(controls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group_mlx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_actuator_control_target_t),
            "::",
            stringify!(group_mlx)
        )
    );
}
pub type mavlink_actuator_control_target_t = __mavlink_actuator_control_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_altitude_t {
    pub time_usec: u64,
    pub altitude_monotonic: f32,
    pub altitude_amsl: f32,
    pub altitude_local: f32,
    pub altitude_relative: f32,
    pub altitude_terrain: f32,
    pub bottom_clearance: f32,
}
#[test]
fn bindgen_test_layout___mavlink_altitude_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_altitude_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_altitude_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_altitude_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_altitude_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_altitude_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_monotonic) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(altitude_monotonic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_amsl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(altitude_amsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_local) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(altitude_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_relative) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(altitude_relative)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_terrain) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(altitude_terrain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom_clearance) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_altitude_t),
            "::",
            stringify!(bottom_clearance)
        )
    );
}
pub type mavlink_altitude_t = __mavlink_altitude_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_resource_request_t {
    pub request_id: u8,
    pub uri_type: u8,
    pub uri: [u8; 120usize],
    pub transfer_type: u8,
    pub storage: [u8; 120usize],
}
#[test]
fn bindgen_test_layout___mavlink_resource_request_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_resource_request_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_resource_request_t>(),
        243usize,
        concat!("Size of: ", stringify!(__mavlink_resource_request_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_resource_request_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_resource_request_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_resource_request_t),
            "::",
            stringify!(request_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri_type) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_resource_request_t),
            "::",
            stringify!(uri_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_resource_request_t),
            "::",
            stringify!(uri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_type) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_resource_request_t),
            "::",
            stringify!(transfer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_resource_request_t),
            "::",
            stringify!(storage)
        )
    );
}
impl Default for __mavlink_resource_request_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_resource_request_t = __mavlink_resource_request_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_scaled_pressure3_t {
    pub time_boot_ms: u32,
    pub press_abs: f32,
    pub press_diff: f32,
    pub temperature: i16,
}
#[test]
fn bindgen_test_layout___mavlink_scaled_pressure3_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_scaled_pressure3_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_scaled_pressure3_t>(),
        14usize,
        concat!("Size of: ", stringify!(__mavlink_scaled_pressure3_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_scaled_pressure3_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_scaled_pressure3_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure3_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_abs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure3_t),
            "::",
            stringify!(press_abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).press_diff) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure3_t),
            "::",
            stringify!(press_diff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_scaled_pressure3_t),
            "::",
            stringify!(temperature)
        )
    );
}
pub type mavlink_scaled_pressure3_t = __mavlink_scaled_pressure3_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_follow_target_t {
    pub timestamp: u64,
    pub custom_state: u64,
    pub lat: i32,
    pub lon: i32,
    pub alt: f32,
    pub vel: [f32; 3usize],
    pub acc: [f32; 3usize],
    pub attitude_q: [f32; 4usize],
    pub rates: [f32; 3usize],
    pub position_cov: [f32; 3usize],
    pub est_capabilities: u8,
}
#[test]
fn bindgen_test_layout___mavlink_follow_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_follow_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_follow_target_t>(),
        93usize,
        concat!("Size of: ", stringify!(__mavlink_follow_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_follow_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_follow_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(custom_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attitude_q) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(attitude_q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rates) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(rates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position_cov) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(position_cov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).est_capabilities) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_follow_target_t),
            "::",
            stringify!(est_capabilities)
        )
    );
}
pub type mavlink_follow_target_t = __mavlink_follow_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_control_system_state_t {
    pub time_usec: u64,
    pub x_acc: f32,
    pub y_acc: f32,
    pub z_acc: f32,
    pub x_vel: f32,
    pub y_vel: f32,
    pub z_vel: f32,
    pub x_pos: f32,
    pub y_pos: f32,
    pub z_pos: f32,
    pub airspeed: f32,
    pub vel_variance: [f32; 3usize],
    pub pos_variance: [f32; 3usize],
    pub q: [f32; 4usize],
    pub roll_rate: f32,
    pub pitch_rate: f32,
    pub yaw_rate: f32,
}
#[test]
fn bindgen_test_layout___mavlink_control_system_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_control_system_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_control_system_state_t>(),
        100usize,
        concat!("Size of: ", stringify!(__mavlink_control_system_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_control_system_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_control_system_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_acc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(x_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_acc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(y_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_acc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(z_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_vel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(x_vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_vel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(y_vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_vel) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(z_vel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x_pos) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(x_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y_pos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(y_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z_pos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(z_pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).airspeed) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(airspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel_variance) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(vel_variance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_variance) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(pos_variance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll_rate) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(roll_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch_rate) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(pitch_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw_rate) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_control_system_state_t),
            "::",
            stringify!(yaw_rate)
        )
    );
}
pub type mavlink_control_system_state_t = __mavlink_control_system_state_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_battery_status_t {
    pub current_consumed: i32,
    pub energy_consumed: i32,
    pub temperature: i16,
    pub voltages: [u16; 10usize],
    pub current_battery: i16,
    pub id: u8,
    pub battery_function: u8,
    pub type_: u8,
    pub battery_remaining: i8,
}
#[test]
fn bindgen_test_layout___mavlink_battery_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_battery_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_battery_status_t>(),
        36usize,
        concat!("Size of: ", stringify!(__mavlink_battery_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_battery_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_battery_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_consumed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(current_consumed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).energy_consumed) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(energy_consumed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).voltages) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(voltages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_battery) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(current_battery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).battery_function) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(battery_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).battery_remaining) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_battery_status_t),
            "::",
            stringify!(battery_remaining)
        )
    );
}
pub type mavlink_battery_status_t = __mavlink_battery_status_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_autopilot_version_t {
    pub capabilities: u64,
    pub uid: u64,
    pub flight_sw_version: u32,
    pub middleware_sw_version: u32,
    pub os_sw_version: u32,
    pub board_version: u32,
    pub vendor_id: u16,
    pub product_id: u16,
    pub flight_custom_version: [u8; 8usize],
    pub middleware_custom_version: [u8; 8usize],
    pub os_custom_version: [u8; 8usize],
    pub uid2: [u8; 18usize],
}
#[test]
fn bindgen_test_layout___mavlink_autopilot_version_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_autopilot_version_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_autopilot_version_t>(),
        78usize,
        concat!("Size of: ", stringify!(__mavlink_autopilot_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_autopilot_version_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_autopilot_version_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flight_sw_version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(flight_sw_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).middleware_sw_version) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(middleware_sw_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_sw_version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(os_sw_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).board_version) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(board_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flight_custom_version) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(flight_custom_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).middleware_custom_version) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(middleware_custom_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_custom_version) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(os_custom_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_autopilot_version_t),
            "::",
            stringify!(uid2)
        )
    );
}
pub type mavlink_autopilot_version_t = __mavlink_autopilot_version_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_landing_target_t {
    pub time_usec: u64,
    pub angle_x: f32,
    pub angle_y: f32,
    pub distance: f32,
    pub size_x: f32,
    pub size_y: f32,
    pub target_num: u8,
    pub frame: u8,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub q: [f32; 4usize],
    pub type_: u8,
    pub position_valid: u8,
}
#[test]
fn bindgen_test_layout___mavlink_landing_target_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_landing_target_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_landing_target_t>(),
        60usize,
        concat!("Size of: ", stringify!(__mavlink_landing_target_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_landing_target_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_landing_target_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(angle_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).angle_y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(angle_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_x) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(size_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_y) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(size_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(target_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position_valid) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_landing_target_t),
            "::",
            stringify!(position_valid)
        )
    );
}
pub type mavlink_landing_target_t = __mavlink_landing_target_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_estimator_status_t {
    pub time_usec: u64,
    pub vel_ratio: f32,
    pub pos_horiz_ratio: f32,
    pub pos_vert_ratio: f32,
    pub mag_ratio: f32,
    pub hagl_ratio: f32,
    pub tas_ratio: f32,
    pub pos_horiz_accuracy: f32,
    pub pos_vert_accuracy: f32,
    pub flags: u16,
}
#[test]
fn bindgen_test_layout___mavlink_estimator_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_estimator_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_estimator_status_t>(),
        42usize,
        concat!("Size of: ", stringify!(__mavlink_estimator_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_estimator_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_estimator_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vel_ratio) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(vel_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_horiz_ratio) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(pos_horiz_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_vert_ratio) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(pos_vert_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag_ratio) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(mag_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hagl_ratio) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(hagl_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tas_ratio) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(tas_ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_horiz_accuracy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(pos_horiz_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos_vert_accuracy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(pos_vert_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_estimator_status_t),
            "::",
            stringify!(flags)
        )
    );
}
pub type mavlink_estimator_status_t = __mavlink_estimator_status_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_wind_cov_t {
    pub time_usec: u64,
    pub wind_x: f32,
    pub wind_y: f32,
    pub wind_z: f32,
    pub var_horiz: f32,
    pub var_vert: f32,
    pub wind_alt: f32,
    pub horiz_accuracy: f32,
    pub vert_accuracy: f32,
}
#[test]
fn bindgen_test_layout___mavlink_wind_cov_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_wind_cov_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_wind_cov_t>(),
        40usize,
        concat!("Size of: ", stringify!(__mavlink_wind_cov_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_wind_cov_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_wind_cov_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wind_x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(wind_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wind_y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(wind_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wind_z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(wind_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var_horiz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(var_horiz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var_vert) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(var_vert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wind_alt) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(wind_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_accuracy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(horiz_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_accuracy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wind_cov_t),
            "::",
            stringify!(vert_accuracy)
        )
    );
}
pub type mavlink_wind_cov_t = __mavlink_wind_cov_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_gps_input_t {
    pub time_usec: u64,
    pub time_week_ms: u32,
    pub lat: i32,
    pub lon: i32,
    pub alt: f32,
    pub hdop: f32,
    pub vdop: f32,
    pub vn: f32,
    pub ve: f32,
    pub vd: f32,
    pub speed_accuracy: f32,
    pub horiz_accuracy: f32,
    pub vert_accuracy: f32,
    pub ignore_flags: u16,
    pub time_week: u16,
    pub gps_id: u8,
    pub fix_type: u8,
    pub satellites_visible: u8,
}
#[test]
fn bindgen_test_layout___mavlink_gps_input_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_input_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_input_t>(),
        63usize,
        concat!("Size of: ", stringify!(__mavlink_gps_input_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_input_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_input_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_week_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(time_week_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdop) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(hdop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdop) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(vdop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(vn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ve) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(ve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(vd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed_accuracy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(speed_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horiz_accuracy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(horiz_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vert_accuracy) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(vert_accuracy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(ignore_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_week) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(time_week)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gps_id) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(gps_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fix_type) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(fix_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).satellites_visible) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_input_t),
            "::",
            stringify!(satellites_visible)
        )
    );
}
pub type mavlink_gps_input_t = __mavlink_gps_input_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_gps_rtcm_data_t {
    pub flags: u8,
    pub len: u8,
    pub data: [u8; 180usize],
}
#[test]
fn bindgen_test_layout___mavlink_gps_rtcm_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_gps_rtcm_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_gps_rtcm_data_t>(),
        182usize,
        concat!("Size of: ", stringify!(__mavlink_gps_rtcm_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_gps_rtcm_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_gps_rtcm_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtcm_data_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtcm_data_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_gps_rtcm_data_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_gps_rtcm_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_gps_rtcm_data_t = __mavlink_gps_rtcm_data_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_high_latency_t {
    pub custom_mode: u32,
    pub latitude: i32,
    pub longitude: i32,
    pub roll: i16,
    pub pitch: i16,
    pub heading: u16,
    pub heading_sp: i16,
    pub altitude_amsl: i16,
    pub altitude_sp: i16,
    pub wp_distance: u16,
    pub base_mode: u8,
    pub landed_state: u8,
    pub throttle: i8,
    pub airspeed: u8,
    pub airspeed_sp: u8,
    pub groundspeed: u8,
    pub climb_rate: i8,
    pub gps_nsat: u8,
    pub gps_fix_type: u8,
    pub battery_remaining: u8,
    pub temperature: i8,
    pub temperature_air: i8,
    pub failsafe: u8,
    pub wp_num: u8,
}
#[test]
fn bindgen_test_layout___mavlink_high_latency_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_high_latency_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_high_latency_t>(),
        40usize,
        concat!("Size of: ", stringify!(__mavlink_high_latency_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_high_latency_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_high_latency_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(custom_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(heading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading_sp) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(heading_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_amsl) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(altitude_amsl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_sp) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(altitude_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wp_distance) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(wp_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_mode) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(base_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landed_state) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(landed_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttle) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(throttle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).airspeed) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(airspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).airspeed_sp) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(airspeed_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groundspeed) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(groundspeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).climb_rate) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(climb_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gps_nsat) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(gps_nsat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gps_fix_type) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(gps_fix_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).battery_remaining) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(battery_remaining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature_air) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(temperature_air)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failsafe) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(failsafe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wp_num) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_high_latency_t),
            "::",
            stringify!(wp_num)
        )
    );
}
pub type mavlink_high_latency_t = __mavlink_high_latency_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_vibration_t {
    pub time_usec: u64,
    pub vibration_x: f32,
    pub vibration_y: f32,
    pub vibration_z: f32,
    pub clipping_0: u32,
    pub clipping_1: u32,
    pub clipping_2: u32,
}
#[test]
fn bindgen_test_layout___mavlink_vibration_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_vibration_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_vibration_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_vibration_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_vibration_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_vibration_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vibration_x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(vibration_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vibration_y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(vibration_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vibration_z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(vibration_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping_0) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(clipping_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping_1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(clipping_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipping_2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_vibration_t),
            "::",
            stringify!(clipping_2)
        )
    );
}
pub type mavlink_vibration_t = __mavlink_vibration_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_home_position_t {
    pub latitude: i32,
    pub longitude: i32,
    pub altitude: i32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub q: [f32; 4usize],
    pub approach_x: f32,
    pub approach_y: f32,
    pub approach_z: f32,
    pub time_usec: u64,
}
#[test]
fn bindgen_test_layout___mavlink_home_position_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_home_position_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_home_position_t>(),
        60usize,
        concat!("Size of: ", stringify!(__mavlink_home_position_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_home_position_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_home_position_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_x) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(approach_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_y) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(approach_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_z) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(approach_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_home_position_t),
            "::",
            stringify!(time_usec)
        )
    );
}
pub type mavlink_home_position_t = __mavlink_home_position_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_set_home_position_t {
    pub latitude: i32,
    pub longitude: i32,
    pub altitude: i32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub q: [f32; 4usize],
    pub approach_x: f32,
    pub approach_y: f32,
    pub approach_z: f32,
    pub target_system: u8,
    pub time_usec: u64,
}
#[test]
fn bindgen_test_layout___mavlink_set_home_position_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_home_position_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_home_position_t>(),
        61usize,
        concat!("Size of: ", stringify!(__mavlink_set_home_position_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_home_position_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_home_position_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).latitude) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(latitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longitude) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(longitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_x) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(approach_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_y) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(approach_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).approach_z) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(approach_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_home_position_t),
            "::",
            stringify!(time_usec)
        )
    );
}
pub type mavlink_set_home_position_t = __mavlink_set_home_position_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_message_interval_t {
    pub interval_us: i32,
    pub message_id: u16,
}
#[test]
fn bindgen_test_layout___mavlink_message_interval_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_message_interval_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_message_interval_t>(),
        6usize,
        concat!("Size of: ", stringify!(__mavlink_message_interval_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_message_interval_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_message_interval_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval_us) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_interval_t),
            "::",
            stringify!(interval_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_message_interval_t),
            "::",
            stringify!(message_id)
        )
    );
}
pub type mavlink_message_interval_t = __mavlink_message_interval_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_extended_sys_state_t {
    pub vtol_state: u8,
    pub landed_state: u8,
}
#[test]
fn bindgen_test_layout___mavlink_extended_sys_state_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_extended_sys_state_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_extended_sys_state_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_extended_sys_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_extended_sys_state_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_extended_sys_state_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtol_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_extended_sys_state_t),
            "::",
            stringify!(vtol_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).landed_state) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_extended_sys_state_t),
            "::",
            stringify!(landed_state)
        )
    );
}
pub type mavlink_extended_sys_state_t = __mavlink_extended_sys_state_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_adsb_vehicle_t {
    pub ICAO_address: u32,
    pub lat: i32,
    pub lon: i32,
    pub altitude: i32,
    pub heading: u16,
    pub hor_velocity: u16,
    pub ver_velocity: i16,
    pub flags: u16,
    pub squawk: u16,
    pub altitude_type: u8,
    pub callsign: [::std::os::raw::c_char; 9usize],
    pub emitter_type: u8,
    pub tslc: u8,
}
#[test]
fn bindgen_test_layout___mavlink_adsb_vehicle_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_adsb_vehicle_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_adsb_vehicle_t>(),
        38usize,
        concat!("Size of: ", stringify!(__mavlink_adsb_vehicle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_adsb_vehicle_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_adsb_vehicle_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICAO_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(ICAO_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(altitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(heading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hor_velocity) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(hor_velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver_velocity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(ver_velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).squawk) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(squawk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_type) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(altitude_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callsign) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(callsign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emitter_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(emitter_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tslc) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_adsb_vehicle_t),
            "::",
            stringify!(tslc)
        )
    );
}
pub type mavlink_adsb_vehicle_t = __mavlink_adsb_vehicle_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_collision_t {
    pub id: u32,
    pub time_to_minimum_delta: f32,
    pub altitude_minimum_delta: f32,
    pub horizontal_minimum_delta: f32,
    pub src: u8,
    pub action: u8,
    pub threat_level: u8,
}
#[test]
fn bindgen_test_layout___mavlink_collision_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_collision_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_collision_t>(),
        19usize,
        concat!("Size of: ", stringify!(__mavlink_collision_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_collision_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_collision_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_to_minimum_delta) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(time_to_minimum_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).altitude_minimum_delta) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(altitude_minimum_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal_minimum_delta) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(horizontal_minimum_delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threat_level) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_collision_t),
            "::",
            stringify!(threat_level)
        )
    );
}
pub type mavlink_collision_t = __mavlink_collision_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_v2_extension_t {
    pub message_type: u16,
    pub target_network: u8,
    pub target_system: u8,
    pub target_component: u8,
    pub payload: [u8; 249usize],
}
#[test]
fn bindgen_test_layout___mavlink_v2_extension_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_v2_extension_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_v2_extension_t>(),
        254usize,
        concat!("Size of: ", stringify!(__mavlink_v2_extension_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_v2_extension_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_v2_extension_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_v2_extension_t),
            "::",
            stringify!(message_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_network) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_v2_extension_t),
            "::",
            stringify!(target_network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_v2_extension_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_v2_extension_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).payload) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_v2_extension_t),
            "::",
            stringify!(payload)
        )
    );
}
impl Default for __mavlink_v2_extension_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_v2_extension_t = __mavlink_v2_extension_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_memory_vect_t {
    pub address: u16,
    pub ver: u8,
    pub type_: u8,
    pub value: [i8; 32usize],
}
#[test]
fn bindgen_test_layout___mavlink_memory_vect_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_memory_vect_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_memory_vect_t>(),
        36usize,
        concat!("Size of: ", stringify!(__mavlink_memory_vect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_memory_vect_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_memory_vect_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_memory_vect_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_memory_vect_t),
            "::",
            stringify!(ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_memory_vect_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_memory_vect_t),
            "::",
            stringify!(value)
        )
    );
}
pub type mavlink_memory_vect_t = __mavlink_memory_vect_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_debug_vect_t {
    pub time_usec: u64,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub name: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout___mavlink_debug_vect_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_debug_vect_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_debug_vect_t>(),
        30usize,
        concat!("Size of: ", stringify!(__mavlink_debug_vect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_debug_vect_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_debug_vect_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_vect_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_vect_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_vect_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_vect_t),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_vect_t),
            "::",
            stringify!(name)
        )
    );
}
pub type mavlink_debug_vect_t = __mavlink_debug_vect_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_named_value_float_t {
    pub time_boot_ms: u32,
    pub value: f32,
    pub name: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout___mavlink_named_value_float_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_named_value_float_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_named_value_float_t>(),
        18usize,
        concat!("Size of: ", stringify!(__mavlink_named_value_float_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_named_value_float_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_named_value_float_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_float_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_float_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_float_t),
            "::",
            stringify!(name)
        )
    );
}
pub type mavlink_named_value_float_t = __mavlink_named_value_float_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_named_value_int_t {
    pub time_boot_ms: u32,
    pub value: i32,
    pub name: [::std::os::raw::c_char; 10usize],
}
#[test]
fn bindgen_test_layout___mavlink_named_value_int_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_named_value_int_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_named_value_int_t>(),
        18usize,
        concat!("Size of: ", stringify!(__mavlink_named_value_int_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_named_value_int_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_named_value_int_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_int_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_int_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_named_value_int_t),
            "::",
            stringify!(name)
        )
    );
}
pub type mavlink_named_value_int_t = __mavlink_named_value_int_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_statustext_t {
    pub severity: u8,
    pub text: [::std::os::raw::c_char; 50usize],
}
#[test]
fn bindgen_test_layout___mavlink_statustext_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_statustext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_statustext_t>(),
        51usize,
        concat!("Size of: ", stringify!(__mavlink_statustext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_statustext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_statustext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).severity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_statustext_t),
            "::",
            stringify!(severity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_statustext_t),
            "::",
            stringify!(text)
        )
    );
}
impl Default for __mavlink_statustext_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_statustext_t = __mavlink_statustext_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_debug_t {
    pub time_boot_ms: u32,
    pub value: f32,
    pub ind: u8,
}
#[test]
fn bindgen_test_layout___mavlink_debug_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_debug_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_debug_t>(),
        9usize,
        concat!("Size of: ", stringify!(__mavlink_debug_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_debug_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_debug_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_debug_t),
            "::",
            stringify!(ind)
        )
    );
}
pub type mavlink_debug_t = __mavlink_debug_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_setup_signing_t {
    pub initial_timestamp: u64,
    pub target_system: u8,
    pub target_component: u8,
    pub secret_key: [u8; 32usize],
}
#[test]
fn bindgen_test_layout___mavlink_setup_signing_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_setup_signing_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_setup_signing_t>(),
        42usize,
        concat!("Size of: ", stringify!(__mavlink_setup_signing_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_setup_signing_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_setup_signing_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initial_timestamp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_setup_signing_t),
            "::",
            stringify!(initial_timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_setup_signing_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_setup_signing_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secret_key) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_setup_signing_t),
            "::",
            stringify!(secret_key)
        )
    );
}
pub type mavlink_setup_signing_t = __mavlink_setup_signing_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_button_change_t {
    pub time_boot_ms: u32,
    pub last_change_ms: u32,
    pub state: u8,
}
#[test]
fn bindgen_test_layout___mavlink_button_change_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_button_change_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_button_change_t>(),
        9usize,
        concat!("Size of: ", stringify!(__mavlink_button_change_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_button_change_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_button_change_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_button_change_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_change_ms) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_button_change_t),
            "::",
            stringify!(last_change_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_button_change_t),
            "::",
            stringify!(state)
        )
    );
}
pub type mavlink_button_change_t = __mavlink_button_change_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_play_tune_t {
    pub target_system: u8,
    pub target_component: u8,
    pub tune: [::std::os::raw::c_char; 30usize],
}
#[test]
fn bindgen_test_layout___mavlink_play_tune_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_play_tune_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_play_tune_t>(),
        32usize,
        concat!("Size of: ", stringify!(__mavlink_play_tune_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_play_tune_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_play_tune_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_play_tune_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_play_tune_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tune) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_play_tune_t),
            "::",
            stringify!(tune)
        )
    );
}
pub type mavlink_play_tune_t = __mavlink_play_tune_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_camera_information_t {
    pub time_boot_ms: u32,
    pub firmware_version: u32,
    pub focal_length: f32,
    pub sensor_size_h: f32,
    pub sensor_size_v: f32,
    pub flags: u32,
    pub resolution_h: u16,
    pub resolution_v: u16,
    pub cam_definition_version: u16,
    pub vendor_name: [u8; 32usize],
    pub model_name: [u8; 32usize],
    pub lens_id: u8,
    pub cam_definition_uri: [::std::os::raw::c_char; 140usize],
}
#[test]
fn bindgen_test_layout___mavlink_camera_information_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_camera_information_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_camera_information_t>(),
        235usize,
        concat!("Size of: ", stringify!(__mavlink_camera_information_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_camera_information_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_camera_information_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firmware_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(firmware_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).focal_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(focal_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_size_h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(sensor_size_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_size_v) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(sensor_size_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_h) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(resolution_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_v) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(resolution_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cam_definition_version) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(cam_definition_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_name) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(vendor_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model_name) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(model_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lens_id) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(lens_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cam_definition_uri) as usize - ptr as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_information_t),
            "::",
            stringify!(cam_definition_uri)
        )
    );
}
impl Default for __mavlink_camera_information_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_camera_information_t = __mavlink_camera_information_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_camera_settings_t {
    pub time_boot_ms: u32,
    pub mode_id: u8,
}
#[test]
fn bindgen_test_layout___mavlink_camera_settings_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_camera_settings_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_camera_settings_t>(),
        5usize,
        concat!("Size of: ", stringify!(__mavlink_camera_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_camera_settings_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_camera_settings_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_settings_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_settings_t),
            "::",
            stringify!(mode_id)
        )
    );
}
pub type mavlink_camera_settings_t = __mavlink_camera_settings_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_storage_information_t {
    pub time_boot_ms: u32,
    pub total_capacity: f32,
    pub used_capacity: f32,
    pub available_capacity: f32,
    pub read_speed: f32,
    pub write_speed: f32,
    pub storage_id: u8,
    pub storage_count: u8,
    pub status: u8,
}
#[test]
fn bindgen_test_layout___mavlink_storage_information_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_storage_information_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_storage_information_t>(),
        27usize,
        concat!("Size of: ", stringify!(__mavlink_storage_information_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_storage_information_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_storage_information_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(total_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_capacity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(used_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).available_capacity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(available_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_speed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(read_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_speed) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(write_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(storage_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage_count) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(storage_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_storage_information_t),
            "::",
            stringify!(status)
        )
    );
}
pub type mavlink_storage_information_t = __mavlink_storage_information_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_camera_capture_status_t {
    pub time_boot_ms: u32,
    pub image_interval: f32,
    pub recording_time_ms: u32,
    pub available_capacity: f32,
    pub image_status: u8,
    pub video_status: u8,
}
#[test]
fn bindgen_test_layout___mavlink_camera_capture_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_camera_capture_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_camera_capture_status_t>(),
        18usize,
        concat!("Size of: ", stringify!(__mavlink_camera_capture_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_camera_capture_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_camera_capture_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_interval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(image_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recording_time_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(recording_time_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).available_capacity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(available_capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_status) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(image_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video_status) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_capture_status_t),
            "::",
            stringify!(video_status)
        )
    );
}
pub type mavlink_camera_capture_status_t = __mavlink_camera_capture_status_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_camera_image_captured_t {
    pub time_utc: u64,
    pub time_boot_ms: u32,
    pub lat: i32,
    pub lon: i32,
    pub alt: i32,
    pub relative_alt: i32,
    pub q: [f32; 4usize],
    pub image_index: i32,
    pub camera_id: u8,
    pub capture_result: i8,
    pub file_url: [::std::os::raw::c_char; 205usize],
}
#[test]
fn bindgen_test_layout___mavlink_camera_image_captured_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_camera_image_captured_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_camera_image_captured_t>(),
        255usize,
        concat!("Size of: ", stringify!(__mavlink_camera_image_captured_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_camera_image_captured_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_camera_image_captured_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_utc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(time_utc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lat) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).relative_alt) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(relative_alt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_index) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(image_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camera_id) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(camera_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capture_result) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(capture_result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file_url) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_camera_image_captured_t),
            "::",
            stringify!(file_url)
        )
    );
}
impl Default for __mavlink_camera_image_captured_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_camera_image_captured_t = __mavlink_camera_image_captured_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_flight_information_t {
    pub arming_time_utc: u64,
    pub takeoff_time_utc: u64,
    pub flight_uuid: u64,
    pub time_boot_ms: u32,
}
#[test]
fn bindgen_test_layout___mavlink_flight_information_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_flight_information_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_flight_information_t>(),
        28usize,
        concat!("Size of: ", stringify!(__mavlink_flight_information_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_flight_information_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_flight_information_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arming_time_utc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_flight_information_t),
            "::",
            stringify!(arming_time_utc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).takeoff_time_utc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_flight_information_t),
            "::",
            stringify!(takeoff_time_utc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flight_uuid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_flight_information_t),
            "::",
            stringify!(flight_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_flight_information_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
}
pub type mavlink_flight_information_t = __mavlink_flight_information_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_mount_orientation_t {
    pub time_boot_ms: u32,
    pub roll: f32,
    pub pitch: f32,
    pub yaw: f32,
}
#[test]
fn bindgen_test_layout___mavlink_mount_orientation_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_mount_orientation_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_mount_orientation_t>(),
        16usize,
        concat!("Size of: ", stringify!(__mavlink_mount_orientation_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_mount_orientation_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_mount_orientation_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_boot_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mount_orientation_t),
            "::",
            stringify!(time_boot_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roll) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mount_orientation_t),
            "::",
            stringify!(roll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mount_orientation_t),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yaw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_mount_orientation_t),
            "::",
            stringify!(yaw)
        )
    );
}
pub type mavlink_mount_orientation_t = __mavlink_mount_orientation_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_logging_data_t {
    pub sequence: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub length: u8,
    pub first_message_offset: u8,
    pub data: [u8; 249usize],
}
#[test]
fn bindgen_test_layout___mavlink_logging_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_logging_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_logging_data_t>(),
        255usize,
        concat!("Size of: ", stringify!(__mavlink_logging_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_logging_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_logging_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_message_offset) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(first_message_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_logging_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_logging_data_t = __mavlink_logging_data_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_logging_data_acked_t {
    pub sequence: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub length: u8,
    pub first_message_offset: u8,
    pub data: [u8; 249usize],
}
#[test]
fn bindgen_test_layout___mavlink_logging_data_acked_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_logging_data_acked_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_logging_data_acked_t>(),
        255usize,
        concat!("Size of: ", stringify!(__mavlink_logging_data_acked_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_logging_data_acked_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_logging_data_acked_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_message_offset) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(first_message_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_data_acked_t),
            "::",
            stringify!(data)
        )
    );
}
impl Default for __mavlink_logging_data_acked_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_logging_data_acked_t = __mavlink_logging_data_acked_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_logging_ack_t {
    pub sequence: u16,
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_logging_ack_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_logging_ack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_logging_ack_t>(),
        4usize,
        concat!("Size of: ", stringify!(__mavlink_logging_ack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_logging_ack_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_logging_ack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequence) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_ack_t),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_ack_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_logging_ack_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_logging_ack_t = __mavlink_logging_ack_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_video_stream_information_t {
    pub framerate: f32,
    pub bitrate: u32,
    pub resolution_h: u16,
    pub resolution_v: u16,
    pub rotation: u16,
    pub camera_id: u8,
    pub status: u8,
    pub uri: [::std::os::raw::c_char; 230usize],
}
#[test]
fn bindgen_test_layout___mavlink_video_stream_information_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_video_stream_information_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_video_stream_information_t>(),
        246usize,
        concat!("Size of: ", stringify!(__mavlink_video_stream_information_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_video_stream_information_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_video_stream_information_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framerate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_h) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(resolution_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_v) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(resolution_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camera_id) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(camera_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_video_stream_information_t),
            "::",
            stringify!(uri)
        )
    );
}
impl Default for __mavlink_video_stream_information_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_video_stream_information_t = __mavlink_video_stream_information_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_set_video_stream_settings_t {
    pub framerate: f32,
    pub bitrate: u32,
    pub resolution_h: u16,
    pub resolution_v: u16,
    pub rotation: u16,
    pub target_system: u8,
    pub target_component: u8,
    pub camera_id: u8,
    pub uri: [::std::os::raw::c_char; 230usize],
}
#[test]
fn bindgen_test_layout___mavlink_set_video_stream_settings_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_set_video_stream_settings_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_set_video_stream_settings_t>(),
        247usize,
        concat!("Size of: ", stringify!(__mavlink_set_video_stream_settings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_set_video_stream_settings_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_set_video_stream_settings_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framerate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(framerate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitrate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(bitrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_h) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(resolution_h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolution_v) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(resolution_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(rotation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).camera_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(camera_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uri) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_set_video_stream_settings_t),
            "::",
            stringify!(uri)
        )
    );
}
impl Default for __mavlink_set_video_stream_settings_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_set_video_stream_settings_t = __mavlink_set_video_stream_settings_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_wifi_config_ap_t {
    pub ssid: [::std::os::raw::c_char; 32usize],
    pub password: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___mavlink_wifi_config_ap_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_wifi_config_ap_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_wifi_config_ap_t>(),
        96usize,
        concat!("Size of: ", stringify!(__mavlink_wifi_config_ap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_wifi_config_ap_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_wifi_config_ap_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wifi_config_ap_t),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).password) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_wifi_config_ap_t),
            "::",
            stringify!(password)
        )
    );
}
impl Default for __mavlink_wifi_config_ap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_wifi_config_ap_t = __mavlink_wifi_config_ap_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_protocol_version_t {
    pub version: u16,
    pub min_version: u16,
    pub max_version: u16,
    pub spec_version_hash: [u8; 8usize],
    pub library_version_hash: [u8; 8usize],
}
#[test]
fn bindgen_test_layout___mavlink_protocol_version_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_protocol_version_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_protocol_version_t>(),
        22usize,
        concat!("Size of: ", stringify!(__mavlink_protocol_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_protocol_version_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_protocol_version_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_protocol_version_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_version) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_protocol_version_t),
            "::",
            stringify!(min_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_protocol_version_t),
            "::",
            stringify!(max_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spec_version_hash) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_protocol_version_t),
            "::",
            stringify!(spec_version_hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).library_version_hash) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_protocol_version_t),
            "::",
            stringify!(library_version_hash)
        )
    );
}
pub type mavlink_protocol_version_t = __mavlink_protocol_version_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_uavcan_node_status_t {
    pub time_usec: u64,
    pub uptime_sec: u32,
    pub vendor_specific_status_code: u16,
    pub health: u8,
    pub mode: u8,
    pub sub_mode: u8,
}
#[test]
fn bindgen_test_layout___mavlink_uavcan_node_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_uavcan_node_status_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_uavcan_node_status_t>(),
        17usize,
        concat!("Size of: ", stringify!(__mavlink_uavcan_node_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_uavcan_node_status_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_uavcan_node_status_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uptime_sec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(uptime_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_specific_status_code) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(vendor_specific_status_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).health) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(health)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sub_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_status_t),
            "::",
            stringify!(sub_mode)
        )
    );
}
pub type mavlink_uavcan_node_status_t = __mavlink_uavcan_node_status_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_uavcan_node_info_t {
    pub time_usec: u64,
    pub uptime_sec: u32,
    pub sw_vcs_commit: u32,
    pub name: [::std::os::raw::c_char; 80usize],
    pub hw_version_major: u8,
    pub hw_version_minor: u8,
    pub hw_unique_id: [u8; 16usize],
    pub sw_version_major: u8,
    pub sw_version_minor: u8,
}
#[test]
fn bindgen_test_layout___mavlink_uavcan_node_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_uavcan_node_info_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_uavcan_node_info_t>(),
        116usize,
        concat!("Size of: ", stringify!(__mavlink_uavcan_node_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_uavcan_node_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_uavcan_node_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uptime_sec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(uptime_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_vcs_commit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(sw_vcs_commit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_version_major) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(hw_version_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_version_minor) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(hw_version_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_unique_id) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(hw_unique_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_version_major) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(sw_version_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_version_minor) as usize - ptr as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_uavcan_node_info_t),
            "::",
            stringify!(sw_version_minor)
        )
    );
}
impl Default for __mavlink_uavcan_node_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_uavcan_node_info_t = __mavlink_uavcan_node_info_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_ext_request_read_t {
    pub param_index: i16,
    pub target_system: u8,
    pub target_component: u8,
    pub param_id: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___mavlink_param_ext_request_read_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_ext_request_read_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_ext_request_read_t>(),
        20usize,
        concat!("Size of: ", stringify!(__mavlink_param_ext_request_read_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_ext_request_read_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_ext_request_read_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_index) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_read_t),
            "::",
            stringify!(param_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_read_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_read_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_read_t),
            "::",
            stringify!(param_id)
        )
    );
}
pub type mavlink_param_ext_request_read_t = __mavlink_param_ext_request_read_t;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __mavlink_param_ext_request_list_t {
    pub target_system: u8,
    pub target_component: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_ext_request_list_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_ext_request_list_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_ext_request_list_t>(),
        2usize,
        concat!("Size of: ", stringify!(__mavlink_param_ext_request_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_ext_request_list_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_ext_request_list_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_list_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_request_list_t),
            "::",
            stringify!(target_component)
        )
    );
}
pub type mavlink_param_ext_request_list_t = __mavlink_param_ext_request_list_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_param_ext_value_t {
    pub param_count: u16,
    pub param_index: u16,
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub param_value: [::std::os::raw::c_char; 128usize],
    pub param_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_ext_value_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_ext_value_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_ext_value_t>(),
        149usize,
        concat!("Size of: ", stringify!(__mavlink_param_ext_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_ext_value_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_ext_value_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_value_t),
            "::",
            stringify!(param_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_value_t),
            "::",
            stringify!(param_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_value_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_value_t),
            "::",
            stringify!(param_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_value_t),
            "::",
            stringify!(param_type)
        )
    );
}
impl Default for __mavlink_param_ext_value_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_param_ext_value_t = __mavlink_param_ext_value_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_param_ext_set_t {
    pub target_system: u8,
    pub target_component: u8,
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub param_value: [::std::os::raw::c_char; 128usize],
    pub param_type: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_ext_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_ext_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_ext_set_t>(),
        147usize,
        concat!("Size of: ", stringify!(__mavlink_param_ext_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_ext_set_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_ext_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_system) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_set_t),
            "::",
            stringify!(target_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target_component) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_set_t),
            "::",
            stringify!(target_component)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_set_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_set_t),
            "::",
            stringify!(param_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_set_t),
            "::",
            stringify!(param_type)
        )
    );
}
impl Default for __mavlink_param_ext_set_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_param_ext_set_t = __mavlink_param_ext_set_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_param_ext_ack_t {
    pub param_id: [::std::os::raw::c_char; 16usize],
    pub param_value: [::std::os::raw::c_char; 128usize],
    pub param_type: u8,
    pub param_result: u8,
}
#[test]
fn bindgen_test_layout___mavlink_param_ext_ack_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_param_ext_ack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_param_ext_ack_t>(),
        146usize,
        concat!("Size of: ", stringify!(__mavlink_param_ext_ack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_param_ext_ack_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_param_ext_ack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_ack_t),
            "::",
            stringify!(param_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_ack_t),
            "::",
            stringify!(param_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_ack_t),
            "::",
            stringify!(param_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_result) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_param_ext_ack_t),
            "::",
            stringify!(param_result)
        )
    );
}
impl Default for __mavlink_param_ext_ack_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_param_ext_ack_t = __mavlink_param_ext_ack_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct __mavlink_obstacle_distance_t {
    pub time_usec: u64,
    pub distances: [u16; 72usize],
    pub min_distance: u16,
    pub max_distance: u16,
    pub sensor_type: u8,
    pub increment: u8,
}
#[test]
fn bindgen_test_layout___mavlink_obstacle_distance_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mavlink_obstacle_distance_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mavlink_obstacle_distance_t>(),
        158usize,
        concat!("Size of: ", stringify!(__mavlink_obstacle_distance_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mavlink_obstacle_distance_t>(),
        1usize,
        concat!("Alignment of ", stringify!(__mavlink_obstacle_distance_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_usec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(time_usec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distances) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(distances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_distance) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(min_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_distance) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(max_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_type) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(sensor_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).increment) as usize - ptr as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(__mavlink_obstacle_distance_t),
            "::",
            stringify!(increment)
        )
    );
}
impl Default for __mavlink_obstacle_distance_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mavlink_obstacle_distance_t = __mavlink_obstacle_distance_t;
extern "C" {
    pub fn rc_mav_send_heartbeat_abbreviated() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_heartbeat(
        custom_mode: u32,
        type_: u8,
        autopilot: u8,
        base_mode: u8,
        system_status: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_heartbeat(data: *mut mavlink_heartbeat_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_attitude(
        roll: f32,
        pitch: f32,
        yaw: f32,
        rollspeed: f32,
        pitchspeed: f32,
        yawspeed: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_attitude(data: *mut mavlink_attitude_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_attitude_quaternion(
        q1: f32,
        q2: f32,
        q3: f32,
        q4: f32,
        rollspeed: f32,
        pitchspeed: f32,
        yawspeed: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_attitude_quaternion(data: *mut mavlink_attitude_quaternion_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_local_position_ned(x: f32, y: f32, z: f32, vx: f32, vy: f32, vz: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_local_position_ned(data: *mut mavlink_local_position_ned_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_global_position_int(
        lat: i32,
        lon: i32,
        alt: i32,
        relative_alt: i32,
        vx: i16,
        vy: i16,
        vz: i16,
        hdg: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_global_position_int(data: *mut mavlink_global_position_int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_set_position_target_local_ned(
        x: f32,
        y: f32,
        z: f32,
        vx: f32,
        vy: f32,
        vz: f32,
        afx: f32,
        afy: f32,
        afz: f32,
        yaw: f32,
        yaw_rate: f32,
        type_mask: u16,
        target_system: u8,
        target_component: u8,
        coordinate_frame: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_set_position_target_local_ned(
        data: *mut mavlink_set_position_target_local_ned_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_set_position_target_global_int(
        lat_int: i32,
        lon_int: i32,
        alt: f32,
        vx: f32,
        vy: f32,
        vz: f32,
        afx: f32,
        afy: f32,
        afz: f32,
        yaw: f32,
        yaw_rate: f32,
        type_mask: u16,
        target_system: u8,
        target_component: u8,
        coordinate_frame: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_set_position_target_global_int(
        data: *mut mavlink_set_position_target_global_int_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_gps_raw_int(
        lat: i32,
        lon: i32,
        alt: i32,
        eph: u16,
        epv: u16,
        vel: u16,
        cog: u16,
        fix_type: u8,
        satellites_visible: u8,
        alt_ellipsoid: i32,
        h_acc: u32,
        v_acc: u32,
        vel_acc: u32,
        hdg_acc: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_gps_raw_int(data: *mut mavlink_gps_raw_int_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_scaled_pressure(press_abs: f32, press_diff: f32, temperature: i16) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_scaled_pressure(data: *mut mavlink_scaled_pressure_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_servo_output_raw(
        servo1_raw: u16,
        servo2_raw: u16,
        servo3_raw: u16,
        servo4_raw: u16,
        servo5_raw: u16,
        servo6_raw: u16,
        servo7_raw: u16,
        servo8_raw: u16,
        port: u8,
        servo9_raw: u16,
        servo10_raw: u16,
        servo11_raw: u16,
        servo12_raw: u16,
        servo13_raw: u16,
        servo14_raw: u16,
        servo15_raw: u16,
        servo16_raw: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_servo_output_raw(data: *mut mavlink_servo_output_raw_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_sys_status(
        onboard_control_sensors_present: u32,
        onboard_control_sensors_enabled: u32,
        onboard_control_sensors_health: u32,
        load: u16,
        voltage_battery: u16,
        current_battery: i16,
        drop_rate_comm: u16,
        errors_comm: u16,
        errors_count1: u16,
        errors_count2: u16,
        errors_count3: u16,
        errors_count4: u16,
        battery_remaining: i8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_sys_status(data: *mut mavlink_sys_status_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_manual_control(
        x: i16,
        y: i16,
        z: i16,
        r: i16,
        buttons: u16,
        target: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_manual_control(data: *mut mavlink_manual_control_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_att_pos_mocap(q: *mut f32, x: f32, y: f32, z: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_att_pos_mocap(data: *mut mavlink_att_pos_mocap_t) -> ::std::os::raw::c_int;
}
pub const rc_mav_connection_state_t_MAV_CONNECTION_WAITING: rc_mav_connection_state_t = 0;
pub const rc_mav_connection_state_t_MAV_CONNECTION_ACTIVE: rc_mav_connection_state_t = 1;
pub const rc_mav_connection_state_t_MAV_CONNECTION_LOST: rc_mav_connection_state_t = 2;
pub type rc_mav_connection_state_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_mav_init(
        system_id: u8,
        dest_ip: *const ::std::os::raw::c_char,
        port: u16,
        connection_timeout_us: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_set_dest_ip(dest_ip: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_set_system_id(system_id: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_send_msg(msg: mavlink_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_is_new_msg(msg_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_msg(msg_id: ::std::os::raw::c_int, msg: *mut mavlink_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_set_callback(
        msg_id: ::std::os::raw::c_int,
        func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_set_callback_all(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_set_callback_connection_lost(
        func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_get_connection_state() -> rc_mav_connection_state_t;
}
extern "C" {
    pub fn rc_mav_get_sys_id_of_last_msg(msg_id: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    pub fn rc_mav_get_sys_id_of_last_msg_any() -> u8;
}
extern "C" {
    pub fn rc_mav_ns_since_last_msg(msg_id: ::std::os::raw::c_int) -> i64;
}
extern "C" {
    pub fn rc_mav_ns_since_last_msg_any() -> i64;
}
extern "C" {
    pub fn rc_mav_msg_id_of_last_msg() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mav_print_msg_name(msg_id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const rc_model_t_MODEL_UNKNOWN: rc_model_t = 0;
pub const rc_model_t_MODEL_BB_BLACK: rc_model_t = 1;
pub const rc_model_t_MODEL_BB_BLACK_RC: rc_model_t = 2;
pub const rc_model_t_MODEL_BB_BLACK_W: rc_model_t = 3;
pub const rc_model_t_MODEL_BB_BLACK_W_RC: rc_model_t = 4;
pub const rc_model_t_MODEL_BB_GREEN: rc_model_t = 5;
pub const rc_model_t_MODEL_BB_GREEN_W: rc_model_t = 6;
pub const rc_model_t_MODEL_BB_BLUE: rc_model_t = 7;
pub const rc_model_t_MODEL_BB_POCKET: rc_model_t = 8;
pub const rc_model_t_MODEL_RPI_B: rc_model_t = 9;
pub const rc_model_t_MODEL_RPI_B_PLUS: rc_model_t = 10;
pub const rc_model_t_MODEL_RPI2_B: rc_model_t = 11;
pub const rc_model_t_MODEL_RPI3_B: rc_model_t = 12;
pub const rc_model_t_MODEL_RPI3_B_PLUS: rc_model_t = 13;
pub const rc_model_t_MODEL_RPI0: rc_model_t = 14;
pub const rc_model_t_MODEL_RPI0_W: rc_model_t = 15;
pub const rc_model_t_MODEL_RPI_CM: rc_model_t = 16;
pub const rc_model_t_MODEL_RPI_CM3: rc_model_t = 17;
pub const rc_model_t_MODEL_PC: rc_model_t = 18;
pub type rc_model_t = ::std::os::raw::c_uint;
pub const rc_model_category_t_CATEGORY_UNKNOWN: rc_model_category_t = 0;
pub const rc_model_category_t_CATEGORY_BEAGLEBONE: rc_model_category_t = 1;
pub const rc_model_category_t_CATEGORY_RPI: rc_model_category_t = 2;
pub const rc_model_category_t_CATEGORY_PC: rc_model_category_t = 3;
pub type rc_model_category_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_model() -> rc_model_t;
}
extern "C" {
    pub fn rc_model_category() -> rc_model_category_t;
}
extern "C" {
    pub fn rc_model_print();
}
extern "C" {
    pub fn rc_model_category_print();
}
extern "C" {
    pub fn rc_motor_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_init_freq(pwm_frequency_hz: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_standby(standby_en: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_set(ch: ::std::os::raw::c_int, duty: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_free_spin(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_motor_brake(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type time_t = ::std::os::raw::c_longlong;
pub type clockid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timespec), "::", stringify!(tv_nsec))
    );
}
impl timespec {
    #[inline]
    pub fn new_bitfield_1() -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread {
    _unused: [u8; 0],
}
pub type pthread_t = *mut __pthread;
pub type pthread_once_t = ::std::os::raw::c_int;
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_mutexattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_condattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_barrierattr_t {
    pub __attr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pthread_rwlockattr_t {
    pub __attr: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __bits: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__sigset_t), "::", stringify!(__bits))
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_attr_t {
    pub __u: pthread_attr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 9usize],
    pub __vi: [::std::os::raw::c_int; 9usize],
    pub __s: [::std::os::raw::c_ulong; 9usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__vi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t__bindgen_ty_1),
            "::",
            stringify!(__s)
        )
    );
}
impl Default for pthread_attr_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        36usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_attr_t), "::", stringify!(__u))
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_mutex_t {
    pub __u: pthread_mutex_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 6usize],
    pub __vi: [::std::os::raw::c_int; 6usize],
    pub __p: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__vi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t__bindgen_ty_1),
            "::",
            stringify!(__p)
        )
    );
}
impl Default for pthread_mutex_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        24usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_mutex_t), "::", stringify!(__u))
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_cond_t {
    pub __u: pthread_cond_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 12usize],
    pub __vi: [::std::os::raw::c_int; 12usize],
    pub __p: [*mut ::std::os::raw::c_void; 12usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__vi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__p)
        )
    );
}
impl Default for pthread_cond_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_cond_t), "::", stringify!(__u))
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __u: pthread_rwlock_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 8usize],
    pub __vi: [::std::os::raw::c_int; 8usize],
    pub __p: [*mut ::std::os::raw::c_void; 8usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__vi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__p)
        )
    );
}
impl Default for pthread_rwlock_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(pthread_rwlock_t), "::", stringify!(__u))
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pthread_barrier_t {
    pub __u: pthread_barrier_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t__bindgen_ty_1 {
    pub __i: [::std::os::raw::c_int; 5usize],
    pub __vi: [::std::os::raw::c_int; 5usize],
    pub __p: [*mut ::std::os::raw::c_void; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__i) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__vi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__vi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t__bindgen_ty_1),
            "::",
            stringify!(__p)
        )
    );
}
impl Default for pthread_barrier_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        20usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__u)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __reserved1: ::std::os::raw::c_int,
    pub __reserved2: [::std::os::raw::c_long; 4usize],
    pub __reserved3: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        28usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__reserved3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(__reserved3)
        )
    );
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(arg1: pid_t, arg2: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(arg1: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(arg1: pid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setparam(arg1: pid_t, arg2: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        arg1: pid_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__sched_rr_get_interval_time64"]
    pub fn sched_rr_get_interval1(arg1: pid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
pub type timer_t = *mut ::std::os::raw::c_void;
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        44usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_min))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_hour))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_mon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_year))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_wday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_yday))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_isdst))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_gmtoff))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(tm), "::", stringify!(tm_zone))
    );
}
impl Default for tm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timespec_get(arg1: *mut timespec, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime_r(arg1: *const tm, arg2: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tzset();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(itimerspec), "::", stringify!(it_value))
    );
}
extern "C" {
    pub fn nanosleep(arg1: *const timespec, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(arg1: clockid_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        arg1: clockid_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const timespec,
        arg4: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(arg1: pid_t, arg2: *mut clockid_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn timer_create(arg1: clockid_t, arg2: *mut sigevent, arg3: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(arg1: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        arg1: timer_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const itimerspec,
        arg4: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(arg1: timer_t, arg2: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(arg1: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn stime(arg1: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}__time64"]
    pub fn time1(arg1: *mut time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}__difftime64"]
    pub fn difftime1(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__mktime64"]
    pub fn mktime1(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}__gmtime64"]
    pub fn gmtime1(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}__localtime64"]
    pub fn localtime1(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}__ctime64"]
    pub fn ctime1(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__timespec_get_time64"]
    pub fn timespec_get1(arg1: *mut timespec, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__gmtime64_r"]
    pub fn gmtime_r1(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}__localtime64_r"]
    pub fn localtime_r1(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}__ctime64_r"]
    pub fn ctime_r1(arg1: *const time_t, arg2: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__nanosleep_time64"]
    pub fn nanosleep1(arg1: *const timespec, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__clock_getres_time64"]
    pub fn clock_getres1(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__clock_gettime64"]
    pub fn clock_gettime1(arg1: clockid_t, arg2: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__clock_settime64"]
    pub fn clock_settime1(arg1: clockid_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__clock_nanosleep_time64"]
    pub fn clock_nanosleep1(
        arg1: clockid_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const timespec,
        arg4: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timer_settime64"]
    pub fn timer_settime1(
        arg1: timer_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const itimerspec,
        arg4: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timer_gettime64"]
    pub fn timer_gettime1(arg1: timer_t, arg2: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__stime64"]
    pub fn stime1(arg1: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timegm_time64"]
    pub fn timegm1(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pthread_join(arg1: pthread_t, arg2: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(arg1: *mut pthread_mutex_t, arg2: *const pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(arg1: *mut pthread_mutex_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(arg1: *mut pthread_cond_t, arg2: *const pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(arg1: *mut pthread_cond_t, arg2: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(arg1: *mut pthread_rwlock_t, arg2: *const pthread_rwlockattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(arg1: *mut pthread_rwlock_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(arg1: *mut pthread_rwlock_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(arg1: *mut pthread_spinlock_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(arg1: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(arg1: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(arg1: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(arg1: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        arg1: *mut pthread_barrier_t,
        arg2: *const pthread_barrierattr_t,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(arg1: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(arg1: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(arg1: pthread_key_t, arg2: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(arg1: *const pthread_attr_t, arg2: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(arg1: *mut pthread_attr_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(arg1: *const pthread_attr_t, arg2: *mut usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(arg1: *mut pthread_attr_t, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(arg1: *mut pthread_attr_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(arg1: *mut pthread_attr_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(arg1: *mut pthread_attr_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(arg1: *const pthread_attr_t, arg2: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(arg1: *mut pthread_attr_t, arg2: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(arg1: *mut pthread_condattr_t, arg2: clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(arg1: *const pthread_condattr_t, arg2: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(arg1: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        arg1: *const pthread_barrierattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(arg1: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        arg1: *mut pthread_barrierattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(arg1: pthread_t, arg2: *mut clockid_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptcb {
    pub __f: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __x: *mut ::std::os::raw::c_void,
    pub __next: *mut __ptcb,
}
#[test]
fn bindgen_test_layout___ptcb() {
    const UNINIT: ::std::mem::MaybeUninit<__ptcb> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ptcb>(),
        12usize,
        concat!("Size of: ", stringify!(__ptcb))
    );
    assert_eq!(
        ::std::mem::align_of::<__ptcb>(),
        4usize,
        concat!("Alignment of ", stringify!(__ptcb))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__f) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__ptcb), "::", stringify!(__f))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__ptcb), "::", stringify!(__x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(__ptcb), "::", stringify!(__next))
    );
}
impl Default for __ptcb {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn _pthread_cleanup_push(
        arg1: *mut __ptcb,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _pthread_cleanup_pop(arg1: *mut __ptcb, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__pthread_mutex_timedlock_time64"]
    pub fn pthread_mutex_timedlock1(arg1: *mut pthread_mutex_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__pthread_cond_timedwait_time64"]
    pub fn pthread_cond_timedwait1(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__pthread_rwlock_timedrdlock_time64"]
    pub fn pthread_rwlock_timedrdlock1(arg1: *mut pthread_rwlock_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__pthread_rwlock_timedwrlock_time64"]
    pub fn pthread_rwlock_timedwrlock1(arg1: *mut pthread_rwlock_t, arg2: *const timespec) -> ::std::os::raw::c_int;
}
pub const rc_mpu_accel_fsr_t_ACCEL_FSR_2G: rc_mpu_accel_fsr_t = 0;
pub const rc_mpu_accel_fsr_t_ACCEL_FSR_4G: rc_mpu_accel_fsr_t = 1;
pub const rc_mpu_accel_fsr_t_ACCEL_FSR_8G: rc_mpu_accel_fsr_t = 2;
pub const rc_mpu_accel_fsr_t_ACCEL_FSR_16G: rc_mpu_accel_fsr_t = 3;
pub type rc_mpu_accel_fsr_t = ::std::os::raw::c_uint;
pub const rc_mpu_gyro_fsr_t_GYRO_FSR_250DPS: rc_mpu_gyro_fsr_t = 0;
pub const rc_mpu_gyro_fsr_t_GYRO_FSR_500DPS: rc_mpu_gyro_fsr_t = 1;
pub const rc_mpu_gyro_fsr_t_GYRO_FSR_1000DPS: rc_mpu_gyro_fsr_t = 2;
pub const rc_mpu_gyro_fsr_t_GYRO_FSR_2000DPS: rc_mpu_gyro_fsr_t = 3;
pub type rc_mpu_gyro_fsr_t = ::std::os::raw::c_uint;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_OFF: rc_mpu_accel_dlpf_t = 0;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_460: rc_mpu_accel_dlpf_t = 1;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_184: rc_mpu_accel_dlpf_t = 2;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_92: rc_mpu_accel_dlpf_t = 3;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_41: rc_mpu_accel_dlpf_t = 4;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_20: rc_mpu_accel_dlpf_t = 5;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_10: rc_mpu_accel_dlpf_t = 6;
pub const rc_mpu_accel_dlpf_t_ACCEL_DLPF_5: rc_mpu_accel_dlpf_t = 7;
pub type rc_mpu_accel_dlpf_t = ::std::os::raw::c_uint;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_OFF: rc_mpu_gyro_dlpf_t = 0;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_250: rc_mpu_gyro_dlpf_t = 1;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_184: rc_mpu_gyro_dlpf_t = 2;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_92: rc_mpu_gyro_dlpf_t = 3;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_41: rc_mpu_gyro_dlpf_t = 4;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_20: rc_mpu_gyro_dlpf_t = 5;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_10: rc_mpu_gyro_dlpf_t = 6;
pub const rc_mpu_gyro_dlpf_t_GYRO_DLPF_5: rc_mpu_gyro_dlpf_t = 7;
pub type rc_mpu_gyro_dlpf_t = ::std::os::raw::c_uint;
pub const rc_mpu_orientation_t_ORIENTATION_Z_UP: rc_mpu_orientation_t = 136;
pub const rc_mpu_orientation_t_ORIENTATION_Z_DOWN: rc_mpu_orientation_t = 396;
pub const rc_mpu_orientation_t_ORIENTATION_X_UP: rc_mpu_orientation_t = 14;
pub const rc_mpu_orientation_t_ORIENTATION_X_DOWN: rc_mpu_orientation_t = 266;
pub const rc_mpu_orientation_t_ORIENTATION_Y_UP: rc_mpu_orientation_t = 112;
pub const rc_mpu_orientation_t_ORIENTATION_Y_DOWN: rc_mpu_orientation_t = 336;
pub const rc_mpu_orientation_t_ORIENTATION_X_FORWARD: rc_mpu_orientation_t = 133;
pub const rc_mpu_orientation_t_ORIENTATION_X_BACK: rc_mpu_orientation_t = 161;
pub type rc_mpu_orientation_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc_mpu_config_t {
    pub gpio_interrupt_pin_chip: ::std::os::raw::c_int,
    pub gpio_interrupt_pin: ::std::os::raw::c_int,
    pub i2c_bus: ::std::os::raw::c_int,
    pub i2c_addr: u8,
    pub show_warnings: ::std::os::raw::c_int,
    pub accel_fsr: rc_mpu_accel_fsr_t,
    pub gyro_fsr: rc_mpu_gyro_fsr_t,
    pub accel_dlpf: rc_mpu_accel_dlpf_t,
    pub gyro_dlpf: rc_mpu_gyro_dlpf_t,
    pub enable_magnetometer: ::std::os::raw::c_int,
    pub dmp_sample_rate: ::std::os::raw::c_int,
    pub dmp_fetch_accel_gyro: ::std::os::raw::c_int,
    pub dmp_auto_calibrate_gyro: ::std::os::raw::c_int,
    pub orient: rc_mpu_orientation_t,
    pub compass_time_constant: f64,
    pub dmp_interrupt_sched_policy: ::std::os::raw::c_int,
    pub dmp_interrupt_priority: ::std::os::raw::c_int,
    pub read_mag_after_callback: ::std::os::raw::c_int,
    pub mag_sample_rate_div: ::std::os::raw::c_int,
    pub tap_threshold: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rc_mpu_config_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_mpu_config_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_mpu_config_t>(),
        88usize,
        concat!("Size of: ", stringify!(rc_mpu_config_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_mpu_config_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rc_mpu_config_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpio_interrupt_pin_chip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(gpio_interrupt_pin_chip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpio_interrupt_pin) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(gpio_interrupt_pin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i2c_bus) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(i2c_bus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i2c_addr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(i2c_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).show_warnings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(show_warnings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accel_fsr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(accel_fsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gyro_fsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(gyro_fsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accel_dlpf) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(accel_dlpf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gyro_dlpf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(gyro_dlpf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_magnetometer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(enable_magnetometer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_sample_rate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(dmp_sample_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_fetch_accel_gyro) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(dmp_fetch_accel_gyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_auto_calibrate_gyro) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(dmp_auto_calibrate_gyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orient) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(orient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compass_time_constant) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(compass_time_constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_interrupt_sched_policy) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(dmp_interrupt_sched_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_interrupt_priority) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(dmp_interrupt_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_mag_after_callback) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(read_mag_after_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag_sample_rate_div) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(mag_sample_rate_div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tap_threshold) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_config_t),
            "::",
            stringify!(tap_threshold)
        )
    );
}
impl Default for rc_mpu_config_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rc_mpu_data_t {
    pub accel: [f64; 3usize],
    pub gyro: [f64; 3usize],
    pub mag: [f64; 3usize],
    pub temp: f64,
    pub raw_gyro: [i16; 3usize],
    pub raw_accel: [i16; 3usize],
    pub accel_to_ms2: f64,
    pub gyro_to_degs: f64,
    pub dmp_quat: [f64; 4usize],
    pub dmp_TaitBryan: [f64; 3usize],
    pub tap_detected: ::std::os::raw::c_int,
    pub last_tap_direction: ::std::os::raw::c_int,
    pub last_tap_count: ::std::os::raw::c_int,
    pub fused_quat: [f64; 4usize],
    pub fused_TaitBryan: [f64; 3usize],
    pub compass_heading: f64,
    pub compass_heading_raw: f64,
}
#[test]
fn bindgen_test_layout_rc_mpu_data_t() {
    const UNINIT: ::std::mem::MaybeUninit<rc_mpu_data_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rc_mpu_data_t>(),
        256usize,
        concat!("Size of: ", stringify!(rc_mpu_data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<rc_mpu_data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(rc_mpu_data_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rc_mpu_data_t), "::", stringify!(accel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gyro) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(rc_mpu_data_t), "::", stringify!(gyro))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mag) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(rc_mpu_data_t), "::", stringify!(mag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temp) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(rc_mpu_data_t), "::", stringify!(temp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_gyro) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(raw_gyro)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_accel) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(raw_accel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accel_to_ms2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(accel_to_ms2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gyro_to_degs) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(gyro_to_degs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_quat) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(dmp_quat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dmp_TaitBryan) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(dmp_TaitBryan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tap_detected) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(tap_detected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_tap_direction) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(last_tap_direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_tap_count) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(last_tap_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fused_quat) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(fused_quat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fused_TaitBryan) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(fused_TaitBryan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compass_heading) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(compass_heading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compass_heading_raw) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rc_mpu_data_t),
            "::",
            stringify!(compass_heading_raw)
        )
    );
}
extern "C" {
    pub fn rc_mpu_default_config() -> rc_mpu_config_t;
}
extern "C" {
    pub fn rc_mpu_set_config_to_default(conf: *mut rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_power_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_initialize(data: *mut rc_mpu_data_t, conf: rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_read_accel(data: *mut rc_mpu_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_read_gyro(data: *mut rc_mpu_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_read_temp(data: *mut rc_mpu_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_read_mag(data: *mut rc_mpu_data_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_initialize_dmp(data: *mut rc_mpu_data_t, conf: rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_set_dmp_callback(func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_block_until_dmp_data() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_nanos_since_last_dmp_interrupt() -> i64;
}
extern "C" {
    pub fn rc_mpu_set_tap_callback(
        func: ::std::option::Option<
            unsafe extern "C" fn(direction: ::std::os::raw::c_int, counter: ::std::os::raw::c_int),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_block_until_tap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_nanos_since_last_tap() -> i64;
}
extern "C" {
    pub fn rc_mpu_calibrate_gyro_routine(conf: rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_calibrate_mag_routine(conf: rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_calibrate_accel_routine(conf: rc_mpu_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_is_gyro_calibrated() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_is_mag_calibrated() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_mpu_is_accel_calibrated() -> ::std::os::raw::c_int;
}
pub const rc_pinmux_mode_t_PINMUX_GPIO: rc_pinmux_mode_t = 0;
pub const rc_pinmux_mode_t_PINMUX_GPIO_PU: rc_pinmux_mode_t = 1;
pub const rc_pinmux_mode_t_PINMUX_GPIO_PD: rc_pinmux_mode_t = 2;
pub const rc_pinmux_mode_t_PINMUX_PWM: rc_pinmux_mode_t = 3;
pub const rc_pinmux_mode_t_PINMUX_SPI: rc_pinmux_mode_t = 4;
pub const rc_pinmux_mode_t_PINMUX_UART: rc_pinmux_mode_t = 5;
pub const rc_pinmux_mode_t_PINMUX_CAN: rc_pinmux_mode_t = 6;
pub type rc_pinmux_mode_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_pinmux_set(pin: ::std::os::raw::c_int, mode: rc_pinmux_mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pinmux_set_default() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pru_start(ch: ::std::os::raw::c_int, fw_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pru_shared_mem_ptr() -> *mut u32;
}
extern "C" {
    pub fn rc_pru_stop(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_create(
        thread: *mut pthread_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg: *mut ::std::os::raw::c_void,
        policy: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_timed_join(
        thread: pthread_t,
        retval: *mut *mut ::std::os::raw::c_void,
        timeout_sec: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_print_properties(thread: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_set_properties_self(
        policy: ::std::os::raw::c_int,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_get_process_niceness() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pthread_set_process_niceness(niceness: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pwm_init(ss: ::std::os::raw::c_int, frequency: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pwm_cleanup(ss: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pwm_set_duty(ss: ::std::os::raw::c_int, ch: ::std::os::raw::c_char, duty: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_pwm_set_duty_ns(
        ss: ::std::os::raw::c_int,
        ch: ::std::os::raw::c_char,
        duty_ns: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_cleanup();
}
extern "C" {
    pub fn rc_servo_power_rail_en(en: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_set_esc_range(min: ::std::os::raw::c_int, max: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_send_pulse_us(ch: ::std::os::raw::c_int, us: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_send_pulse_normalized(ch: ::std::os::raw::c_int, input: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_send_esc_pulse_normalized(ch: ::std::os::raw::c_int, input: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_servo_send_oneshot_pulse_normalized(ch: ::std::os::raw::c_int, input: f64) -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_mode_t = ::std::os::raw::c_ushort;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_ushort;
pub type __kernel_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_uid_t = __kernel_uid_t;
pub type __kernel_old_gid_t = __kernel_gid_t;
pub type __kernel_size_t = ::std::os::raw::c_uint;
pub type __kernel_ssize_t = ::std::os::raw::c_int;
pub type __kernel_ptrdiff_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__kernel_fsid_t), "::", stringify!(val))
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct spi_ioc_transfer {
    pub tx_buf: __u64,
    pub rx_buf: __u64,
    pub len: __u32,
    pub speed_hz: __u32,
    pub delay_usecs: __u16,
    pub bits_per_word: __u8,
    pub cs_change: __u8,
    pub tx_nbits: __u8,
    pub rx_nbits: __u8,
    pub word_delay_usecs: __u8,
    pub pad: __u8,
}
#[test]
fn bindgen_test_layout_spi_ioc_transfer() {
    const UNINIT: ::std::mem::MaybeUninit<spi_ioc_transfer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<spi_ioc_transfer>(),
        32usize,
        concat!("Size of: ", stringify!(spi_ioc_transfer))
    );
    assert_eq!(
        ::std::mem::align_of::<spi_ioc_transfer>(),
        8usize,
        concat!("Alignment of ", stringify!(spi_ioc_transfer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(tx_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_buf) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(rx_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(spi_ioc_transfer), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed_hz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(speed_hz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay_usecs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(delay_usecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits_per_word) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(bits_per_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cs_change) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(cs_change)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx_nbits) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(tx_nbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_nbits) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(rx_nbits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_delay_usecs) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(spi_ioc_transfer),
            "::",
            stringify!(word_delay_usecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        31usize,
        concat!("Offset of field: ", stringify!(spi_ioc_transfer), "::", stringify!(pad))
    );
}
extern "C" {
    pub fn rc_spi_init_auto_slave(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        bus_mode: ::std::os::raw::c_int,
        speed_hz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_init_manual_slave(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        bus_mode: ::std::os::raw::c_int,
        speed_hz: ::std::os::raw::c_int,
        chip: ::std::os::raw::c_int,
        pin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_get_fd(bus: ::std::os::raw::c_int, slave: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_close(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_manual_select(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        select: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_transfer(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        tx_data: *mut u8,
        tx_bytes: usize,
        rx_data: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_write(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        data: *mut u8,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_spi_read(
        bus: ::std::os::raw::c_int,
        slave: ::std::os::raw::c_int,
        data: *mut u8,
        bytes: usize,
    ) -> ::std::os::raw::c_int;
}
pub const rc_state_t_UNINITIALIZED: rc_state_t = 0;
pub const rc_state_t_RUNNING: rc_state_t = 1;
pub const rc_state_t_PAUSED: rc_state_t = 2;
pub const rc_state_t_EXITING: rc_state_t = 3;
pub type rc_state_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rc_get_state() -> rc_state_t;
}
extern "C" {
    pub fn rc_set_state(new_state: rc_state_t);
}
extern "C" {
    pub fn rc_print_state() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_make_pid_file() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_kill_existing_process(timeout_s: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_remove_pid_file() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_enable_signal_handler() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_disable_signal_handler() -> ::std::os::raw::c_int;
}
pub type suseconds_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(timeval), "::", stringify!(tv_usec))
    );
}
pub type fd_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fd_set), "::", stringify!(fds_bits))
    );
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__select_time64"]
    pub fn select1(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__pselect_time64"]
    pub fn pselect1(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettimeofday(arg1: *mut timeval, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::std::mem::MaybeUninit<itimerval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(itimerval), "::", stringify!(it_value))
    );
}
extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(arg1: *const ::std::os::raw::c_char, arg2: *const timeval) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    const UNINIT: ::std::mem::MaybeUninit<timezone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_minuteswest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz_dsttime) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(timezone), "::", stringify!(tz_dsttime))
    );
}
extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimesat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(arg1: *const ::std::os::raw::c_char, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__gettimeofday_time64"]
    pub fn gettimeofday1(arg1: *mut timeval, arg2: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__getitimer_time64"]
    pub fn getitimer1(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__setitimer_time64"]
    pub fn setitimer1(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__utimes_time64"]
    pub fn utimes1(arg1: *const ::std::os::raw::c_char, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__futimes_time64"]
    pub fn futimes1(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__futimesat_time64"]
    pub fn futimesat1(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__lutimes_time64"]
    pub fn lutimes1(arg1: *const ::std::os::raw::c_char, arg2: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__settimeofday_time64"]
    pub fn settimeofday1(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__adjtime64"]
    pub fn adjtime1(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_nanosleep(ns: u64);
}
extern "C" {
    pub fn rc_usleep(us: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rc_nanos_since_epoch() -> u64;
}
extern "C" {
    pub fn rc_nanos_since_boot() -> u64;
}
extern "C" {
    pub fn rc_nanos_thread_time() -> u64;
}
extern "C" {
    pub fn rc_timespec_to_micros(ts: timespec) -> u64;
}
extern "C" {
    pub fn rc_timespec_to_millis(ts: timespec) -> u64;
}
extern "C" {
    pub fn rc_timeval_to_micros(tv: timeval) -> u64;
}
extern "C" {
    pub fn rc_timeval_to_millis(tv: timeval) -> u64;
}
extern "C" {
    pub fn rc_timespec_diff(A: timespec, B: timespec) -> timespec;
}
extern "C" {
    pub fn rc_timespec_add(start: *mut timespec, seconds: f64);
}
extern "C" {
    pub fn rc_uart_init(
        bus: ::std::os::raw::c_int,
        baudrate: ::std::os::raw::c_int,
        timeout: f32,
        canonical_en: ::std::os::raw::c_int,
        stop_bits: ::std::os::raw::c_int,
        parity_en: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_close(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_get_fd(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_flush(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_write(bus: ::std::os::raw::c_int, data: *mut u8, bytes: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_read_bytes(bus: ::std::os::raw::c_int, buf: *mut u8, bytes: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_read_line(bus: ::std::os::raw::c_int, buf: *mut u8, max_bytes: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_uart_bytes_available(bus: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc_version() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rc_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rc_version_print();
}
